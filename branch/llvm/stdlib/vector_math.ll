; ModuleID = 'vector_math.ll'

declare float @_Z4acosf(float %p0) nounwind
define <2 x float> @_Z4acosu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z4acosf(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z4acosf(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z5acoshf(float %p0) nounwind
define <2 x float> @_Z5acoshu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z5acoshf(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z5acoshf(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z6acospif(float %p0) nounwind
define <2 x float> @_Z6acospiu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z6acospif(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z6acospif(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z4asinf(float %p0) nounwind
define <2 x float> @_Z4asinu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z4asinf(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z4asinf(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z5asinhf(float %p0) nounwind
define <2 x float> @_Z5asinhu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z5asinhf(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z5asinhf(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z6asinpif(float %p0) nounwind
define <2 x float> @_Z6asinpiu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z6asinpif(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z6asinpif(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z4atanf(float %p0) nounwind
define <2 x float> @_Z4atanu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z4atanf(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z4atanf(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z5atan2ff(float %p0, float %p1) nounwind
define <2 x float> @_Z5atan2u2v2fu2v2f(<2 x float> %p0, <2 x float> %p1) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%s1_1 = extractelement <2 x float> %p1, i32 0
	%v1 = call float @_Z5atan2ff(float %s1_0, float %s1_1)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%s2_1 = extractelement <2 x float> %p1, i32 1
	%v2 = call float @_Z5atan2ff(float %s2_0, float %s2_1)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z5atanhf(float %p0) nounwind
define <2 x float> @_Z5atanhu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z5atanhf(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z5atanhf(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z6atanpif(float %p0) nounwind
define <2 x float> @_Z6atanpiu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z6atanpif(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z6atanpif(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z7atan2piff(float %p0, float %p1) nounwind
define <2 x float> @_Z7atan2piu2v2fu2v2f(<2 x float> %p0, <2 x float> %p1) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%s1_1 = extractelement <2 x float> %p1, i32 0
	%v1 = call float @_Z7atan2piff(float %s1_0, float %s1_1)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%s2_1 = extractelement <2 x float> %p1, i32 1
	%v2 = call float @_Z7atan2piff(float %s2_0, float %s2_1)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z4cbrtf(float %p0) nounwind
define <2 x float> @_Z4cbrtu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z4cbrtf(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z4cbrtf(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z4ceilf(float %p0) nounwind
define <2 x float> @_Z4ceilu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z4ceilf(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z4ceilf(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z8copysignff(float %p0, float %p1) nounwind
define <2 x float> @_Z8copysignu2v2fu2v2f(<2 x float> %p0, <2 x float> %p1) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%s1_1 = extractelement <2 x float> %p1, i32 0
	%v1 = call float @_Z8copysignff(float %s1_0, float %s1_1)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%s2_1 = extractelement <2 x float> %p1, i32 1
	%v2 = call float @_Z8copysignff(float %s2_0, float %s2_1)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z4coshf(float %p0) nounwind
define <2 x float> @_Z4coshu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z4coshf(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z4coshf(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z5cospif(float %p0) nounwind
define <2 x float> @_Z5cospiu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z5cospif(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z5cospif(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z4erfcf(float %p0) nounwind
define <2 x float> @_Z4erfcu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z4erfcf(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z4erfcf(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z3erff(float %p0) nounwind
define <2 x float> @_Z3erfu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z3erff(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z3erff(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z4exp2f(float %p0) nounwind
define <2 x float> @_Z4exp2u2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z4exp2f(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z4exp2f(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z5exp10f(float %p0) nounwind
define <2 x float> @_Z5exp10u2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z5exp10f(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z5exp10f(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z5expm1f(float %p0) nounwind
define <2 x float> @_Z5expm1u2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z5expm1f(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z5expm1f(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z4fdimff(float %p0, float %p1) nounwind
define <2 x float> @_Z4fdimu2v2fu2v2f(<2 x float> %p0, <2 x float> %p1) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%s1_1 = extractelement <2 x float> %p1, i32 0
	%v1 = call float @_Z4fdimff(float %s1_0, float %s1_1)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%s2_1 = extractelement <2 x float> %p1, i32 1
	%v2 = call float @_Z4fdimff(float %s2_0, float %s2_1)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z4fmaxff(float %p0, float %p1) nounwind
define <2 x float> @_Z4fmaxu2v2fu2v2f(<2 x float> %p0, <2 x float> %p1) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%s1_1 = extractelement <2 x float> %p1, i32 0
	%v1 = call float @_Z4fmaxff(float %s1_0, float %s1_1)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%s2_1 = extractelement <2 x float> %p1, i32 1
	%v2 = call float @_Z4fmaxff(float %s2_0, float %s2_1)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z4fminff(float %p0, float %p1) nounwind
define <2 x float> @_Z4fminu2v2fu2v2f(<2 x float> %p0, <2 x float> %p1) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%s1_1 = extractelement <2 x float> %p1, i32 0
	%v1 = call float @_Z4fminff(float %s1_0, float %s1_1)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%s2_1 = extractelement <2 x float> %p1, i32 1
	%v2 = call float @_Z4fminff(float %s2_0, float %s2_1)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z4fmodff(float %p0, float %p1) nounwind
define <2 x float> @_Z4fmodu2v2fu2v2f(<2 x float> %p0, <2 x float> %p1) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%s1_1 = extractelement <2 x float> %p1, i32 0
	%v1 = call float @_Z4fmodff(float %s1_0, float %s1_1)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%s2_1 = extractelement <2 x float> %p1, i32 1
	%v2 = call float @_Z4fmodff(float %s2_0, float %s2_1)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z5fractfPf(float %p0, float* %p1) nounwind
define <2 x float> @_Z5fractu2v2fPu2v2f(<2 x float> %p0, <2 x float>* %p1) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%s1_1 = getelementptr <2 x float>* %p1, i32 0, i32 0
	%v1 = call float @_Z5fractfPf(float %s1_0, float* %s1_1)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%s2_1 = getelementptr <2 x float>* %p1, i32 0, i32 1
	%v2 = call float @_Z5fractfPf(float %s2_0, float* %s2_1)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z5frexpfPi(float %p0, i32* %p1) nounwind
define <2 x float> @_Z5frexpu2v2fPu2v2i(<2 x float> %p0, <2 x i32>* %p1) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%s1_1 = getelementptr <2 x i32>* %p1, i32 0, i32 0
	%v1 = call float @_Z5frexpfPi(float %s1_0, i32* %s1_1)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%s2_1 = getelementptr <2 x i32>* %p1, i32 0, i32 1
	%v2 = call float @_Z5frexpfPi(float %s2_0, i32* %s2_1)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z5hypotff(float %p0, float %p1) nounwind
define <2 x float> @_Z5hypotu2v2fu2v2f(<2 x float> %p0, <2 x float> %p1) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%s1_1 = extractelement <2 x float> %p1, i32 0
	%v1 = call float @_Z5hypotff(float %s1_0, float %s1_1)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%s2_1 = extractelement <2 x float> %p1, i32 1
	%v2 = call float @_Z5hypotff(float %s2_0, float %s2_1)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z5ldexpfi(float %p0, i32 %p1) nounwind
define <2 x float> @_Z5ldexpu2v2fu2v2i(<2 x float> %p0, <2 x i32> %p1) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%s1_1 = extractelement <2 x i32> %p1, i32 0
	%v1 = call float @_Z5ldexpfi(float %s1_0, i32 %s1_1)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%s2_1 = extractelement <2 x i32> %p1, i32 1
	%v2 = call float @_Z5ldexpfi(float %s2_0, i32 %s2_1)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z6lgammaf(float %p0) nounwind
define <2 x float> @_Z6lgammau2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z6lgammaf(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z6lgammaf(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z8lgamma_rfPi(float %p0, i32* %p1) nounwind
define <2 x float> @_Z8lgamma_ru2v2fPu2v2i(<2 x float> %p0, <2 x i32>* %p1) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%s1_1 = getelementptr <2 x i32>* %p1, i32 0, i32 0
	%v1 = call float @_Z8lgamma_rfPi(float %s1_0, i32* %s1_1)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%s2_1 = getelementptr <2 x i32>* %p1, i32 0, i32 1
	%v2 = call float @_Z8lgamma_rfPi(float %s2_0, i32* %s2_1)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z4log2f(float %p0) nounwind
define <2 x float> @_Z4log2u2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z4log2f(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z4log2f(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z5log10f(float %p0) nounwind
define <2 x float> @_Z5log10u2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z5log10f(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z5log10f(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z5log1pf(float %p0) nounwind
define <2 x float> @_Z5log1pu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z5log1pf(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z5log1pf(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z4logbf(float %p0) nounwind
define <2 x float> @_Z4logbu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z4logbf(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z4logbf(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z3madfff(float %p0, float %p1, float %p2) nounwind
define <2 x float> @_Z3madu2v2fu2v2fu2v2f(<2 x float> %p0, <2 x float> %p1, <2 x float> %p2) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%s1_1 = extractelement <2 x float> %p1, i32 0
	%s1_2 = extractelement <2 x float> %p2, i32 0
	%v1 = call float @_Z3madfff(float %s1_0, float %s1_1, float %s1_2)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%s2_1 = extractelement <2 x float> %p1, i32 1
	%s2_2 = extractelement <2 x float> %p2, i32 1
	%v2 = call float @_Z3madfff(float %s2_0, float %s2_1, float %s2_2)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z6maxmagff(float %p0, float %p1) nounwind
define <2 x float> @_Z6maxmagu2v2fu2v2f(<2 x float> %p0, <2 x float> %p1) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%s1_1 = extractelement <2 x float> %p1, i32 0
	%v1 = call float @_Z6maxmagff(float %s1_0, float %s1_1)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%s2_1 = extractelement <2 x float> %p1, i32 1
	%v2 = call float @_Z6maxmagff(float %s2_0, float %s2_1)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z6minmagff(float %p0, float %p1) nounwind
define <2 x float> @_Z6minmagu2v2fu2v2f(<2 x float> %p0, <2 x float> %p1) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%s1_1 = extractelement <2 x float> %p1, i32 0
	%v1 = call float @_Z6minmagff(float %s1_0, float %s1_1)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%s2_1 = extractelement <2 x float> %p1, i32 1
	%v2 = call float @_Z6minmagff(float %s2_0, float %s2_1)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z4modffPf(float %p0, float* %p1) nounwind
define <2 x float> @_Z4modfu2v2fPu2v2f(<2 x float> %p0, <2 x float>* %p1) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%s1_1 = getelementptr <2 x float>* %p1, i32 0, i32 0
	%v1 = call float @_Z4modffPf(float %s1_0, float* %s1_1)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%s2_1 = getelementptr <2 x float>* %p1, i32 0, i32 1
	%v2 = call float @_Z4modffPf(float %s2_0, float* %s2_1)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z9nextafterff(float %p0, float %p1) nounwind
define <2 x float> @_Z9nextafteru2v2fu2v2f(<2 x float> %p0, <2 x float> %p1) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%s1_1 = extractelement <2 x float> %p1, i32 0
	%v1 = call float @_Z9nextafterff(float %s1_0, float %s1_1)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%s2_1 = extractelement <2 x float> %p1, i32 1
	%v2 = call float @_Z9nextafterff(float %s2_0, float %s2_1)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z4powrff(float %p0, float %p1) nounwind
define <2 x float> @_Z4powru2v2fu2v2f(<2 x float> %p0, <2 x float> %p1) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%s1_1 = extractelement <2 x float> %p1, i32 0
	%v1 = call float @_Z4powrff(float %s1_0, float %s1_1)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%s2_1 = extractelement <2 x float> %p1, i32 1
	%v2 = call float @_Z4powrff(float %s2_0, float %s2_1)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z9remainderff(float %p0, float %p1) nounwind
define <2 x float> @_Z9remainderu2v2fu2v2f(<2 x float> %p0, <2 x float> %p1) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%s1_1 = extractelement <2 x float> %p1, i32 0
	%v1 = call float @_Z9remainderff(float %s1_0, float %s1_1)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%s2_1 = extractelement <2 x float> %p1, i32 1
	%v2 = call float @_Z9remainderff(float %s2_0, float %s2_1)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z6remquoffPi(float %p0, float %p1, i32* %p2) nounwind
define <2 x float> @_Z6remquou2v2fu2v2fPu2v2i(<2 x float> %p0, <2 x float> %p1, <2 x i32>* %p2) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%s1_1 = extractelement <2 x float> %p1, i32 0
	%s1_2 = getelementptr <2 x i32>* %p2, i32 0, i32 0
	%v1 = call float @_Z6remquoffPi(float %s1_0, float %s1_1, i32* %s1_2)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%s2_1 = extractelement <2 x float> %p1, i32 1
	%s2_2 = getelementptr <2 x i32>* %p2, i32 0, i32 1
	%v2 = call float @_Z6remquoffPi(float %s2_0, float %s2_1, i32* %s2_2)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z4rintf(float %p0) nounwind
define <2 x float> @_Z4rintu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z4rintf(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z4rintf(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z5rootnfi(float %p0, i32 %p1) nounwind
define <2 x float> @_Z5rootnu2v2fu2v2i(<2 x float> %p0, <2 x i32> %p1) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%s1_1 = extractelement <2 x i32> %p1, i32 0
	%v1 = call float @_Z5rootnfi(float %s1_0, i32 %s1_1)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%s2_1 = extractelement <2 x i32> %p1, i32 1
	%v2 = call float @_Z5rootnfi(float %s2_0, i32 %s2_1)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z5roundf(float %p0) nounwind
define <2 x float> @_Z5roundu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z5roundf(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z5roundf(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z5rsqrtf(float %p0) nounwind
define <2 x float> @_Z5rsqrtu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z5rsqrtf(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z5rsqrtf(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z6sincosfPf(float %p0, float* %p1) nounwind
define <2 x float> @_Z6sincosu2v2fPu2v2f(<2 x float> %p0, <2 x float>* %p1) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%s1_1 = getelementptr <2 x float>* %p1, i32 0, i32 0
	%v1 = call float @_Z6sincosfPf(float %s1_0, float* %s1_1)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%s2_1 = getelementptr <2 x float>* %p1, i32 0, i32 1
	%v2 = call float @_Z6sincosfPf(float %s2_0, float* %s2_1)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z4sinhf(float %p0) nounwind
define <2 x float> @_Z4sinhu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z4sinhf(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z4sinhf(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z5sinpif(float %p0) nounwind
define <2 x float> @_Z5sinpiu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z5sinpif(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z5sinpif(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z3tanf(float %p0) nounwind
define <2 x float> @_Z3tanu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z3tanf(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z3tanf(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z4tanhf(float %p0) nounwind
define <2 x float> @_Z4tanhu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z4tanhf(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z4tanhf(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z5tanpif(float %p0) nounwind
define <2 x float> @_Z5tanpiu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z5tanpif(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z5tanpif(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z6tgammaf(float %p0) nounwind
define <2 x float> @_Z6tgammau2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z6tgammaf(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z6tgammaf(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z5truncf(float %p0) nounwind
define <2 x float> @_Z5truncu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z5truncf(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z5truncf(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z8half_cosf(float %p0) nounwind
define <2 x float> @_Z8half_cosu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z8half_cosf(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z8half_cosf(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z11half_divideff(float %p0, float %p1) nounwind
define <2 x float> @_Z11half_divideu2v2fu2v2f(<2 x float> %p0, <2 x float> %p1) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%s1_1 = extractelement <2 x float> %p1, i32 0
	%v1 = call float @_Z11half_divideff(float %s1_0, float %s1_1)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%s2_1 = extractelement <2 x float> %p1, i32 1
	%v2 = call float @_Z11half_divideff(float %s2_0, float %s2_1)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z8half_expf(float %p0) nounwind
define <2 x float> @_Z8half_expu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z8half_expf(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z8half_expf(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z9half_exp2f(float %p0) nounwind
define <2 x float> @_Z9half_exp2u2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z9half_exp2f(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z9half_exp2f(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z10half_exp10f(float %p0) nounwind
define <2 x float> @_Z10half_exp10u2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z10half_exp10f(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z10half_exp10f(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z8half_logf(float %p0) nounwind
define <2 x float> @_Z8half_logu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z8half_logf(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z8half_logf(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z9half_log2f(float %p0) nounwind
define <2 x float> @_Z9half_log2u2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z9half_log2f(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z9half_log2f(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z10half_log10f(float %p0) nounwind
define <2 x float> @_Z10half_log10u2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z10half_log10f(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z10half_log10f(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z9half_powrff(float %p0, float %p1) nounwind
define <2 x float> @_Z9half_powru2v2fu2v2f(<2 x float> %p0, <2 x float> %p1) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%s1_1 = extractelement <2 x float> %p1, i32 0
	%v1 = call float @_Z9half_powrff(float %s1_0, float %s1_1)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%s2_1 = extractelement <2 x float> %p1, i32 1
	%v2 = call float @_Z9half_powrff(float %s2_0, float %s2_1)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z10half_recipf(float %p0) nounwind
define <2 x float> @_Z10half_recipu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z10half_recipf(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z10half_recipf(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z10half_rsqrtf(float %p0) nounwind
define <2 x float> @_Z10half_rsqrtu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z10half_rsqrtf(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z10half_rsqrtf(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z8half_sinf(float %p0) nounwind
define <2 x float> @_Z8half_sinu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z8half_sinf(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z8half_sinf(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z9half_sqrtf(float %p0) nounwind
define <2 x float> @_Z9half_sqrtu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z9half_sqrtf(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z9half_sqrtf(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z8half_tanf(float %p0) nounwind
define <2 x float> @_Z8half_tanu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z8half_tanf(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z8half_tanf(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z11native_exp2f(float %p0) nounwind
define <2 x float> @_Z11native_exp2u2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z11native_exp2f(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z11native_exp2f(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z12native_exp10f(float %p0) nounwind
define <2 x float> @_Z12native_exp10u2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z12native_exp10f(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z12native_exp10f(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z11native_log2f(float %p0) nounwind
define <2 x float> @_Z11native_log2u2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z11native_log2f(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z11native_log2f(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z12native_log10f(float %p0) nounwind
define <2 x float> @_Z12native_log10u2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z12native_log10f(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z12native_log10f(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z12native_recipf(float %p0) nounwind
define <2 x float> @_Z12native_recipu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z12native_recipf(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z12native_recipf(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z12native_rsqrtf(float %p0) nounwind
define <2 x float> @_Z12native_rsqrtu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z12native_rsqrtf(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z12native_rsqrtf(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z11native_sqrtf(float %p0) nounwind
define <2 x float> @_Z11native_sqrtu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z11native_sqrtf(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z11native_sqrtf(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z10native_sinf(float %p0) nounwind
define <2 x float> @_Z10native_sinu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z10native_sinf(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z10native_sinf(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z10native_cosf(float %p0) nounwind
define <2 x float> @_Z10native_cosu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z10native_cosf(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z10native_cosf(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z10native_expf(float %p0) nounwind
define <2 x float> @_Z10native_expu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z10native_expf(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z10native_expf(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z10native_logf(float %p0) nounwind
define <2 x float> @_Z10native_logu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z10native_logf(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z10native_logf(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z10native_tanf(float %p0) nounwind
define <2 x float> @_Z10native_tanu2v2f(<2 x float> %p0) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%v1 = call float @_Z10native_tanf(float %s1_0)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%v2 = call float @_Z10native_tanf(float %s2_0)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z13native_divideff(float %p0, float %p1) nounwind
define <2 x float> @_Z13native_divideu2v2fu2v2f(<2 x float> %p0, <2 x float> %p1) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%s1_1 = extractelement <2 x float> %p1, i32 0
	%v1 = call float @_Z13native_divideff(float %s1_0, float %s1_1)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%s2_1 = extractelement <2 x float> %p1, i32 1
	%v2 = call float @_Z13native_divideff(float %s2_0, float %s2_1)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z11native_powrff(float %p0, float %p1) nounwind
define <2 x float> @_Z11native_powru2v2fu2v2f(<2 x float> %p0, <2 x float> %p1) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%s1_1 = extractelement <2 x float> %p1, i32 0
	%v1 = call float @_Z11native_powrff(float %s1_0, float %s1_1)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%s2_1 = extractelement <2 x float> %p1, i32 1
	%v2 = call float @_Z11native_powrff(float %s2_0, float %s2_1)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare float @_Z12native_ldexpfi(float %p0, i32 %p1) nounwind
define <2 x float> @_Z12native_ldexpu2v2fu2v2i(<2 x float> %p0, <2 x i32> %p1) nounwind {
	%s1_0 = extractelement <2 x float> %p0, i32 0
	%s1_1 = extractelement <2 x i32> %p1, i32 0
	%v1 = call float @_Z12native_ldexpfi(float %s1_0, i32 %s1_1)
	%r1 = insertelement <2 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <2 x float> %p0, i32 1
	%s2_1 = extractelement <2 x i32> %p1, i32 1
	%v2 = call float @_Z12native_ldexpfi(float %s2_0, i32 %s2_1)
	%r2 = insertelement <2 x float> %r1, float %v2, i32 1
	ret <2 x float> %r2
}
declare double @_Z4acosd(double %p0) nounwind
define <2 x double> @_Z4acosu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z4acosd(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z4acosd(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z5acoshd(double %p0) nounwind
define <2 x double> @_Z5acoshu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z5acoshd(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z5acoshd(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z6acospid(double %p0) nounwind
define <2 x double> @_Z6acospiu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z6acospid(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z6acospid(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z4asind(double %p0) nounwind
define <2 x double> @_Z4asinu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z4asind(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z4asind(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z5asinhd(double %p0) nounwind
define <2 x double> @_Z5asinhu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z5asinhd(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z5asinhd(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z6asinpid(double %p0) nounwind
define <2 x double> @_Z6asinpiu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z6asinpid(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z6asinpid(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z4atand(double %p0) nounwind
define <2 x double> @_Z4atanu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z4atand(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z4atand(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z5atan2dd(double %p0, double %p1) nounwind
define <2 x double> @_Z5atan2u2v2du2v2d(<2 x double> %p0, <2 x double> %p1) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%s1_1 = extractelement <2 x double> %p1, i32 0
	%v1 = call double @_Z5atan2dd(double %s1_0, double %s1_1)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%s2_1 = extractelement <2 x double> %p1, i32 1
	%v2 = call double @_Z5atan2dd(double %s2_0, double %s2_1)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z5atanhd(double %p0) nounwind
define <2 x double> @_Z5atanhu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z5atanhd(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z5atanhd(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z6atanpid(double %p0) nounwind
define <2 x double> @_Z6atanpiu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z6atanpid(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z6atanpid(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z7atan2pidd(double %p0, double %p1) nounwind
define <2 x double> @_Z7atan2piu2v2du2v2d(<2 x double> %p0, <2 x double> %p1) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%s1_1 = extractelement <2 x double> %p1, i32 0
	%v1 = call double @_Z7atan2pidd(double %s1_0, double %s1_1)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%s2_1 = extractelement <2 x double> %p1, i32 1
	%v2 = call double @_Z7atan2pidd(double %s2_0, double %s2_1)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z4cbrtd(double %p0) nounwind
define <2 x double> @_Z4cbrtu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z4cbrtd(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z4cbrtd(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z4ceild(double %p0) nounwind
define <2 x double> @_Z4ceilu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z4ceild(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z4ceild(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z8copysigndd(double %p0, double %p1) nounwind
define <2 x double> @_Z8copysignu2v2du2v2d(<2 x double> %p0, <2 x double> %p1) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%s1_1 = extractelement <2 x double> %p1, i32 0
	%v1 = call double @_Z8copysigndd(double %s1_0, double %s1_1)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%s2_1 = extractelement <2 x double> %p1, i32 1
	%v2 = call double @_Z8copysigndd(double %s2_0, double %s2_1)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z4coshd(double %p0) nounwind
define <2 x double> @_Z4coshu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z4coshd(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z4coshd(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z5cospid(double %p0) nounwind
define <2 x double> @_Z5cospiu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z5cospid(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z5cospid(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z4erfcd(double %p0) nounwind
define <2 x double> @_Z4erfcu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z4erfcd(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z4erfcd(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z3erfd(double %p0) nounwind
define <2 x double> @_Z3erfu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z3erfd(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z3erfd(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z4exp2d(double %p0) nounwind
define <2 x double> @_Z4exp2u2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z4exp2d(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z4exp2d(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z5exp10d(double %p0) nounwind
define <2 x double> @_Z5exp10u2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z5exp10d(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z5exp10d(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z5expm1d(double %p0) nounwind
define <2 x double> @_Z5expm1u2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z5expm1d(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z5expm1d(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z4fdimdd(double %p0, double %p1) nounwind
define <2 x double> @_Z4fdimu2v2du2v2d(<2 x double> %p0, <2 x double> %p1) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%s1_1 = extractelement <2 x double> %p1, i32 0
	%v1 = call double @_Z4fdimdd(double %s1_0, double %s1_1)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%s2_1 = extractelement <2 x double> %p1, i32 1
	%v2 = call double @_Z4fdimdd(double %s2_0, double %s2_1)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z4fmaxdd(double %p0, double %p1) nounwind
define <2 x double> @_Z4fmaxu2v2du2v2d(<2 x double> %p0, <2 x double> %p1) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%s1_1 = extractelement <2 x double> %p1, i32 0
	%v1 = call double @_Z4fmaxdd(double %s1_0, double %s1_1)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%s2_1 = extractelement <2 x double> %p1, i32 1
	%v2 = call double @_Z4fmaxdd(double %s2_0, double %s2_1)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z4fmindd(double %p0, double %p1) nounwind
define <2 x double> @_Z4fminu2v2du2v2d(<2 x double> %p0, <2 x double> %p1) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%s1_1 = extractelement <2 x double> %p1, i32 0
	%v1 = call double @_Z4fmindd(double %s1_0, double %s1_1)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%s2_1 = extractelement <2 x double> %p1, i32 1
	%v2 = call double @_Z4fmindd(double %s2_0, double %s2_1)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z4fmoddd(double %p0, double %p1) nounwind
define <2 x double> @_Z4fmodu2v2du2v2d(<2 x double> %p0, <2 x double> %p1) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%s1_1 = extractelement <2 x double> %p1, i32 0
	%v1 = call double @_Z4fmoddd(double %s1_0, double %s1_1)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%s2_1 = extractelement <2 x double> %p1, i32 1
	%v2 = call double @_Z4fmoddd(double %s2_0, double %s2_1)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z5fractdPd(double %p0, double* %p1) nounwind
define <2 x double> @_Z5fractu2v2dPu2v2d(<2 x double> %p0, <2 x double>* %p1) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%s1_1 = getelementptr <2 x double>* %p1, i32 0, i32 0
	%v1 = call double @_Z5fractdPd(double %s1_0, double* %s1_1)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%s2_1 = getelementptr <2 x double>* %p1, i32 0, i32 1
	%v2 = call double @_Z5fractdPd(double %s2_0, double* %s2_1)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z5frexpdPi(double %p0, i32* %p1) nounwind
define <2 x double> @_Z5frexpu2v2dPu2v2i(<2 x double> %p0, <2 x i32>* %p1) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%s1_1 = getelementptr <2 x i32>* %p1, i32 0, i32 0
	%v1 = call double @_Z5frexpdPi(double %s1_0, i32* %s1_1)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%s2_1 = getelementptr <2 x i32>* %p1, i32 0, i32 1
	%v2 = call double @_Z5frexpdPi(double %s2_0, i32* %s2_1)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z5hypotdd(double %p0, double %p1) nounwind
define <2 x double> @_Z5hypotu2v2du2v2d(<2 x double> %p0, <2 x double> %p1) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%s1_1 = extractelement <2 x double> %p1, i32 0
	%v1 = call double @_Z5hypotdd(double %s1_0, double %s1_1)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%s2_1 = extractelement <2 x double> %p1, i32 1
	%v2 = call double @_Z5hypotdd(double %s2_0, double %s2_1)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z5ldexpdi(double %p0, i32 %p1) nounwind
define <2 x double> @_Z5ldexpu2v2du2v2i(<2 x double> %p0, <2 x i32> %p1) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%s1_1 = extractelement <2 x i32> %p1, i32 0
	%v1 = call double @_Z5ldexpdi(double %s1_0, i32 %s1_1)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%s2_1 = extractelement <2 x i32> %p1, i32 1
	%v2 = call double @_Z5ldexpdi(double %s2_0, i32 %s2_1)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z6lgammad(double %p0) nounwind
define <2 x double> @_Z6lgammau2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z6lgammad(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z6lgammad(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z8lgamma_rdPi(double %p0, i32* %p1) nounwind
define <2 x double> @_Z8lgamma_ru2v2dPu2v2i(<2 x double> %p0, <2 x i32>* %p1) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%s1_1 = getelementptr <2 x i32>* %p1, i32 0, i32 0
	%v1 = call double @_Z8lgamma_rdPi(double %s1_0, i32* %s1_1)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%s2_1 = getelementptr <2 x i32>* %p1, i32 0, i32 1
	%v2 = call double @_Z8lgamma_rdPi(double %s2_0, i32* %s2_1)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z4log2d(double %p0) nounwind
define <2 x double> @_Z4log2u2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z4log2d(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z4log2d(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z5log10d(double %p0) nounwind
define <2 x double> @_Z5log10u2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z5log10d(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z5log10d(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z5log1pd(double %p0) nounwind
define <2 x double> @_Z5log1pu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z5log1pd(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z5log1pd(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z4logbd(double %p0) nounwind
define <2 x double> @_Z4logbu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z4logbd(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z4logbd(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z3madddd(double %p0, double %p1, double %p2) nounwind
define <2 x double> @_Z3madu2v2du2v2du2v2d(<2 x double> %p0, <2 x double> %p1, <2 x double> %p2) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%s1_1 = extractelement <2 x double> %p1, i32 0
	%s1_2 = extractelement <2 x double> %p2, i32 0
	%v1 = call double @_Z3madddd(double %s1_0, double %s1_1, double %s1_2)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%s2_1 = extractelement <2 x double> %p1, i32 1
	%s2_2 = extractelement <2 x double> %p2, i32 1
	%v2 = call double @_Z3madddd(double %s2_0, double %s2_1, double %s2_2)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z6maxmagdd(double %p0, double %p1) nounwind
define <2 x double> @_Z6maxmagu2v2du2v2d(<2 x double> %p0, <2 x double> %p1) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%s1_1 = extractelement <2 x double> %p1, i32 0
	%v1 = call double @_Z6maxmagdd(double %s1_0, double %s1_1)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%s2_1 = extractelement <2 x double> %p1, i32 1
	%v2 = call double @_Z6maxmagdd(double %s2_0, double %s2_1)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z6minmagdd(double %p0, double %p1) nounwind
define <2 x double> @_Z6minmagu2v2du2v2d(<2 x double> %p0, <2 x double> %p1) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%s1_1 = extractelement <2 x double> %p1, i32 0
	%v1 = call double @_Z6minmagdd(double %s1_0, double %s1_1)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%s2_1 = extractelement <2 x double> %p1, i32 1
	%v2 = call double @_Z6minmagdd(double %s2_0, double %s2_1)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z4modfdPd(double %p0, double* %p1) nounwind
define <2 x double> @_Z4modfu2v2dPu2v2d(<2 x double> %p0, <2 x double>* %p1) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%s1_1 = getelementptr <2 x double>* %p1, i32 0, i32 0
	%v1 = call double @_Z4modfdPd(double %s1_0, double* %s1_1)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%s2_1 = getelementptr <2 x double>* %p1, i32 0, i32 1
	%v2 = call double @_Z4modfdPd(double %s2_0, double* %s2_1)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z9nextafterdd(double %p0, double %p1) nounwind
define <2 x double> @_Z9nextafteru2v2du2v2d(<2 x double> %p0, <2 x double> %p1) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%s1_1 = extractelement <2 x double> %p1, i32 0
	%v1 = call double @_Z9nextafterdd(double %s1_0, double %s1_1)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%s2_1 = extractelement <2 x double> %p1, i32 1
	%v2 = call double @_Z9nextafterdd(double %s2_0, double %s2_1)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z4powrdd(double %p0, double %p1) nounwind
define <2 x double> @_Z4powru2v2du2v2d(<2 x double> %p0, <2 x double> %p1) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%s1_1 = extractelement <2 x double> %p1, i32 0
	%v1 = call double @_Z4powrdd(double %s1_0, double %s1_1)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%s2_1 = extractelement <2 x double> %p1, i32 1
	%v2 = call double @_Z4powrdd(double %s2_0, double %s2_1)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z9remainderdd(double %p0, double %p1) nounwind
define <2 x double> @_Z9remainderu2v2du2v2d(<2 x double> %p0, <2 x double> %p1) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%s1_1 = extractelement <2 x double> %p1, i32 0
	%v1 = call double @_Z9remainderdd(double %s1_0, double %s1_1)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%s2_1 = extractelement <2 x double> %p1, i32 1
	%v2 = call double @_Z9remainderdd(double %s2_0, double %s2_1)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z6remquoddPi(double %p0, double %p1, i32* %p2) nounwind
define <2 x double> @_Z6remquou2v2du2v2dPu2v2i(<2 x double> %p0, <2 x double> %p1, <2 x i32>* %p2) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%s1_1 = extractelement <2 x double> %p1, i32 0
	%s1_2 = getelementptr <2 x i32>* %p2, i32 0, i32 0
	%v1 = call double @_Z6remquoddPi(double %s1_0, double %s1_1, i32* %s1_2)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%s2_1 = extractelement <2 x double> %p1, i32 1
	%s2_2 = getelementptr <2 x i32>* %p2, i32 0, i32 1
	%v2 = call double @_Z6remquoddPi(double %s2_0, double %s2_1, i32* %s2_2)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z4rintd(double %p0) nounwind
define <2 x double> @_Z4rintu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z4rintd(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z4rintd(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z5rootndi(double %p0, i32 %p1) nounwind
define <2 x double> @_Z5rootnu2v2du2v2i(<2 x double> %p0, <2 x i32> %p1) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%s1_1 = extractelement <2 x i32> %p1, i32 0
	%v1 = call double @_Z5rootndi(double %s1_0, i32 %s1_1)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%s2_1 = extractelement <2 x i32> %p1, i32 1
	%v2 = call double @_Z5rootndi(double %s2_0, i32 %s2_1)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z5roundd(double %p0) nounwind
define <2 x double> @_Z5roundu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z5roundd(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z5roundd(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z5rsqrtd(double %p0) nounwind
define <2 x double> @_Z5rsqrtu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z5rsqrtd(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z5rsqrtd(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z6sincosdPd(double %p0, double* %p1) nounwind
define <2 x double> @_Z6sincosu2v2dPu2v2d(<2 x double> %p0, <2 x double>* %p1) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%s1_1 = getelementptr <2 x double>* %p1, i32 0, i32 0
	%v1 = call double @_Z6sincosdPd(double %s1_0, double* %s1_1)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%s2_1 = getelementptr <2 x double>* %p1, i32 0, i32 1
	%v2 = call double @_Z6sincosdPd(double %s2_0, double* %s2_1)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z4sinhd(double %p0) nounwind
define <2 x double> @_Z4sinhu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z4sinhd(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z4sinhd(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z5sinpid(double %p0) nounwind
define <2 x double> @_Z5sinpiu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z5sinpid(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z5sinpid(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z3tand(double %p0) nounwind
define <2 x double> @_Z3tanu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z3tand(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z3tand(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z4tanhd(double %p0) nounwind
define <2 x double> @_Z4tanhu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z4tanhd(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z4tanhd(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z5tanpid(double %p0) nounwind
define <2 x double> @_Z5tanpiu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z5tanpid(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z5tanpid(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z6tgammad(double %p0) nounwind
define <2 x double> @_Z6tgammau2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z6tgammad(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z6tgammad(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z5truncd(double %p0) nounwind
define <2 x double> @_Z5truncu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z5truncd(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z5truncd(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z8half_cosd(double %p0) nounwind
define <2 x double> @_Z8half_cosu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z8half_cosd(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z8half_cosd(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z11half_dividedd(double %p0, double %p1) nounwind
define <2 x double> @_Z11half_divideu2v2du2v2d(<2 x double> %p0, <2 x double> %p1) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%s1_1 = extractelement <2 x double> %p1, i32 0
	%v1 = call double @_Z11half_dividedd(double %s1_0, double %s1_1)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%s2_1 = extractelement <2 x double> %p1, i32 1
	%v2 = call double @_Z11half_dividedd(double %s2_0, double %s2_1)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z8half_expd(double %p0) nounwind
define <2 x double> @_Z8half_expu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z8half_expd(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z8half_expd(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z9half_exp2d(double %p0) nounwind
define <2 x double> @_Z9half_exp2u2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z9half_exp2d(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z9half_exp2d(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z10half_exp10d(double %p0) nounwind
define <2 x double> @_Z10half_exp10u2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z10half_exp10d(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z10half_exp10d(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z8half_logd(double %p0) nounwind
define <2 x double> @_Z8half_logu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z8half_logd(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z8half_logd(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z9half_log2d(double %p0) nounwind
define <2 x double> @_Z9half_log2u2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z9half_log2d(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z9half_log2d(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z10half_log10d(double %p0) nounwind
define <2 x double> @_Z10half_log10u2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z10half_log10d(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z10half_log10d(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z9half_powrdd(double %p0, double %p1) nounwind
define <2 x double> @_Z9half_powru2v2du2v2d(<2 x double> %p0, <2 x double> %p1) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%s1_1 = extractelement <2 x double> %p1, i32 0
	%v1 = call double @_Z9half_powrdd(double %s1_0, double %s1_1)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%s2_1 = extractelement <2 x double> %p1, i32 1
	%v2 = call double @_Z9half_powrdd(double %s2_0, double %s2_1)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z10half_recipd(double %p0) nounwind
define <2 x double> @_Z10half_recipu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z10half_recipd(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z10half_recipd(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z10half_rsqrtd(double %p0) nounwind
define <2 x double> @_Z10half_rsqrtu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z10half_rsqrtd(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z10half_rsqrtd(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z8half_sind(double %p0) nounwind
define <2 x double> @_Z8half_sinu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z8half_sind(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z8half_sind(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z9half_sqrtd(double %p0) nounwind
define <2 x double> @_Z9half_sqrtu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z9half_sqrtd(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z9half_sqrtd(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z8half_tand(double %p0) nounwind
define <2 x double> @_Z8half_tanu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z8half_tand(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z8half_tand(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z11native_exp2d(double %p0) nounwind
define <2 x double> @_Z11native_exp2u2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z11native_exp2d(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z11native_exp2d(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z12native_exp10d(double %p0) nounwind
define <2 x double> @_Z12native_exp10u2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z12native_exp10d(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z12native_exp10d(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z11native_log2d(double %p0) nounwind
define <2 x double> @_Z11native_log2u2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z11native_log2d(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z11native_log2d(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z12native_log10d(double %p0) nounwind
define <2 x double> @_Z12native_log10u2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z12native_log10d(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z12native_log10d(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z12native_recipd(double %p0) nounwind
define <2 x double> @_Z12native_recipu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z12native_recipd(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z12native_recipd(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z12native_rsqrtd(double %p0) nounwind
define <2 x double> @_Z12native_rsqrtu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z12native_rsqrtd(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z12native_rsqrtd(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z11native_sqrtd(double %p0) nounwind
define <2 x double> @_Z11native_sqrtu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z11native_sqrtd(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z11native_sqrtd(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z10native_sind(double %p0) nounwind
define <2 x double> @_Z10native_sinu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z10native_sind(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z10native_sind(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z10native_cosd(double %p0) nounwind
define <2 x double> @_Z10native_cosu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z10native_cosd(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z10native_cosd(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z10native_expd(double %p0) nounwind
define <2 x double> @_Z10native_expu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z10native_expd(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z10native_expd(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z10native_logd(double %p0) nounwind
define <2 x double> @_Z10native_logu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z10native_logd(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z10native_logd(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z10native_tand(double %p0) nounwind
define <2 x double> @_Z10native_tanu2v2d(<2 x double> %p0) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%v1 = call double @_Z10native_tand(double %s1_0)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%v2 = call double @_Z10native_tand(double %s2_0)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z13native_dividedd(double %p0, double %p1) nounwind
define <2 x double> @_Z13native_divideu2v2du2v2d(<2 x double> %p0, <2 x double> %p1) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%s1_1 = extractelement <2 x double> %p1, i32 0
	%v1 = call double @_Z13native_dividedd(double %s1_0, double %s1_1)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%s2_1 = extractelement <2 x double> %p1, i32 1
	%v2 = call double @_Z13native_dividedd(double %s2_0, double %s2_1)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z11native_powrdd(double %p0, double %p1) nounwind
define <2 x double> @_Z11native_powru2v2du2v2d(<2 x double> %p0, <2 x double> %p1) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%s1_1 = extractelement <2 x double> %p1, i32 0
	%v1 = call double @_Z11native_powrdd(double %s1_0, double %s1_1)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%s2_1 = extractelement <2 x double> %p1, i32 1
	%v2 = call double @_Z11native_powrdd(double %s2_0, double %s2_1)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
declare double @_Z12native_ldexpdi(double %p0, i32 %p1) nounwind
define <2 x double> @_Z12native_ldexpu2v2du2v2i(<2 x double> %p0, <2 x i32> %p1) nounwind {
	%s1_0 = extractelement <2 x double> %p0, i32 0
	%s1_1 = extractelement <2 x i32> %p1, i32 0
	%v1 = call double @_Z12native_ldexpdi(double %s1_0, i32 %s1_1)
	%r1 = insertelement <2 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <2 x double> %p0, i32 1
	%s2_1 = extractelement <2 x i32> %p1, i32 1
	%v2 = call double @_Z12native_ldexpdi(double %s2_0, i32 %s2_1)
	%r2 = insertelement <2 x double> %r1, double %v2, i32 1
	ret <2 x double> %r2
}
define <4 x float> @_Z4acosu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z4acosf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z4acosf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z4acosf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z5acoshu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z5acoshf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z5acoshf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z5acoshf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z6acospiu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z6acospif(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z6acospif(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z6acospif(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z4asinu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z4asinf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z4asinf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z4asinf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z5asinhu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z5asinhf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z5asinhf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z5asinhf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z6asinpiu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z6asinpif(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z6asinpif(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z6asinpif(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z4atanu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z4atanf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z4atanf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z4atanf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z5atan2u2v3fu2v3f(<4 x float> %p0, <4 x float> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x float> %p1, i32 0
	%v1 = call float @_Z5atan2ff(float %s1_0, float %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x float> %p1, i32 1
	%v2 = call float @_Z5atan2ff(float %s2_0, float %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x float> %p1, i32 2
	%v3 = call float @_Z5atan2ff(float %s3_0, float %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z5atanhu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z5atanhf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z5atanhf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z5atanhf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z6atanpiu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z6atanpif(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z6atanpif(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z6atanpif(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z7atan2piu2v3fu2v3f(<4 x float> %p0, <4 x float> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x float> %p1, i32 0
	%v1 = call float @_Z7atan2piff(float %s1_0, float %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x float> %p1, i32 1
	%v2 = call float @_Z7atan2piff(float %s2_0, float %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x float> %p1, i32 2
	%v3 = call float @_Z7atan2piff(float %s3_0, float %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z4cbrtu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z4cbrtf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z4cbrtf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z4cbrtf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z4ceilu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z4ceilf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z4ceilf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z4ceilf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z8copysignu2v3fu2v3f(<4 x float> %p0, <4 x float> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x float> %p1, i32 0
	%v1 = call float @_Z8copysignff(float %s1_0, float %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x float> %p1, i32 1
	%v2 = call float @_Z8copysignff(float %s2_0, float %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x float> %p1, i32 2
	%v3 = call float @_Z8copysignff(float %s3_0, float %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z4coshu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z4coshf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z4coshf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z4coshf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z5cospiu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z5cospif(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z5cospif(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z5cospif(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z4erfcu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z4erfcf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z4erfcf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z4erfcf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z3erfu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z3erff(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z3erff(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z3erff(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z4exp2u2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z4exp2f(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z4exp2f(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z4exp2f(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z5exp10u2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z5exp10f(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z5exp10f(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z5exp10f(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z5expm1u2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z5expm1f(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z5expm1f(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z5expm1f(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z4fdimu2v3fu2v3f(<4 x float> %p0, <4 x float> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x float> %p1, i32 0
	%v1 = call float @_Z4fdimff(float %s1_0, float %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x float> %p1, i32 1
	%v2 = call float @_Z4fdimff(float %s2_0, float %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x float> %p1, i32 2
	%v3 = call float @_Z4fdimff(float %s3_0, float %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z4fmaxu2v3fu2v3f(<4 x float> %p0, <4 x float> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x float> %p1, i32 0
	%v1 = call float @_Z4fmaxff(float %s1_0, float %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x float> %p1, i32 1
	%v2 = call float @_Z4fmaxff(float %s2_0, float %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x float> %p1, i32 2
	%v3 = call float @_Z4fmaxff(float %s3_0, float %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z4fminu2v3fu2v3f(<4 x float> %p0, <4 x float> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x float> %p1, i32 0
	%v1 = call float @_Z4fminff(float %s1_0, float %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x float> %p1, i32 1
	%v2 = call float @_Z4fminff(float %s2_0, float %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x float> %p1, i32 2
	%v3 = call float @_Z4fminff(float %s3_0, float %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z4fmodu2v3fu2v3f(<4 x float> %p0, <4 x float> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x float> %p1, i32 0
	%v1 = call float @_Z4fmodff(float %s1_0, float %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x float> %p1, i32 1
	%v2 = call float @_Z4fmodff(float %s2_0, float %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x float> %p1, i32 2
	%v3 = call float @_Z4fmodff(float %s3_0, float %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z5fractu2v3fPu2v3f(<4 x float> %p0, <4 x float>* %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = getelementptr <4 x float>* %p1, i32 0, i32 0
	%v1 = call float @_Z5fractfPf(float %s1_0, float* %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = getelementptr <4 x float>* %p1, i32 0, i32 1
	%v2 = call float @_Z5fractfPf(float %s2_0, float* %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = getelementptr <4 x float>* %p1, i32 0, i32 2
	%v3 = call float @_Z5fractfPf(float %s3_0, float* %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z5frexpu2v3fPu2v3i(<4 x float> %p0, <4 x i32>* %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = getelementptr <4 x i32>* %p1, i32 0, i32 0
	%v1 = call float @_Z5frexpfPi(float %s1_0, i32* %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = getelementptr <4 x i32>* %p1, i32 0, i32 1
	%v2 = call float @_Z5frexpfPi(float %s2_0, i32* %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = getelementptr <4 x i32>* %p1, i32 0, i32 2
	%v3 = call float @_Z5frexpfPi(float %s3_0, i32* %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z5hypotu2v3fu2v3f(<4 x float> %p0, <4 x float> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x float> %p1, i32 0
	%v1 = call float @_Z5hypotff(float %s1_0, float %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x float> %p1, i32 1
	%v2 = call float @_Z5hypotff(float %s2_0, float %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x float> %p1, i32 2
	%v3 = call float @_Z5hypotff(float %s3_0, float %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z5ldexpu2v3fu2v3i(<4 x float> %p0, <4 x i32> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x i32> %p1, i32 0
	%v1 = call float @_Z5ldexpfi(float %s1_0, i32 %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x i32> %p1, i32 1
	%v2 = call float @_Z5ldexpfi(float %s2_0, i32 %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x i32> %p1, i32 2
	%v3 = call float @_Z5ldexpfi(float %s3_0, i32 %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z6lgammau2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z6lgammaf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z6lgammaf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z6lgammaf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z8lgamma_ru2v3fPu2v3i(<4 x float> %p0, <4 x i32>* %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = getelementptr <4 x i32>* %p1, i32 0, i32 0
	%v1 = call float @_Z8lgamma_rfPi(float %s1_0, i32* %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = getelementptr <4 x i32>* %p1, i32 0, i32 1
	%v2 = call float @_Z8lgamma_rfPi(float %s2_0, i32* %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = getelementptr <4 x i32>* %p1, i32 0, i32 2
	%v3 = call float @_Z8lgamma_rfPi(float %s3_0, i32* %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z4log2u2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z4log2f(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z4log2f(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z4log2f(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z5log10u2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z5log10f(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z5log10f(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z5log10f(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z5log1pu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z5log1pf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z5log1pf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z5log1pf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z4logbu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z4logbf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z4logbf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z4logbf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z3madu2v3fu2v3fu2v3f(<4 x float> %p0, <4 x float> %p1, <4 x float> %p2) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x float> %p1, i32 0
	%s1_2 = extractelement <4 x float> %p2, i32 0
	%v1 = call float @_Z3madfff(float %s1_0, float %s1_1, float %s1_2)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x float> %p1, i32 1
	%s2_2 = extractelement <4 x float> %p2, i32 1
	%v2 = call float @_Z3madfff(float %s2_0, float %s2_1, float %s2_2)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x float> %p1, i32 2
	%s3_2 = extractelement <4 x float> %p2, i32 2
	%v3 = call float @_Z3madfff(float %s3_0, float %s3_1, float %s3_2)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z6maxmagu2v3fu2v3f(<4 x float> %p0, <4 x float> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x float> %p1, i32 0
	%v1 = call float @_Z6maxmagff(float %s1_0, float %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x float> %p1, i32 1
	%v2 = call float @_Z6maxmagff(float %s2_0, float %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x float> %p1, i32 2
	%v3 = call float @_Z6maxmagff(float %s3_0, float %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z6minmagu2v3fu2v3f(<4 x float> %p0, <4 x float> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x float> %p1, i32 0
	%v1 = call float @_Z6minmagff(float %s1_0, float %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x float> %p1, i32 1
	%v2 = call float @_Z6minmagff(float %s2_0, float %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x float> %p1, i32 2
	%v3 = call float @_Z6minmagff(float %s3_0, float %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z4modfu2v3fPu2v3f(<4 x float> %p0, <4 x float>* %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = getelementptr <4 x float>* %p1, i32 0, i32 0
	%v1 = call float @_Z4modffPf(float %s1_0, float* %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = getelementptr <4 x float>* %p1, i32 0, i32 1
	%v2 = call float @_Z4modffPf(float %s2_0, float* %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = getelementptr <4 x float>* %p1, i32 0, i32 2
	%v3 = call float @_Z4modffPf(float %s3_0, float* %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z9nextafteru2v3fu2v3f(<4 x float> %p0, <4 x float> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x float> %p1, i32 0
	%v1 = call float @_Z9nextafterff(float %s1_0, float %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x float> %p1, i32 1
	%v2 = call float @_Z9nextafterff(float %s2_0, float %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x float> %p1, i32 2
	%v3 = call float @_Z9nextafterff(float %s3_0, float %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z4powru2v3fu2v3f(<4 x float> %p0, <4 x float> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x float> %p1, i32 0
	%v1 = call float @_Z4powrff(float %s1_0, float %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x float> %p1, i32 1
	%v2 = call float @_Z4powrff(float %s2_0, float %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x float> %p1, i32 2
	%v3 = call float @_Z4powrff(float %s3_0, float %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z9remainderu2v3fu2v3f(<4 x float> %p0, <4 x float> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x float> %p1, i32 0
	%v1 = call float @_Z9remainderff(float %s1_0, float %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x float> %p1, i32 1
	%v2 = call float @_Z9remainderff(float %s2_0, float %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x float> %p1, i32 2
	%v3 = call float @_Z9remainderff(float %s3_0, float %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z6remquou2v3fu2v3fPu2v3i(<4 x float> %p0, <4 x float> %p1, <4 x i32>* %p2) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x float> %p1, i32 0
	%s1_2 = getelementptr <4 x i32>* %p2, i32 0, i32 0
	%v1 = call float @_Z6remquoffPi(float %s1_0, float %s1_1, i32* %s1_2)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x float> %p1, i32 1
	%s2_2 = getelementptr <4 x i32>* %p2, i32 0, i32 1
	%v2 = call float @_Z6remquoffPi(float %s2_0, float %s2_1, i32* %s2_2)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x float> %p1, i32 2
	%s3_2 = getelementptr <4 x i32>* %p2, i32 0, i32 2
	%v3 = call float @_Z6remquoffPi(float %s3_0, float %s3_1, i32* %s3_2)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z4rintu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z4rintf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z4rintf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z4rintf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z5rootnu2v3fu2v3i(<4 x float> %p0, <4 x i32> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x i32> %p1, i32 0
	%v1 = call float @_Z5rootnfi(float %s1_0, i32 %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x i32> %p1, i32 1
	%v2 = call float @_Z5rootnfi(float %s2_0, i32 %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x i32> %p1, i32 2
	%v3 = call float @_Z5rootnfi(float %s3_0, i32 %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z5roundu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z5roundf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z5roundf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z5roundf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z5rsqrtu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z5rsqrtf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z5rsqrtf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z5rsqrtf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z6sincosu2v3fPu2v3f(<4 x float> %p0, <4 x float>* %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = getelementptr <4 x float>* %p1, i32 0, i32 0
	%v1 = call float @_Z6sincosfPf(float %s1_0, float* %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = getelementptr <4 x float>* %p1, i32 0, i32 1
	%v2 = call float @_Z6sincosfPf(float %s2_0, float* %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = getelementptr <4 x float>* %p1, i32 0, i32 2
	%v3 = call float @_Z6sincosfPf(float %s3_0, float* %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z4sinhu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z4sinhf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z4sinhf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z4sinhf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z5sinpiu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z5sinpif(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z5sinpif(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z5sinpif(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z3tanu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z3tanf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z3tanf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z3tanf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z4tanhu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z4tanhf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z4tanhf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z4tanhf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z5tanpiu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z5tanpif(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z5tanpif(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z5tanpif(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z6tgammau2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z6tgammaf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z6tgammaf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z6tgammaf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z5truncu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z5truncf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z5truncf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z5truncf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z8half_cosu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z8half_cosf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z8half_cosf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z8half_cosf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z11half_divideu2v3fu2v3f(<4 x float> %p0, <4 x float> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x float> %p1, i32 0
	%v1 = call float @_Z11half_divideff(float %s1_0, float %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x float> %p1, i32 1
	%v2 = call float @_Z11half_divideff(float %s2_0, float %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x float> %p1, i32 2
	%v3 = call float @_Z11half_divideff(float %s3_0, float %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z8half_expu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z8half_expf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z8half_expf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z8half_expf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z9half_exp2u2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z9half_exp2f(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z9half_exp2f(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z9half_exp2f(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z10half_exp10u2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z10half_exp10f(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z10half_exp10f(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z10half_exp10f(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z8half_logu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z8half_logf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z8half_logf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z8half_logf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z9half_log2u2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z9half_log2f(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z9half_log2f(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z9half_log2f(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z10half_log10u2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z10half_log10f(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z10half_log10f(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z10half_log10f(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z9half_powru2v3fu2v3f(<4 x float> %p0, <4 x float> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x float> %p1, i32 0
	%v1 = call float @_Z9half_powrff(float %s1_0, float %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x float> %p1, i32 1
	%v2 = call float @_Z9half_powrff(float %s2_0, float %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x float> %p1, i32 2
	%v3 = call float @_Z9half_powrff(float %s3_0, float %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z10half_recipu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z10half_recipf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z10half_recipf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z10half_recipf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z10half_rsqrtu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z10half_rsqrtf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z10half_rsqrtf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z10half_rsqrtf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z8half_sinu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z8half_sinf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z8half_sinf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z8half_sinf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z9half_sqrtu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z9half_sqrtf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z9half_sqrtf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z9half_sqrtf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z8half_tanu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z8half_tanf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z8half_tanf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z8half_tanf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z11native_exp2u2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z11native_exp2f(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z11native_exp2f(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z11native_exp2f(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z12native_exp10u2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z12native_exp10f(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z12native_exp10f(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z12native_exp10f(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z11native_log2u2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z11native_log2f(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z11native_log2f(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z11native_log2f(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z12native_log10u2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z12native_log10f(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z12native_log10f(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z12native_log10f(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z12native_recipu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z12native_recipf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z12native_recipf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z12native_recipf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z12native_rsqrtu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z12native_rsqrtf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z12native_rsqrtf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z12native_rsqrtf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z11native_sqrtu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z11native_sqrtf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z11native_sqrtf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z11native_sqrtf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z10native_sinu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z10native_sinf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z10native_sinf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z10native_sinf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z10native_cosu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z10native_cosf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z10native_cosf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z10native_cosf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z10native_expu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z10native_expf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z10native_expf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z10native_expf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z10native_logu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z10native_logf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z10native_logf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z10native_logf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z10native_tanu2v3f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z10native_tanf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z10native_tanf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z10native_tanf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z13native_divideu2v3fu2v3f(<4 x float> %p0, <4 x float> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x float> %p1, i32 0
	%v1 = call float @_Z13native_divideff(float %s1_0, float %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x float> %p1, i32 1
	%v2 = call float @_Z13native_divideff(float %s2_0, float %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x float> %p1, i32 2
	%v3 = call float @_Z13native_divideff(float %s3_0, float %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z11native_powru2v3fu2v3f(<4 x float> %p0, <4 x float> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x float> %p1, i32 0
	%v1 = call float @_Z11native_powrff(float %s1_0, float %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x float> %p1, i32 1
	%v2 = call float @_Z11native_powrff(float %s2_0, float %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x float> %p1, i32 2
	%v3 = call float @_Z11native_powrff(float %s3_0, float %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x float> @_Z12native_ldexpu2v3fu2v3i(<4 x float> %p0, <4 x i32> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x i32> %p1, i32 0
	%v1 = call float @_Z12native_ldexpfi(float %s1_0, i32 %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x i32> %p1, i32 1
	%v2 = call float @_Z12native_ldexpfi(float %s2_0, i32 %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x i32> %p1, i32 2
	%v3 = call float @_Z12native_ldexpfi(float %s3_0, i32 %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	ret <4 x float> %r3
}
define <4 x double> @_Z4acosu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z4acosd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z4acosd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z4acosd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z5acoshu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z5acoshd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z5acoshd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z5acoshd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z6acospiu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z6acospid(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z6acospid(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z6acospid(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z4asinu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z4asind(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z4asind(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z4asind(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z5asinhu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z5asinhd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z5asinhd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z5asinhd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z6asinpiu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z6asinpid(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z6asinpid(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z6asinpid(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z4atanu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z4atand(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z4atand(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z4atand(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z5atan2u2v3du2v3d(<4 x double> %p0, <4 x double> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x double> %p1, i32 0
	%v1 = call double @_Z5atan2dd(double %s1_0, double %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x double> %p1, i32 1
	%v2 = call double @_Z5atan2dd(double %s2_0, double %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x double> %p1, i32 2
	%v3 = call double @_Z5atan2dd(double %s3_0, double %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z5atanhu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z5atanhd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z5atanhd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z5atanhd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z6atanpiu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z6atanpid(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z6atanpid(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z6atanpid(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z7atan2piu2v3du2v3d(<4 x double> %p0, <4 x double> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x double> %p1, i32 0
	%v1 = call double @_Z7atan2pidd(double %s1_0, double %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x double> %p1, i32 1
	%v2 = call double @_Z7atan2pidd(double %s2_0, double %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x double> %p1, i32 2
	%v3 = call double @_Z7atan2pidd(double %s3_0, double %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z4cbrtu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z4cbrtd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z4cbrtd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z4cbrtd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z4ceilu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z4ceild(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z4ceild(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z4ceild(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z8copysignu2v3du2v3d(<4 x double> %p0, <4 x double> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x double> %p1, i32 0
	%v1 = call double @_Z8copysigndd(double %s1_0, double %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x double> %p1, i32 1
	%v2 = call double @_Z8copysigndd(double %s2_0, double %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x double> %p1, i32 2
	%v3 = call double @_Z8copysigndd(double %s3_0, double %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z4coshu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z4coshd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z4coshd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z4coshd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z5cospiu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z5cospid(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z5cospid(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z5cospid(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z4erfcu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z4erfcd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z4erfcd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z4erfcd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z3erfu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z3erfd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z3erfd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z3erfd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z4exp2u2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z4exp2d(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z4exp2d(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z4exp2d(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z5exp10u2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z5exp10d(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z5exp10d(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z5exp10d(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z5expm1u2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z5expm1d(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z5expm1d(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z5expm1d(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z4fdimu2v3du2v3d(<4 x double> %p0, <4 x double> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x double> %p1, i32 0
	%v1 = call double @_Z4fdimdd(double %s1_0, double %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x double> %p1, i32 1
	%v2 = call double @_Z4fdimdd(double %s2_0, double %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x double> %p1, i32 2
	%v3 = call double @_Z4fdimdd(double %s3_0, double %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z4fmaxu2v3du2v3d(<4 x double> %p0, <4 x double> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x double> %p1, i32 0
	%v1 = call double @_Z4fmaxdd(double %s1_0, double %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x double> %p1, i32 1
	%v2 = call double @_Z4fmaxdd(double %s2_0, double %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x double> %p1, i32 2
	%v3 = call double @_Z4fmaxdd(double %s3_0, double %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z4fminu2v3du2v3d(<4 x double> %p0, <4 x double> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x double> %p1, i32 0
	%v1 = call double @_Z4fmindd(double %s1_0, double %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x double> %p1, i32 1
	%v2 = call double @_Z4fmindd(double %s2_0, double %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x double> %p1, i32 2
	%v3 = call double @_Z4fmindd(double %s3_0, double %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z4fmodu2v3du2v3d(<4 x double> %p0, <4 x double> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x double> %p1, i32 0
	%v1 = call double @_Z4fmoddd(double %s1_0, double %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x double> %p1, i32 1
	%v2 = call double @_Z4fmoddd(double %s2_0, double %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x double> %p1, i32 2
	%v3 = call double @_Z4fmoddd(double %s3_0, double %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z5fractu2v3dPu2v3d(<4 x double> %p0, <4 x double>* %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = getelementptr <4 x double>* %p1, i32 0, i32 0
	%v1 = call double @_Z5fractdPd(double %s1_0, double* %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = getelementptr <4 x double>* %p1, i32 0, i32 1
	%v2 = call double @_Z5fractdPd(double %s2_0, double* %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = getelementptr <4 x double>* %p1, i32 0, i32 2
	%v3 = call double @_Z5fractdPd(double %s3_0, double* %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z5frexpu2v3dPu2v3i(<4 x double> %p0, <4 x i32>* %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = getelementptr <4 x i32>* %p1, i32 0, i32 0
	%v1 = call double @_Z5frexpdPi(double %s1_0, i32* %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = getelementptr <4 x i32>* %p1, i32 0, i32 1
	%v2 = call double @_Z5frexpdPi(double %s2_0, i32* %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = getelementptr <4 x i32>* %p1, i32 0, i32 2
	%v3 = call double @_Z5frexpdPi(double %s3_0, i32* %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z5hypotu2v3du2v3d(<4 x double> %p0, <4 x double> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x double> %p1, i32 0
	%v1 = call double @_Z5hypotdd(double %s1_0, double %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x double> %p1, i32 1
	%v2 = call double @_Z5hypotdd(double %s2_0, double %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x double> %p1, i32 2
	%v3 = call double @_Z5hypotdd(double %s3_0, double %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z5ldexpu2v3du2v3i(<4 x double> %p0, <4 x i32> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x i32> %p1, i32 0
	%v1 = call double @_Z5ldexpdi(double %s1_0, i32 %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x i32> %p1, i32 1
	%v2 = call double @_Z5ldexpdi(double %s2_0, i32 %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x i32> %p1, i32 2
	%v3 = call double @_Z5ldexpdi(double %s3_0, i32 %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z6lgammau2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z6lgammad(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z6lgammad(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z6lgammad(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z8lgamma_ru2v3dPu2v3i(<4 x double> %p0, <4 x i32>* %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = getelementptr <4 x i32>* %p1, i32 0, i32 0
	%v1 = call double @_Z8lgamma_rdPi(double %s1_0, i32* %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = getelementptr <4 x i32>* %p1, i32 0, i32 1
	%v2 = call double @_Z8lgamma_rdPi(double %s2_0, i32* %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = getelementptr <4 x i32>* %p1, i32 0, i32 2
	%v3 = call double @_Z8lgamma_rdPi(double %s3_0, i32* %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z4log2u2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z4log2d(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z4log2d(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z4log2d(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z5log10u2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z5log10d(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z5log10d(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z5log10d(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z5log1pu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z5log1pd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z5log1pd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z5log1pd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z4logbu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z4logbd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z4logbd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z4logbd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z3madu2v3du2v3du2v3d(<4 x double> %p0, <4 x double> %p1, <4 x double> %p2) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x double> %p1, i32 0
	%s1_2 = extractelement <4 x double> %p2, i32 0
	%v1 = call double @_Z3madddd(double %s1_0, double %s1_1, double %s1_2)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x double> %p1, i32 1
	%s2_2 = extractelement <4 x double> %p2, i32 1
	%v2 = call double @_Z3madddd(double %s2_0, double %s2_1, double %s2_2)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x double> %p1, i32 2
	%s3_2 = extractelement <4 x double> %p2, i32 2
	%v3 = call double @_Z3madddd(double %s3_0, double %s3_1, double %s3_2)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z6maxmagu2v3du2v3d(<4 x double> %p0, <4 x double> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x double> %p1, i32 0
	%v1 = call double @_Z6maxmagdd(double %s1_0, double %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x double> %p1, i32 1
	%v2 = call double @_Z6maxmagdd(double %s2_0, double %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x double> %p1, i32 2
	%v3 = call double @_Z6maxmagdd(double %s3_0, double %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z6minmagu2v3du2v3d(<4 x double> %p0, <4 x double> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x double> %p1, i32 0
	%v1 = call double @_Z6minmagdd(double %s1_0, double %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x double> %p1, i32 1
	%v2 = call double @_Z6minmagdd(double %s2_0, double %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x double> %p1, i32 2
	%v3 = call double @_Z6minmagdd(double %s3_0, double %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z4modfu2v3dPu2v3d(<4 x double> %p0, <4 x double>* %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = getelementptr <4 x double>* %p1, i32 0, i32 0
	%v1 = call double @_Z4modfdPd(double %s1_0, double* %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = getelementptr <4 x double>* %p1, i32 0, i32 1
	%v2 = call double @_Z4modfdPd(double %s2_0, double* %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = getelementptr <4 x double>* %p1, i32 0, i32 2
	%v3 = call double @_Z4modfdPd(double %s3_0, double* %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z9nextafteru2v3du2v3d(<4 x double> %p0, <4 x double> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x double> %p1, i32 0
	%v1 = call double @_Z9nextafterdd(double %s1_0, double %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x double> %p1, i32 1
	%v2 = call double @_Z9nextafterdd(double %s2_0, double %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x double> %p1, i32 2
	%v3 = call double @_Z9nextafterdd(double %s3_0, double %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z4powru2v3du2v3d(<4 x double> %p0, <4 x double> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x double> %p1, i32 0
	%v1 = call double @_Z4powrdd(double %s1_0, double %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x double> %p1, i32 1
	%v2 = call double @_Z4powrdd(double %s2_0, double %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x double> %p1, i32 2
	%v3 = call double @_Z4powrdd(double %s3_0, double %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z9remainderu2v3du2v3d(<4 x double> %p0, <4 x double> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x double> %p1, i32 0
	%v1 = call double @_Z9remainderdd(double %s1_0, double %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x double> %p1, i32 1
	%v2 = call double @_Z9remainderdd(double %s2_0, double %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x double> %p1, i32 2
	%v3 = call double @_Z9remainderdd(double %s3_0, double %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z6remquou2v3du2v3dPu2v3i(<4 x double> %p0, <4 x double> %p1, <4 x i32>* %p2) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x double> %p1, i32 0
	%s1_2 = getelementptr <4 x i32>* %p2, i32 0, i32 0
	%v1 = call double @_Z6remquoddPi(double %s1_0, double %s1_1, i32* %s1_2)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x double> %p1, i32 1
	%s2_2 = getelementptr <4 x i32>* %p2, i32 0, i32 1
	%v2 = call double @_Z6remquoddPi(double %s2_0, double %s2_1, i32* %s2_2)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x double> %p1, i32 2
	%s3_2 = getelementptr <4 x i32>* %p2, i32 0, i32 2
	%v3 = call double @_Z6remquoddPi(double %s3_0, double %s3_1, i32* %s3_2)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z4rintu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z4rintd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z4rintd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z4rintd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z5rootnu2v3du2v3i(<4 x double> %p0, <4 x i32> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x i32> %p1, i32 0
	%v1 = call double @_Z5rootndi(double %s1_0, i32 %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x i32> %p1, i32 1
	%v2 = call double @_Z5rootndi(double %s2_0, i32 %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x i32> %p1, i32 2
	%v3 = call double @_Z5rootndi(double %s3_0, i32 %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z5roundu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z5roundd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z5roundd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z5roundd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z5rsqrtu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z5rsqrtd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z5rsqrtd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z5rsqrtd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z6sincosu2v3dPu2v3d(<4 x double> %p0, <4 x double>* %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = getelementptr <4 x double>* %p1, i32 0, i32 0
	%v1 = call double @_Z6sincosdPd(double %s1_0, double* %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = getelementptr <4 x double>* %p1, i32 0, i32 1
	%v2 = call double @_Z6sincosdPd(double %s2_0, double* %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = getelementptr <4 x double>* %p1, i32 0, i32 2
	%v3 = call double @_Z6sincosdPd(double %s3_0, double* %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z4sinhu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z4sinhd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z4sinhd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z4sinhd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z5sinpiu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z5sinpid(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z5sinpid(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z5sinpid(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z3tanu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z3tand(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z3tand(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z3tand(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z4tanhu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z4tanhd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z4tanhd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z4tanhd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z5tanpiu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z5tanpid(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z5tanpid(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z5tanpid(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z6tgammau2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z6tgammad(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z6tgammad(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z6tgammad(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z5truncu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z5truncd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z5truncd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z5truncd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z8half_cosu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z8half_cosd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z8half_cosd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z8half_cosd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z11half_divideu2v3du2v3d(<4 x double> %p0, <4 x double> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x double> %p1, i32 0
	%v1 = call double @_Z11half_dividedd(double %s1_0, double %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x double> %p1, i32 1
	%v2 = call double @_Z11half_dividedd(double %s2_0, double %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x double> %p1, i32 2
	%v3 = call double @_Z11half_dividedd(double %s3_0, double %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z8half_expu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z8half_expd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z8half_expd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z8half_expd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z9half_exp2u2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z9half_exp2d(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z9half_exp2d(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z9half_exp2d(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z10half_exp10u2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z10half_exp10d(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z10half_exp10d(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z10half_exp10d(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z8half_logu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z8half_logd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z8half_logd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z8half_logd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z9half_log2u2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z9half_log2d(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z9half_log2d(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z9half_log2d(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z10half_log10u2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z10half_log10d(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z10half_log10d(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z10half_log10d(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z9half_powru2v3du2v3d(<4 x double> %p0, <4 x double> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x double> %p1, i32 0
	%v1 = call double @_Z9half_powrdd(double %s1_0, double %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x double> %p1, i32 1
	%v2 = call double @_Z9half_powrdd(double %s2_0, double %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x double> %p1, i32 2
	%v3 = call double @_Z9half_powrdd(double %s3_0, double %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z10half_recipu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z10half_recipd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z10half_recipd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z10half_recipd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z10half_rsqrtu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z10half_rsqrtd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z10half_rsqrtd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z10half_rsqrtd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z8half_sinu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z8half_sind(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z8half_sind(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z8half_sind(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z9half_sqrtu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z9half_sqrtd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z9half_sqrtd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z9half_sqrtd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z8half_tanu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z8half_tand(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z8half_tand(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z8half_tand(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z11native_exp2u2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z11native_exp2d(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z11native_exp2d(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z11native_exp2d(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z12native_exp10u2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z12native_exp10d(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z12native_exp10d(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z12native_exp10d(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z11native_log2u2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z11native_log2d(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z11native_log2d(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z11native_log2d(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z12native_log10u2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z12native_log10d(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z12native_log10d(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z12native_log10d(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z12native_recipu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z12native_recipd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z12native_recipd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z12native_recipd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z12native_rsqrtu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z12native_rsqrtd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z12native_rsqrtd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z12native_rsqrtd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z11native_sqrtu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z11native_sqrtd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z11native_sqrtd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z11native_sqrtd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z10native_sinu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z10native_sind(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z10native_sind(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z10native_sind(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z10native_cosu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z10native_cosd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z10native_cosd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z10native_cosd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z10native_expu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z10native_expd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z10native_expd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z10native_expd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z10native_logu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z10native_logd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z10native_logd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z10native_logd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z10native_tanu2v3d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z10native_tand(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z10native_tand(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z10native_tand(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z13native_divideu2v3du2v3d(<4 x double> %p0, <4 x double> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x double> %p1, i32 0
	%v1 = call double @_Z13native_dividedd(double %s1_0, double %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x double> %p1, i32 1
	%v2 = call double @_Z13native_dividedd(double %s2_0, double %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x double> %p1, i32 2
	%v3 = call double @_Z13native_dividedd(double %s3_0, double %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z11native_powru2v3du2v3d(<4 x double> %p0, <4 x double> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x double> %p1, i32 0
	%v1 = call double @_Z11native_powrdd(double %s1_0, double %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x double> %p1, i32 1
	%v2 = call double @_Z11native_powrdd(double %s2_0, double %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x double> %p1, i32 2
	%v3 = call double @_Z11native_powrdd(double %s3_0, double %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x double> @_Z12native_ldexpu2v3du2v3i(<4 x double> %p0, <4 x i32> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x i32> %p1, i32 0
	%v1 = call double @_Z12native_ldexpdi(double %s1_0, i32 %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x i32> %p1, i32 1
	%v2 = call double @_Z12native_ldexpdi(double %s2_0, i32 %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x i32> %p1, i32 2
	%v3 = call double @_Z12native_ldexpdi(double %s3_0, i32 %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	ret <4 x double> %r3
}
define <4 x float> @_Z4acosu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z4acosf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z4acosf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z4acosf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z4acosf(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z5acoshu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z5acoshf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z5acoshf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z5acoshf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z5acoshf(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z6acospiu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z6acospif(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z6acospif(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z6acospif(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z6acospif(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z4asinu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z4asinf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z4asinf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z4asinf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z4asinf(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z5asinhu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z5asinhf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z5asinhf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z5asinhf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z5asinhf(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z6asinpiu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z6asinpif(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z6asinpif(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z6asinpif(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z6asinpif(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z4atanu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z4atanf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z4atanf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z4atanf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z4atanf(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z5atan2u2v4fu2v4f(<4 x float> %p0, <4 x float> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x float> %p1, i32 0
	%v1 = call float @_Z5atan2ff(float %s1_0, float %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x float> %p1, i32 1
	%v2 = call float @_Z5atan2ff(float %s2_0, float %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x float> %p1, i32 2
	%v3 = call float @_Z5atan2ff(float %s3_0, float %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%s4_1 = extractelement <4 x float> %p1, i32 3
	%v4 = call float @_Z5atan2ff(float %s4_0, float %s4_1)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z5atanhu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z5atanhf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z5atanhf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z5atanhf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z5atanhf(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z6atanpiu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z6atanpif(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z6atanpif(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z6atanpif(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z6atanpif(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z7atan2piu2v4fu2v4f(<4 x float> %p0, <4 x float> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x float> %p1, i32 0
	%v1 = call float @_Z7atan2piff(float %s1_0, float %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x float> %p1, i32 1
	%v2 = call float @_Z7atan2piff(float %s2_0, float %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x float> %p1, i32 2
	%v3 = call float @_Z7atan2piff(float %s3_0, float %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%s4_1 = extractelement <4 x float> %p1, i32 3
	%v4 = call float @_Z7atan2piff(float %s4_0, float %s4_1)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z4cbrtu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z4cbrtf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z4cbrtf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z4cbrtf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z4cbrtf(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z4ceilu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z4ceilf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z4ceilf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z4ceilf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z4ceilf(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z8copysignu2v4fu2v4f(<4 x float> %p0, <4 x float> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x float> %p1, i32 0
	%v1 = call float @_Z8copysignff(float %s1_0, float %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x float> %p1, i32 1
	%v2 = call float @_Z8copysignff(float %s2_0, float %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x float> %p1, i32 2
	%v3 = call float @_Z8copysignff(float %s3_0, float %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%s4_1 = extractelement <4 x float> %p1, i32 3
	%v4 = call float @_Z8copysignff(float %s4_0, float %s4_1)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z4coshu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z4coshf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z4coshf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z4coshf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z4coshf(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z5cospiu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z5cospif(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z5cospif(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z5cospif(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z5cospif(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z4erfcu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z4erfcf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z4erfcf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z4erfcf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z4erfcf(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z3erfu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z3erff(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z3erff(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z3erff(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z3erff(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z4exp2u2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z4exp2f(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z4exp2f(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z4exp2f(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z4exp2f(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z5exp10u2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z5exp10f(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z5exp10f(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z5exp10f(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z5exp10f(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z5expm1u2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z5expm1f(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z5expm1f(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z5expm1f(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z5expm1f(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z4fdimu2v4fu2v4f(<4 x float> %p0, <4 x float> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x float> %p1, i32 0
	%v1 = call float @_Z4fdimff(float %s1_0, float %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x float> %p1, i32 1
	%v2 = call float @_Z4fdimff(float %s2_0, float %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x float> %p1, i32 2
	%v3 = call float @_Z4fdimff(float %s3_0, float %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%s4_1 = extractelement <4 x float> %p1, i32 3
	%v4 = call float @_Z4fdimff(float %s4_0, float %s4_1)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z4fmaxu2v4fu2v4f(<4 x float> %p0, <4 x float> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x float> %p1, i32 0
	%v1 = call float @_Z4fmaxff(float %s1_0, float %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x float> %p1, i32 1
	%v2 = call float @_Z4fmaxff(float %s2_0, float %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x float> %p1, i32 2
	%v3 = call float @_Z4fmaxff(float %s3_0, float %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%s4_1 = extractelement <4 x float> %p1, i32 3
	%v4 = call float @_Z4fmaxff(float %s4_0, float %s4_1)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z4fminu2v4fu2v4f(<4 x float> %p0, <4 x float> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x float> %p1, i32 0
	%v1 = call float @_Z4fminff(float %s1_0, float %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x float> %p1, i32 1
	%v2 = call float @_Z4fminff(float %s2_0, float %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x float> %p1, i32 2
	%v3 = call float @_Z4fminff(float %s3_0, float %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%s4_1 = extractelement <4 x float> %p1, i32 3
	%v4 = call float @_Z4fminff(float %s4_0, float %s4_1)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z4fmodu2v4fu2v4f(<4 x float> %p0, <4 x float> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x float> %p1, i32 0
	%v1 = call float @_Z4fmodff(float %s1_0, float %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x float> %p1, i32 1
	%v2 = call float @_Z4fmodff(float %s2_0, float %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x float> %p1, i32 2
	%v3 = call float @_Z4fmodff(float %s3_0, float %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%s4_1 = extractelement <4 x float> %p1, i32 3
	%v4 = call float @_Z4fmodff(float %s4_0, float %s4_1)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z5fractu2v4fPu2v4f(<4 x float> %p0, <4 x float>* %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = getelementptr <4 x float>* %p1, i32 0, i32 0
	%v1 = call float @_Z5fractfPf(float %s1_0, float* %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = getelementptr <4 x float>* %p1, i32 0, i32 1
	%v2 = call float @_Z5fractfPf(float %s2_0, float* %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = getelementptr <4 x float>* %p1, i32 0, i32 2
	%v3 = call float @_Z5fractfPf(float %s3_0, float* %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%s4_1 = getelementptr <4 x float>* %p1, i32 0, i32 3
	%v4 = call float @_Z5fractfPf(float %s4_0, float* %s4_1)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z5frexpu2v4fPu2v4i(<4 x float> %p0, <4 x i32>* %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = getelementptr <4 x i32>* %p1, i32 0, i32 0
	%v1 = call float @_Z5frexpfPi(float %s1_0, i32* %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = getelementptr <4 x i32>* %p1, i32 0, i32 1
	%v2 = call float @_Z5frexpfPi(float %s2_0, i32* %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = getelementptr <4 x i32>* %p1, i32 0, i32 2
	%v3 = call float @_Z5frexpfPi(float %s3_0, i32* %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%s4_1 = getelementptr <4 x i32>* %p1, i32 0, i32 3
	%v4 = call float @_Z5frexpfPi(float %s4_0, i32* %s4_1)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z5hypotu2v4fu2v4f(<4 x float> %p0, <4 x float> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x float> %p1, i32 0
	%v1 = call float @_Z5hypotff(float %s1_0, float %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x float> %p1, i32 1
	%v2 = call float @_Z5hypotff(float %s2_0, float %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x float> %p1, i32 2
	%v3 = call float @_Z5hypotff(float %s3_0, float %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%s4_1 = extractelement <4 x float> %p1, i32 3
	%v4 = call float @_Z5hypotff(float %s4_0, float %s4_1)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z5ldexpu2v4fu2v4i(<4 x float> %p0, <4 x i32> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x i32> %p1, i32 0
	%v1 = call float @_Z5ldexpfi(float %s1_0, i32 %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x i32> %p1, i32 1
	%v2 = call float @_Z5ldexpfi(float %s2_0, i32 %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x i32> %p1, i32 2
	%v3 = call float @_Z5ldexpfi(float %s3_0, i32 %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%s4_1 = extractelement <4 x i32> %p1, i32 3
	%v4 = call float @_Z5ldexpfi(float %s4_0, i32 %s4_1)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z6lgammau2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z6lgammaf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z6lgammaf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z6lgammaf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z6lgammaf(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z8lgamma_ru2v4fPu2v4i(<4 x float> %p0, <4 x i32>* %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = getelementptr <4 x i32>* %p1, i32 0, i32 0
	%v1 = call float @_Z8lgamma_rfPi(float %s1_0, i32* %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = getelementptr <4 x i32>* %p1, i32 0, i32 1
	%v2 = call float @_Z8lgamma_rfPi(float %s2_0, i32* %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = getelementptr <4 x i32>* %p1, i32 0, i32 2
	%v3 = call float @_Z8lgamma_rfPi(float %s3_0, i32* %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%s4_1 = getelementptr <4 x i32>* %p1, i32 0, i32 3
	%v4 = call float @_Z8lgamma_rfPi(float %s4_0, i32* %s4_1)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z4log2u2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z4log2f(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z4log2f(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z4log2f(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z4log2f(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z5log10u2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z5log10f(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z5log10f(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z5log10f(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z5log10f(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z5log1pu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z5log1pf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z5log1pf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z5log1pf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z5log1pf(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z4logbu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z4logbf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z4logbf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z4logbf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z4logbf(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z3madu2v4fu2v4fu2v4f(<4 x float> %p0, <4 x float> %p1, <4 x float> %p2) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x float> %p1, i32 0
	%s1_2 = extractelement <4 x float> %p2, i32 0
	%v1 = call float @_Z3madfff(float %s1_0, float %s1_1, float %s1_2)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x float> %p1, i32 1
	%s2_2 = extractelement <4 x float> %p2, i32 1
	%v2 = call float @_Z3madfff(float %s2_0, float %s2_1, float %s2_2)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x float> %p1, i32 2
	%s3_2 = extractelement <4 x float> %p2, i32 2
	%v3 = call float @_Z3madfff(float %s3_0, float %s3_1, float %s3_2)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%s4_1 = extractelement <4 x float> %p1, i32 3
	%s4_2 = extractelement <4 x float> %p2, i32 3
	%v4 = call float @_Z3madfff(float %s4_0, float %s4_1, float %s4_2)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z6maxmagu2v4fu2v4f(<4 x float> %p0, <4 x float> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x float> %p1, i32 0
	%v1 = call float @_Z6maxmagff(float %s1_0, float %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x float> %p1, i32 1
	%v2 = call float @_Z6maxmagff(float %s2_0, float %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x float> %p1, i32 2
	%v3 = call float @_Z6maxmagff(float %s3_0, float %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%s4_1 = extractelement <4 x float> %p1, i32 3
	%v4 = call float @_Z6maxmagff(float %s4_0, float %s4_1)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z6minmagu2v4fu2v4f(<4 x float> %p0, <4 x float> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x float> %p1, i32 0
	%v1 = call float @_Z6minmagff(float %s1_0, float %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x float> %p1, i32 1
	%v2 = call float @_Z6minmagff(float %s2_0, float %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x float> %p1, i32 2
	%v3 = call float @_Z6minmagff(float %s3_0, float %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%s4_1 = extractelement <4 x float> %p1, i32 3
	%v4 = call float @_Z6minmagff(float %s4_0, float %s4_1)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z4modfu2v4fPu2v4f(<4 x float> %p0, <4 x float>* %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = getelementptr <4 x float>* %p1, i32 0, i32 0
	%v1 = call float @_Z4modffPf(float %s1_0, float* %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = getelementptr <4 x float>* %p1, i32 0, i32 1
	%v2 = call float @_Z4modffPf(float %s2_0, float* %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = getelementptr <4 x float>* %p1, i32 0, i32 2
	%v3 = call float @_Z4modffPf(float %s3_0, float* %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%s4_1 = getelementptr <4 x float>* %p1, i32 0, i32 3
	%v4 = call float @_Z4modffPf(float %s4_0, float* %s4_1)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z9nextafteru2v4fu2v4f(<4 x float> %p0, <4 x float> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x float> %p1, i32 0
	%v1 = call float @_Z9nextafterff(float %s1_0, float %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x float> %p1, i32 1
	%v2 = call float @_Z9nextafterff(float %s2_0, float %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x float> %p1, i32 2
	%v3 = call float @_Z9nextafterff(float %s3_0, float %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%s4_1 = extractelement <4 x float> %p1, i32 3
	%v4 = call float @_Z9nextafterff(float %s4_0, float %s4_1)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z4powru2v4fu2v4f(<4 x float> %p0, <4 x float> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x float> %p1, i32 0
	%v1 = call float @_Z4powrff(float %s1_0, float %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x float> %p1, i32 1
	%v2 = call float @_Z4powrff(float %s2_0, float %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x float> %p1, i32 2
	%v3 = call float @_Z4powrff(float %s3_0, float %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%s4_1 = extractelement <4 x float> %p1, i32 3
	%v4 = call float @_Z4powrff(float %s4_0, float %s4_1)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z9remainderu2v4fu2v4f(<4 x float> %p0, <4 x float> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x float> %p1, i32 0
	%v1 = call float @_Z9remainderff(float %s1_0, float %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x float> %p1, i32 1
	%v2 = call float @_Z9remainderff(float %s2_0, float %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x float> %p1, i32 2
	%v3 = call float @_Z9remainderff(float %s3_0, float %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%s4_1 = extractelement <4 x float> %p1, i32 3
	%v4 = call float @_Z9remainderff(float %s4_0, float %s4_1)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z6remquou2v4fu2v4fPu2v4i(<4 x float> %p0, <4 x float> %p1, <4 x i32>* %p2) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x float> %p1, i32 0
	%s1_2 = getelementptr <4 x i32>* %p2, i32 0, i32 0
	%v1 = call float @_Z6remquoffPi(float %s1_0, float %s1_1, i32* %s1_2)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x float> %p1, i32 1
	%s2_2 = getelementptr <4 x i32>* %p2, i32 0, i32 1
	%v2 = call float @_Z6remquoffPi(float %s2_0, float %s2_1, i32* %s2_2)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x float> %p1, i32 2
	%s3_2 = getelementptr <4 x i32>* %p2, i32 0, i32 2
	%v3 = call float @_Z6remquoffPi(float %s3_0, float %s3_1, i32* %s3_2)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%s4_1 = extractelement <4 x float> %p1, i32 3
	%s4_2 = getelementptr <4 x i32>* %p2, i32 0, i32 3
	%v4 = call float @_Z6remquoffPi(float %s4_0, float %s4_1, i32* %s4_2)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z4rintu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z4rintf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z4rintf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z4rintf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z4rintf(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z5rootnu2v4fu2v4i(<4 x float> %p0, <4 x i32> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x i32> %p1, i32 0
	%v1 = call float @_Z5rootnfi(float %s1_0, i32 %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x i32> %p1, i32 1
	%v2 = call float @_Z5rootnfi(float %s2_0, i32 %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x i32> %p1, i32 2
	%v3 = call float @_Z5rootnfi(float %s3_0, i32 %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%s4_1 = extractelement <4 x i32> %p1, i32 3
	%v4 = call float @_Z5rootnfi(float %s4_0, i32 %s4_1)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z5roundu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z5roundf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z5roundf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z5roundf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z5roundf(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z5rsqrtu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z5rsqrtf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z5rsqrtf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z5rsqrtf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z5rsqrtf(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z6sincosu2v4fPu2v4f(<4 x float> %p0, <4 x float>* %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = getelementptr <4 x float>* %p1, i32 0, i32 0
	%v1 = call float @_Z6sincosfPf(float %s1_0, float* %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = getelementptr <4 x float>* %p1, i32 0, i32 1
	%v2 = call float @_Z6sincosfPf(float %s2_0, float* %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = getelementptr <4 x float>* %p1, i32 0, i32 2
	%v3 = call float @_Z6sincosfPf(float %s3_0, float* %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%s4_1 = getelementptr <4 x float>* %p1, i32 0, i32 3
	%v4 = call float @_Z6sincosfPf(float %s4_0, float* %s4_1)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z4sinhu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z4sinhf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z4sinhf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z4sinhf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z4sinhf(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z5sinpiu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z5sinpif(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z5sinpif(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z5sinpif(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z5sinpif(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z3tanu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z3tanf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z3tanf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z3tanf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z3tanf(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z4tanhu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z4tanhf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z4tanhf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z4tanhf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z4tanhf(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z5tanpiu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z5tanpif(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z5tanpif(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z5tanpif(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z5tanpif(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z6tgammau2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z6tgammaf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z6tgammaf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z6tgammaf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z6tgammaf(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z5truncu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z5truncf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z5truncf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z5truncf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z5truncf(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z8half_cosu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z8half_cosf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z8half_cosf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z8half_cosf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z8half_cosf(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z11half_divideu2v4fu2v4f(<4 x float> %p0, <4 x float> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x float> %p1, i32 0
	%v1 = call float @_Z11half_divideff(float %s1_0, float %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x float> %p1, i32 1
	%v2 = call float @_Z11half_divideff(float %s2_0, float %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x float> %p1, i32 2
	%v3 = call float @_Z11half_divideff(float %s3_0, float %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%s4_1 = extractelement <4 x float> %p1, i32 3
	%v4 = call float @_Z11half_divideff(float %s4_0, float %s4_1)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z8half_expu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z8half_expf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z8half_expf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z8half_expf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z8half_expf(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z9half_exp2u2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z9half_exp2f(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z9half_exp2f(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z9half_exp2f(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z9half_exp2f(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z10half_exp10u2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z10half_exp10f(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z10half_exp10f(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z10half_exp10f(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z10half_exp10f(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z8half_logu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z8half_logf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z8half_logf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z8half_logf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z8half_logf(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z9half_log2u2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z9half_log2f(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z9half_log2f(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z9half_log2f(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z9half_log2f(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z10half_log10u2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z10half_log10f(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z10half_log10f(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z10half_log10f(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z10half_log10f(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z9half_powru2v4fu2v4f(<4 x float> %p0, <4 x float> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x float> %p1, i32 0
	%v1 = call float @_Z9half_powrff(float %s1_0, float %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x float> %p1, i32 1
	%v2 = call float @_Z9half_powrff(float %s2_0, float %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x float> %p1, i32 2
	%v3 = call float @_Z9half_powrff(float %s3_0, float %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%s4_1 = extractelement <4 x float> %p1, i32 3
	%v4 = call float @_Z9half_powrff(float %s4_0, float %s4_1)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z10half_recipu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z10half_recipf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z10half_recipf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z10half_recipf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z10half_recipf(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z10half_rsqrtu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z10half_rsqrtf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z10half_rsqrtf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z10half_rsqrtf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z10half_rsqrtf(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z8half_sinu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z8half_sinf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z8half_sinf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z8half_sinf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z8half_sinf(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z9half_sqrtu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z9half_sqrtf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z9half_sqrtf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z9half_sqrtf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z9half_sqrtf(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z8half_tanu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z8half_tanf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z8half_tanf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z8half_tanf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z8half_tanf(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z11native_exp2u2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z11native_exp2f(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z11native_exp2f(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z11native_exp2f(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z11native_exp2f(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z12native_exp10u2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z12native_exp10f(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z12native_exp10f(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z12native_exp10f(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z12native_exp10f(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z11native_log2u2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z11native_log2f(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z11native_log2f(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z11native_log2f(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z11native_log2f(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z12native_log10u2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z12native_log10f(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z12native_log10f(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z12native_log10f(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z12native_log10f(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z12native_recipu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z12native_recipf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z12native_recipf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z12native_recipf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z12native_recipf(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z12native_rsqrtu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z12native_rsqrtf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z12native_rsqrtf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z12native_rsqrtf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z12native_rsqrtf(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z11native_sqrtu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z11native_sqrtf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z11native_sqrtf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z11native_sqrtf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z11native_sqrtf(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z10native_sinu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z10native_sinf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z10native_sinf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z10native_sinf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z10native_sinf(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z10native_cosu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z10native_cosf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z10native_cosf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z10native_cosf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z10native_cosf(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z10native_expu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z10native_expf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z10native_expf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z10native_expf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z10native_expf(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z10native_logu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z10native_logf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z10native_logf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z10native_logf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z10native_logf(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z10native_tanu2v4f(<4 x float> %p0) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%v1 = call float @_Z10native_tanf(float %s1_0)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%v2 = call float @_Z10native_tanf(float %s2_0)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%v3 = call float @_Z10native_tanf(float %s3_0)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%v4 = call float @_Z10native_tanf(float %s4_0)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z13native_divideu2v4fu2v4f(<4 x float> %p0, <4 x float> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x float> %p1, i32 0
	%v1 = call float @_Z13native_divideff(float %s1_0, float %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x float> %p1, i32 1
	%v2 = call float @_Z13native_divideff(float %s2_0, float %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x float> %p1, i32 2
	%v3 = call float @_Z13native_divideff(float %s3_0, float %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%s4_1 = extractelement <4 x float> %p1, i32 3
	%v4 = call float @_Z13native_divideff(float %s4_0, float %s4_1)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z11native_powru2v4fu2v4f(<4 x float> %p0, <4 x float> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x float> %p1, i32 0
	%v1 = call float @_Z11native_powrff(float %s1_0, float %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x float> %p1, i32 1
	%v2 = call float @_Z11native_powrff(float %s2_0, float %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x float> %p1, i32 2
	%v3 = call float @_Z11native_powrff(float %s3_0, float %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%s4_1 = extractelement <4 x float> %p1, i32 3
	%v4 = call float @_Z11native_powrff(float %s4_0, float %s4_1)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x float> @_Z12native_ldexpu2v4fu2v4i(<4 x float> %p0, <4 x i32> %p1) nounwind {
	%s1_0 = extractelement <4 x float> %p0, i32 0
	%s1_1 = extractelement <4 x i32> %p1, i32 0
	%v1 = call float @_Z12native_ldexpfi(float %s1_0, i32 %s1_1)
	%r1 = insertelement <4 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <4 x float> %p0, i32 1
	%s2_1 = extractelement <4 x i32> %p1, i32 1
	%v2 = call float @_Z12native_ldexpfi(float %s2_0, i32 %s2_1)
	%r2 = insertelement <4 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <4 x float> %p0, i32 2
	%s3_1 = extractelement <4 x i32> %p1, i32 2
	%v3 = call float @_Z12native_ldexpfi(float %s3_0, i32 %s3_1)
	%r3 = insertelement <4 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <4 x float> %p0, i32 3
	%s4_1 = extractelement <4 x i32> %p1, i32 3
	%v4 = call float @_Z12native_ldexpfi(float %s4_0, i32 %s4_1)
	%r4 = insertelement <4 x float> %r3, float %v4, i32 3
	ret <4 x float> %r4
}
define <4 x double> @_Z4acosu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z4acosd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z4acosd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z4acosd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z4acosd(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z5acoshu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z5acoshd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z5acoshd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z5acoshd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z5acoshd(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z6acospiu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z6acospid(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z6acospid(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z6acospid(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z6acospid(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z4asinu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z4asind(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z4asind(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z4asind(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z4asind(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z5asinhu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z5asinhd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z5asinhd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z5asinhd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z5asinhd(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z6asinpiu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z6asinpid(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z6asinpid(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z6asinpid(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z6asinpid(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z4atanu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z4atand(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z4atand(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z4atand(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z4atand(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z5atan2u2v4du2v4d(<4 x double> %p0, <4 x double> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x double> %p1, i32 0
	%v1 = call double @_Z5atan2dd(double %s1_0, double %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x double> %p1, i32 1
	%v2 = call double @_Z5atan2dd(double %s2_0, double %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x double> %p1, i32 2
	%v3 = call double @_Z5atan2dd(double %s3_0, double %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%s4_1 = extractelement <4 x double> %p1, i32 3
	%v4 = call double @_Z5atan2dd(double %s4_0, double %s4_1)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z5atanhu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z5atanhd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z5atanhd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z5atanhd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z5atanhd(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z6atanpiu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z6atanpid(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z6atanpid(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z6atanpid(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z6atanpid(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z7atan2piu2v4du2v4d(<4 x double> %p0, <4 x double> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x double> %p1, i32 0
	%v1 = call double @_Z7atan2pidd(double %s1_0, double %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x double> %p1, i32 1
	%v2 = call double @_Z7atan2pidd(double %s2_0, double %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x double> %p1, i32 2
	%v3 = call double @_Z7atan2pidd(double %s3_0, double %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%s4_1 = extractelement <4 x double> %p1, i32 3
	%v4 = call double @_Z7atan2pidd(double %s4_0, double %s4_1)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z4cbrtu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z4cbrtd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z4cbrtd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z4cbrtd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z4cbrtd(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z4ceilu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z4ceild(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z4ceild(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z4ceild(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z4ceild(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z8copysignu2v4du2v4d(<4 x double> %p0, <4 x double> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x double> %p1, i32 0
	%v1 = call double @_Z8copysigndd(double %s1_0, double %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x double> %p1, i32 1
	%v2 = call double @_Z8copysigndd(double %s2_0, double %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x double> %p1, i32 2
	%v3 = call double @_Z8copysigndd(double %s3_0, double %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%s4_1 = extractelement <4 x double> %p1, i32 3
	%v4 = call double @_Z8copysigndd(double %s4_0, double %s4_1)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z4coshu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z4coshd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z4coshd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z4coshd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z4coshd(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z5cospiu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z5cospid(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z5cospid(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z5cospid(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z5cospid(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z4erfcu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z4erfcd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z4erfcd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z4erfcd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z4erfcd(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z3erfu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z3erfd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z3erfd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z3erfd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z3erfd(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z4exp2u2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z4exp2d(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z4exp2d(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z4exp2d(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z4exp2d(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z5exp10u2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z5exp10d(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z5exp10d(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z5exp10d(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z5exp10d(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z5expm1u2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z5expm1d(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z5expm1d(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z5expm1d(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z5expm1d(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z4fdimu2v4du2v4d(<4 x double> %p0, <4 x double> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x double> %p1, i32 0
	%v1 = call double @_Z4fdimdd(double %s1_0, double %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x double> %p1, i32 1
	%v2 = call double @_Z4fdimdd(double %s2_0, double %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x double> %p1, i32 2
	%v3 = call double @_Z4fdimdd(double %s3_0, double %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%s4_1 = extractelement <4 x double> %p1, i32 3
	%v4 = call double @_Z4fdimdd(double %s4_0, double %s4_1)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z4fmaxu2v4du2v4d(<4 x double> %p0, <4 x double> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x double> %p1, i32 0
	%v1 = call double @_Z4fmaxdd(double %s1_0, double %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x double> %p1, i32 1
	%v2 = call double @_Z4fmaxdd(double %s2_0, double %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x double> %p1, i32 2
	%v3 = call double @_Z4fmaxdd(double %s3_0, double %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%s4_1 = extractelement <4 x double> %p1, i32 3
	%v4 = call double @_Z4fmaxdd(double %s4_0, double %s4_1)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z4fminu2v4du2v4d(<4 x double> %p0, <4 x double> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x double> %p1, i32 0
	%v1 = call double @_Z4fmindd(double %s1_0, double %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x double> %p1, i32 1
	%v2 = call double @_Z4fmindd(double %s2_0, double %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x double> %p1, i32 2
	%v3 = call double @_Z4fmindd(double %s3_0, double %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%s4_1 = extractelement <4 x double> %p1, i32 3
	%v4 = call double @_Z4fmindd(double %s4_0, double %s4_1)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z4fmodu2v4du2v4d(<4 x double> %p0, <4 x double> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x double> %p1, i32 0
	%v1 = call double @_Z4fmoddd(double %s1_0, double %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x double> %p1, i32 1
	%v2 = call double @_Z4fmoddd(double %s2_0, double %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x double> %p1, i32 2
	%v3 = call double @_Z4fmoddd(double %s3_0, double %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%s4_1 = extractelement <4 x double> %p1, i32 3
	%v4 = call double @_Z4fmoddd(double %s4_0, double %s4_1)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z5fractu2v4dPu2v4d(<4 x double> %p0, <4 x double>* %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = getelementptr <4 x double>* %p1, i32 0, i32 0
	%v1 = call double @_Z5fractdPd(double %s1_0, double* %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = getelementptr <4 x double>* %p1, i32 0, i32 1
	%v2 = call double @_Z5fractdPd(double %s2_0, double* %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = getelementptr <4 x double>* %p1, i32 0, i32 2
	%v3 = call double @_Z5fractdPd(double %s3_0, double* %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%s4_1 = getelementptr <4 x double>* %p1, i32 0, i32 3
	%v4 = call double @_Z5fractdPd(double %s4_0, double* %s4_1)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z5frexpu2v4dPu2v4i(<4 x double> %p0, <4 x i32>* %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = getelementptr <4 x i32>* %p1, i32 0, i32 0
	%v1 = call double @_Z5frexpdPi(double %s1_0, i32* %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = getelementptr <4 x i32>* %p1, i32 0, i32 1
	%v2 = call double @_Z5frexpdPi(double %s2_0, i32* %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = getelementptr <4 x i32>* %p1, i32 0, i32 2
	%v3 = call double @_Z5frexpdPi(double %s3_0, i32* %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%s4_1 = getelementptr <4 x i32>* %p1, i32 0, i32 3
	%v4 = call double @_Z5frexpdPi(double %s4_0, i32* %s4_1)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z5hypotu2v4du2v4d(<4 x double> %p0, <4 x double> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x double> %p1, i32 0
	%v1 = call double @_Z5hypotdd(double %s1_0, double %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x double> %p1, i32 1
	%v2 = call double @_Z5hypotdd(double %s2_0, double %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x double> %p1, i32 2
	%v3 = call double @_Z5hypotdd(double %s3_0, double %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%s4_1 = extractelement <4 x double> %p1, i32 3
	%v4 = call double @_Z5hypotdd(double %s4_0, double %s4_1)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z5ldexpu2v4du2v4i(<4 x double> %p0, <4 x i32> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x i32> %p1, i32 0
	%v1 = call double @_Z5ldexpdi(double %s1_0, i32 %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x i32> %p1, i32 1
	%v2 = call double @_Z5ldexpdi(double %s2_0, i32 %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x i32> %p1, i32 2
	%v3 = call double @_Z5ldexpdi(double %s3_0, i32 %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%s4_1 = extractelement <4 x i32> %p1, i32 3
	%v4 = call double @_Z5ldexpdi(double %s4_0, i32 %s4_1)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z6lgammau2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z6lgammad(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z6lgammad(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z6lgammad(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z6lgammad(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z8lgamma_ru2v4dPu2v4i(<4 x double> %p0, <4 x i32>* %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = getelementptr <4 x i32>* %p1, i32 0, i32 0
	%v1 = call double @_Z8lgamma_rdPi(double %s1_0, i32* %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = getelementptr <4 x i32>* %p1, i32 0, i32 1
	%v2 = call double @_Z8lgamma_rdPi(double %s2_0, i32* %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = getelementptr <4 x i32>* %p1, i32 0, i32 2
	%v3 = call double @_Z8lgamma_rdPi(double %s3_0, i32* %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%s4_1 = getelementptr <4 x i32>* %p1, i32 0, i32 3
	%v4 = call double @_Z8lgamma_rdPi(double %s4_0, i32* %s4_1)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z4log2u2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z4log2d(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z4log2d(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z4log2d(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z4log2d(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z5log10u2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z5log10d(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z5log10d(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z5log10d(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z5log10d(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z5log1pu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z5log1pd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z5log1pd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z5log1pd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z5log1pd(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z4logbu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z4logbd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z4logbd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z4logbd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z4logbd(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z3madu2v4du2v4du2v4d(<4 x double> %p0, <4 x double> %p1, <4 x double> %p2) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x double> %p1, i32 0
	%s1_2 = extractelement <4 x double> %p2, i32 0
	%v1 = call double @_Z3madddd(double %s1_0, double %s1_1, double %s1_2)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x double> %p1, i32 1
	%s2_2 = extractelement <4 x double> %p2, i32 1
	%v2 = call double @_Z3madddd(double %s2_0, double %s2_1, double %s2_2)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x double> %p1, i32 2
	%s3_2 = extractelement <4 x double> %p2, i32 2
	%v3 = call double @_Z3madddd(double %s3_0, double %s3_1, double %s3_2)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%s4_1 = extractelement <4 x double> %p1, i32 3
	%s4_2 = extractelement <4 x double> %p2, i32 3
	%v4 = call double @_Z3madddd(double %s4_0, double %s4_1, double %s4_2)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z6maxmagu2v4du2v4d(<4 x double> %p0, <4 x double> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x double> %p1, i32 0
	%v1 = call double @_Z6maxmagdd(double %s1_0, double %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x double> %p1, i32 1
	%v2 = call double @_Z6maxmagdd(double %s2_0, double %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x double> %p1, i32 2
	%v3 = call double @_Z6maxmagdd(double %s3_0, double %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%s4_1 = extractelement <4 x double> %p1, i32 3
	%v4 = call double @_Z6maxmagdd(double %s4_0, double %s4_1)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z6minmagu2v4du2v4d(<4 x double> %p0, <4 x double> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x double> %p1, i32 0
	%v1 = call double @_Z6minmagdd(double %s1_0, double %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x double> %p1, i32 1
	%v2 = call double @_Z6minmagdd(double %s2_0, double %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x double> %p1, i32 2
	%v3 = call double @_Z6minmagdd(double %s3_0, double %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%s4_1 = extractelement <4 x double> %p1, i32 3
	%v4 = call double @_Z6minmagdd(double %s4_0, double %s4_1)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z4modfu2v4dPu2v4d(<4 x double> %p0, <4 x double>* %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = getelementptr <4 x double>* %p1, i32 0, i32 0
	%v1 = call double @_Z4modfdPd(double %s1_0, double* %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = getelementptr <4 x double>* %p1, i32 0, i32 1
	%v2 = call double @_Z4modfdPd(double %s2_0, double* %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = getelementptr <4 x double>* %p1, i32 0, i32 2
	%v3 = call double @_Z4modfdPd(double %s3_0, double* %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%s4_1 = getelementptr <4 x double>* %p1, i32 0, i32 3
	%v4 = call double @_Z4modfdPd(double %s4_0, double* %s4_1)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z9nextafteru2v4du2v4d(<4 x double> %p0, <4 x double> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x double> %p1, i32 0
	%v1 = call double @_Z9nextafterdd(double %s1_0, double %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x double> %p1, i32 1
	%v2 = call double @_Z9nextafterdd(double %s2_0, double %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x double> %p1, i32 2
	%v3 = call double @_Z9nextafterdd(double %s3_0, double %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%s4_1 = extractelement <4 x double> %p1, i32 3
	%v4 = call double @_Z9nextafterdd(double %s4_0, double %s4_1)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z4powru2v4du2v4d(<4 x double> %p0, <4 x double> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x double> %p1, i32 0
	%v1 = call double @_Z4powrdd(double %s1_0, double %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x double> %p1, i32 1
	%v2 = call double @_Z4powrdd(double %s2_0, double %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x double> %p1, i32 2
	%v3 = call double @_Z4powrdd(double %s3_0, double %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%s4_1 = extractelement <4 x double> %p1, i32 3
	%v4 = call double @_Z4powrdd(double %s4_0, double %s4_1)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z9remainderu2v4du2v4d(<4 x double> %p0, <4 x double> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x double> %p1, i32 0
	%v1 = call double @_Z9remainderdd(double %s1_0, double %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x double> %p1, i32 1
	%v2 = call double @_Z9remainderdd(double %s2_0, double %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x double> %p1, i32 2
	%v3 = call double @_Z9remainderdd(double %s3_0, double %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%s4_1 = extractelement <4 x double> %p1, i32 3
	%v4 = call double @_Z9remainderdd(double %s4_0, double %s4_1)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z6remquou2v4du2v4dPu2v4i(<4 x double> %p0, <4 x double> %p1, <4 x i32>* %p2) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x double> %p1, i32 0
	%s1_2 = getelementptr <4 x i32>* %p2, i32 0, i32 0
	%v1 = call double @_Z6remquoddPi(double %s1_0, double %s1_1, i32* %s1_2)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x double> %p1, i32 1
	%s2_2 = getelementptr <4 x i32>* %p2, i32 0, i32 1
	%v2 = call double @_Z6remquoddPi(double %s2_0, double %s2_1, i32* %s2_2)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x double> %p1, i32 2
	%s3_2 = getelementptr <4 x i32>* %p2, i32 0, i32 2
	%v3 = call double @_Z6remquoddPi(double %s3_0, double %s3_1, i32* %s3_2)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%s4_1 = extractelement <4 x double> %p1, i32 3
	%s4_2 = getelementptr <4 x i32>* %p2, i32 0, i32 3
	%v4 = call double @_Z6remquoddPi(double %s4_0, double %s4_1, i32* %s4_2)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z4rintu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z4rintd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z4rintd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z4rintd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z4rintd(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z5rootnu2v4du2v4i(<4 x double> %p0, <4 x i32> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x i32> %p1, i32 0
	%v1 = call double @_Z5rootndi(double %s1_0, i32 %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x i32> %p1, i32 1
	%v2 = call double @_Z5rootndi(double %s2_0, i32 %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x i32> %p1, i32 2
	%v3 = call double @_Z5rootndi(double %s3_0, i32 %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%s4_1 = extractelement <4 x i32> %p1, i32 3
	%v4 = call double @_Z5rootndi(double %s4_0, i32 %s4_1)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z5roundu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z5roundd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z5roundd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z5roundd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z5roundd(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z5rsqrtu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z5rsqrtd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z5rsqrtd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z5rsqrtd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z5rsqrtd(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z6sincosu2v4dPu2v4d(<4 x double> %p0, <4 x double>* %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = getelementptr <4 x double>* %p1, i32 0, i32 0
	%v1 = call double @_Z6sincosdPd(double %s1_0, double* %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = getelementptr <4 x double>* %p1, i32 0, i32 1
	%v2 = call double @_Z6sincosdPd(double %s2_0, double* %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = getelementptr <4 x double>* %p1, i32 0, i32 2
	%v3 = call double @_Z6sincosdPd(double %s3_0, double* %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%s4_1 = getelementptr <4 x double>* %p1, i32 0, i32 3
	%v4 = call double @_Z6sincosdPd(double %s4_0, double* %s4_1)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z4sinhu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z4sinhd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z4sinhd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z4sinhd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z4sinhd(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z5sinpiu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z5sinpid(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z5sinpid(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z5sinpid(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z5sinpid(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z3tanu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z3tand(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z3tand(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z3tand(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z3tand(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z4tanhu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z4tanhd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z4tanhd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z4tanhd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z4tanhd(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z5tanpiu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z5tanpid(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z5tanpid(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z5tanpid(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z5tanpid(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z6tgammau2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z6tgammad(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z6tgammad(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z6tgammad(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z6tgammad(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z5truncu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z5truncd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z5truncd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z5truncd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z5truncd(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z8half_cosu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z8half_cosd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z8half_cosd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z8half_cosd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z8half_cosd(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z11half_divideu2v4du2v4d(<4 x double> %p0, <4 x double> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x double> %p1, i32 0
	%v1 = call double @_Z11half_dividedd(double %s1_0, double %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x double> %p1, i32 1
	%v2 = call double @_Z11half_dividedd(double %s2_0, double %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x double> %p1, i32 2
	%v3 = call double @_Z11half_dividedd(double %s3_0, double %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%s4_1 = extractelement <4 x double> %p1, i32 3
	%v4 = call double @_Z11half_dividedd(double %s4_0, double %s4_1)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z8half_expu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z8half_expd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z8half_expd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z8half_expd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z8half_expd(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z9half_exp2u2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z9half_exp2d(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z9half_exp2d(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z9half_exp2d(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z9half_exp2d(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z10half_exp10u2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z10half_exp10d(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z10half_exp10d(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z10half_exp10d(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z10half_exp10d(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z8half_logu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z8half_logd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z8half_logd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z8half_logd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z8half_logd(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z9half_log2u2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z9half_log2d(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z9half_log2d(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z9half_log2d(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z9half_log2d(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z10half_log10u2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z10half_log10d(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z10half_log10d(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z10half_log10d(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z10half_log10d(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z9half_powru2v4du2v4d(<4 x double> %p0, <4 x double> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x double> %p1, i32 0
	%v1 = call double @_Z9half_powrdd(double %s1_0, double %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x double> %p1, i32 1
	%v2 = call double @_Z9half_powrdd(double %s2_0, double %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x double> %p1, i32 2
	%v3 = call double @_Z9half_powrdd(double %s3_0, double %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%s4_1 = extractelement <4 x double> %p1, i32 3
	%v4 = call double @_Z9half_powrdd(double %s4_0, double %s4_1)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z10half_recipu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z10half_recipd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z10half_recipd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z10half_recipd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z10half_recipd(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z10half_rsqrtu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z10half_rsqrtd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z10half_rsqrtd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z10half_rsqrtd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z10half_rsqrtd(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z8half_sinu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z8half_sind(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z8half_sind(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z8half_sind(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z8half_sind(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z9half_sqrtu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z9half_sqrtd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z9half_sqrtd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z9half_sqrtd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z9half_sqrtd(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z8half_tanu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z8half_tand(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z8half_tand(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z8half_tand(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z8half_tand(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z11native_exp2u2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z11native_exp2d(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z11native_exp2d(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z11native_exp2d(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z11native_exp2d(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z12native_exp10u2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z12native_exp10d(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z12native_exp10d(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z12native_exp10d(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z12native_exp10d(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z11native_log2u2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z11native_log2d(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z11native_log2d(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z11native_log2d(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z11native_log2d(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z12native_log10u2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z12native_log10d(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z12native_log10d(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z12native_log10d(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z12native_log10d(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z12native_recipu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z12native_recipd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z12native_recipd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z12native_recipd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z12native_recipd(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z12native_rsqrtu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z12native_rsqrtd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z12native_rsqrtd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z12native_rsqrtd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z12native_rsqrtd(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z11native_sqrtu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z11native_sqrtd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z11native_sqrtd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z11native_sqrtd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z11native_sqrtd(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z10native_sinu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z10native_sind(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z10native_sind(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z10native_sind(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z10native_sind(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z10native_cosu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z10native_cosd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z10native_cosd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z10native_cosd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z10native_cosd(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z10native_expu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z10native_expd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z10native_expd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z10native_expd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z10native_expd(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z10native_logu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z10native_logd(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z10native_logd(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z10native_logd(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z10native_logd(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z10native_tanu2v4d(<4 x double> %p0) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%v1 = call double @_Z10native_tand(double %s1_0)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%v2 = call double @_Z10native_tand(double %s2_0)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%v3 = call double @_Z10native_tand(double %s3_0)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%v4 = call double @_Z10native_tand(double %s4_0)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z13native_divideu2v4du2v4d(<4 x double> %p0, <4 x double> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x double> %p1, i32 0
	%v1 = call double @_Z13native_dividedd(double %s1_0, double %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x double> %p1, i32 1
	%v2 = call double @_Z13native_dividedd(double %s2_0, double %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x double> %p1, i32 2
	%v3 = call double @_Z13native_dividedd(double %s3_0, double %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%s4_1 = extractelement <4 x double> %p1, i32 3
	%v4 = call double @_Z13native_dividedd(double %s4_0, double %s4_1)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z11native_powru2v4du2v4d(<4 x double> %p0, <4 x double> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x double> %p1, i32 0
	%v1 = call double @_Z11native_powrdd(double %s1_0, double %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x double> %p1, i32 1
	%v2 = call double @_Z11native_powrdd(double %s2_0, double %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x double> %p1, i32 2
	%v3 = call double @_Z11native_powrdd(double %s3_0, double %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%s4_1 = extractelement <4 x double> %p1, i32 3
	%v4 = call double @_Z11native_powrdd(double %s4_0, double %s4_1)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <4 x double> @_Z12native_ldexpu2v4du2v4i(<4 x double> %p0, <4 x i32> %p1) nounwind {
	%s1_0 = extractelement <4 x double> %p0, i32 0
	%s1_1 = extractelement <4 x i32> %p1, i32 0
	%v1 = call double @_Z12native_ldexpdi(double %s1_0, i32 %s1_1)
	%r1 = insertelement <4 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <4 x double> %p0, i32 1
	%s2_1 = extractelement <4 x i32> %p1, i32 1
	%v2 = call double @_Z12native_ldexpdi(double %s2_0, i32 %s2_1)
	%r2 = insertelement <4 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <4 x double> %p0, i32 2
	%s3_1 = extractelement <4 x i32> %p1, i32 2
	%v3 = call double @_Z12native_ldexpdi(double %s3_0, i32 %s3_1)
	%r3 = insertelement <4 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <4 x double> %p0, i32 3
	%s4_1 = extractelement <4 x i32> %p1, i32 3
	%v4 = call double @_Z12native_ldexpdi(double %s4_0, i32 %s4_1)
	%r4 = insertelement <4 x double> %r3, double %v4, i32 3
	ret <4 x double> %r4
}
define <8 x float> @_Z4acosu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z4acosf(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z4acosf(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z4acosf(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z4acosf(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z4acosf(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z4acosf(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z4acosf(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z4acosf(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z5acoshu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z5acoshf(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z5acoshf(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z5acoshf(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z5acoshf(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z5acoshf(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z5acoshf(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z5acoshf(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z5acoshf(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z6acospiu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z6acospif(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z6acospif(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z6acospif(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z6acospif(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z6acospif(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z6acospif(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z6acospif(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z6acospif(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z4asinu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z4asinf(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z4asinf(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z4asinf(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z4asinf(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z4asinf(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z4asinf(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z4asinf(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z4asinf(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z5asinhu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z5asinhf(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z5asinhf(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z5asinhf(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z5asinhf(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z5asinhf(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z5asinhf(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z5asinhf(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z5asinhf(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z6asinpiu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z6asinpif(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z6asinpif(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z6asinpif(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z6asinpif(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z6asinpif(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z6asinpif(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z6asinpif(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z6asinpif(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z4atanu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z4atanf(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z4atanf(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z4atanf(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z4atanf(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z4atanf(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z4atanf(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z4atanf(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z4atanf(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z5atan2u2v8fu2v8f(<8 x float> %p0, <8 x float> %p1) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%s1_1 = extractelement <8 x float> %p1, i32 0
	%v1 = call float @_Z5atan2ff(float %s1_0, float %s1_1)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%s2_1 = extractelement <8 x float> %p1, i32 1
	%v2 = call float @_Z5atan2ff(float %s2_0, float %s2_1)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%s3_1 = extractelement <8 x float> %p1, i32 2
	%v3 = call float @_Z5atan2ff(float %s3_0, float %s3_1)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%s4_1 = extractelement <8 x float> %p1, i32 3
	%v4 = call float @_Z5atan2ff(float %s4_0, float %s4_1)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%s5_1 = extractelement <8 x float> %p1, i32 4
	%v5 = call float @_Z5atan2ff(float %s5_0, float %s5_1)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%s6_1 = extractelement <8 x float> %p1, i32 5
	%v6 = call float @_Z5atan2ff(float %s6_0, float %s6_1)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%s7_1 = extractelement <8 x float> %p1, i32 6
	%v7 = call float @_Z5atan2ff(float %s7_0, float %s7_1)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%s8_1 = extractelement <8 x float> %p1, i32 7
	%v8 = call float @_Z5atan2ff(float %s8_0, float %s8_1)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z5atanhu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z5atanhf(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z5atanhf(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z5atanhf(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z5atanhf(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z5atanhf(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z5atanhf(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z5atanhf(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z5atanhf(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z6atanpiu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z6atanpif(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z6atanpif(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z6atanpif(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z6atanpif(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z6atanpif(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z6atanpif(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z6atanpif(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z6atanpif(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z7atan2piu2v8fu2v8f(<8 x float> %p0, <8 x float> %p1) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%s1_1 = extractelement <8 x float> %p1, i32 0
	%v1 = call float @_Z7atan2piff(float %s1_0, float %s1_1)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%s2_1 = extractelement <8 x float> %p1, i32 1
	%v2 = call float @_Z7atan2piff(float %s2_0, float %s2_1)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%s3_1 = extractelement <8 x float> %p1, i32 2
	%v3 = call float @_Z7atan2piff(float %s3_0, float %s3_1)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%s4_1 = extractelement <8 x float> %p1, i32 3
	%v4 = call float @_Z7atan2piff(float %s4_0, float %s4_1)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%s5_1 = extractelement <8 x float> %p1, i32 4
	%v5 = call float @_Z7atan2piff(float %s5_0, float %s5_1)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%s6_1 = extractelement <8 x float> %p1, i32 5
	%v6 = call float @_Z7atan2piff(float %s6_0, float %s6_1)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%s7_1 = extractelement <8 x float> %p1, i32 6
	%v7 = call float @_Z7atan2piff(float %s7_0, float %s7_1)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%s8_1 = extractelement <8 x float> %p1, i32 7
	%v8 = call float @_Z7atan2piff(float %s8_0, float %s8_1)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z4cbrtu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z4cbrtf(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z4cbrtf(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z4cbrtf(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z4cbrtf(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z4cbrtf(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z4cbrtf(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z4cbrtf(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z4cbrtf(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z4ceilu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z4ceilf(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z4ceilf(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z4ceilf(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z4ceilf(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z4ceilf(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z4ceilf(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z4ceilf(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z4ceilf(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z8copysignu2v8fu2v8f(<8 x float> %p0, <8 x float> %p1) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%s1_1 = extractelement <8 x float> %p1, i32 0
	%v1 = call float @_Z8copysignff(float %s1_0, float %s1_1)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%s2_1 = extractelement <8 x float> %p1, i32 1
	%v2 = call float @_Z8copysignff(float %s2_0, float %s2_1)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%s3_1 = extractelement <8 x float> %p1, i32 2
	%v3 = call float @_Z8copysignff(float %s3_0, float %s3_1)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%s4_1 = extractelement <8 x float> %p1, i32 3
	%v4 = call float @_Z8copysignff(float %s4_0, float %s4_1)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%s5_1 = extractelement <8 x float> %p1, i32 4
	%v5 = call float @_Z8copysignff(float %s5_0, float %s5_1)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%s6_1 = extractelement <8 x float> %p1, i32 5
	%v6 = call float @_Z8copysignff(float %s6_0, float %s6_1)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%s7_1 = extractelement <8 x float> %p1, i32 6
	%v7 = call float @_Z8copysignff(float %s7_0, float %s7_1)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%s8_1 = extractelement <8 x float> %p1, i32 7
	%v8 = call float @_Z8copysignff(float %s8_0, float %s8_1)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z4coshu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z4coshf(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z4coshf(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z4coshf(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z4coshf(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z4coshf(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z4coshf(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z4coshf(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z4coshf(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z5cospiu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z5cospif(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z5cospif(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z5cospif(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z5cospif(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z5cospif(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z5cospif(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z5cospif(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z5cospif(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z4erfcu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z4erfcf(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z4erfcf(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z4erfcf(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z4erfcf(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z4erfcf(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z4erfcf(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z4erfcf(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z4erfcf(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z3erfu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z3erff(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z3erff(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z3erff(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z3erff(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z3erff(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z3erff(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z3erff(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z3erff(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z4exp2u2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z4exp2f(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z4exp2f(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z4exp2f(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z4exp2f(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z4exp2f(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z4exp2f(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z4exp2f(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z4exp2f(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z5exp10u2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z5exp10f(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z5exp10f(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z5exp10f(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z5exp10f(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z5exp10f(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z5exp10f(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z5exp10f(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z5exp10f(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z5expm1u2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z5expm1f(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z5expm1f(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z5expm1f(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z5expm1f(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z5expm1f(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z5expm1f(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z5expm1f(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z5expm1f(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z4fdimu2v8fu2v8f(<8 x float> %p0, <8 x float> %p1) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%s1_1 = extractelement <8 x float> %p1, i32 0
	%v1 = call float @_Z4fdimff(float %s1_0, float %s1_1)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%s2_1 = extractelement <8 x float> %p1, i32 1
	%v2 = call float @_Z4fdimff(float %s2_0, float %s2_1)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%s3_1 = extractelement <8 x float> %p1, i32 2
	%v3 = call float @_Z4fdimff(float %s3_0, float %s3_1)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%s4_1 = extractelement <8 x float> %p1, i32 3
	%v4 = call float @_Z4fdimff(float %s4_0, float %s4_1)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%s5_1 = extractelement <8 x float> %p1, i32 4
	%v5 = call float @_Z4fdimff(float %s5_0, float %s5_1)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%s6_1 = extractelement <8 x float> %p1, i32 5
	%v6 = call float @_Z4fdimff(float %s6_0, float %s6_1)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%s7_1 = extractelement <8 x float> %p1, i32 6
	%v7 = call float @_Z4fdimff(float %s7_0, float %s7_1)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%s8_1 = extractelement <8 x float> %p1, i32 7
	%v8 = call float @_Z4fdimff(float %s8_0, float %s8_1)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z4fmaxu2v8fu2v8f(<8 x float> %p0, <8 x float> %p1) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%s1_1 = extractelement <8 x float> %p1, i32 0
	%v1 = call float @_Z4fmaxff(float %s1_0, float %s1_1)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%s2_1 = extractelement <8 x float> %p1, i32 1
	%v2 = call float @_Z4fmaxff(float %s2_0, float %s2_1)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%s3_1 = extractelement <8 x float> %p1, i32 2
	%v3 = call float @_Z4fmaxff(float %s3_0, float %s3_1)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%s4_1 = extractelement <8 x float> %p1, i32 3
	%v4 = call float @_Z4fmaxff(float %s4_0, float %s4_1)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%s5_1 = extractelement <8 x float> %p1, i32 4
	%v5 = call float @_Z4fmaxff(float %s5_0, float %s5_1)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%s6_1 = extractelement <8 x float> %p1, i32 5
	%v6 = call float @_Z4fmaxff(float %s6_0, float %s6_1)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%s7_1 = extractelement <8 x float> %p1, i32 6
	%v7 = call float @_Z4fmaxff(float %s7_0, float %s7_1)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%s8_1 = extractelement <8 x float> %p1, i32 7
	%v8 = call float @_Z4fmaxff(float %s8_0, float %s8_1)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z4fminu2v8fu2v8f(<8 x float> %p0, <8 x float> %p1) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%s1_1 = extractelement <8 x float> %p1, i32 0
	%v1 = call float @_Z4fminff(float %s1_0, float %s1_1)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%s2_1 = extractelement <8 x float> %p1, i32 1
	%v2 = call float @_Z4fminff(float %s2_0, float %s2_1)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%s3_1 = extractelement <8 x float> %p1, i32 2
	%v3 = call float @_Z4fminff(float %s3_0, float %s3_1)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%s4_1 = extractelement <8 x float> %p1, i32 3
	%v4 = call float @_Z4fminff(float %s4_0, float %s4_1)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%s5_1 = extractelement <8 x float> %p1, i32 4
	%v5 = call float @_Z4fminff(float %s5_0, float %s5_1)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%s6_1 = extractelement <8 x float> %p1, i32 5
	%v6 = call float @_Z4fminff(float %s6_0, float %s6_1)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%s7_1 = extractelement <8 x float> %p1, i32 6
	%v7 = call float @_Z4fminff(float %s7_0, float %s7_1)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%s8_1 = extractelement <8 x float> %p1, i32 7
	%v8 = call float @_Z4fminff(float %s8_0, float %s8_1)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z4fmodu2v8fu2v8f(<8 x float> %p0, <8 x float> %p1) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%s1_1 = extractelement <8 x float> %p1, i32 0
	%v1 = call float @_Z4fmodff(float %s1_0, float %s1_1)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%s2_1 = extractelement <8 x float> %p1, i32 1
	%v2 = call float @_Z4fmodff(float %s2_0, float %s2_1)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%s3_1 = extractelement <8 x float> %p1, i32 2
	%v3 = call float @_Z4fmodff(float %s3_0, float %s3_1)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%s4_1 = extractelement <8 x float> %p1, i32 3
	%v4 = call float @_Z4fmodff(float %s4_0, float %s4_1)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%s5_1 = extractelement <8 x float> %p1, i32 4
	%v5 = call float @_Z4fmodff(float %s5_0, float %s5_1)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%s6_1 = extractelement <8 x float> %p1, i32 5
	%v6 = call float @_Z4fmodff(float %s6_0, float %s6_1)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%s7_1 = extractelement <8 x float> %p1, i32 6
	%v7 = call float @_Z4fmodff(float %s7_0, float %s7_1)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%s8_1 = extractelement <8 x float> %p1, i32 7
	%v8 = call float @_Z4fmodff(float %s8_0, float %s8_1)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z5fractu2v8fPu2v8f(<8 x float> %p0, <8 x float>* %p1) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%s1_1 = getelementptr <8 x float>* %p1, i32 0, i32 0
	%v1 = call float @_Z5fractfPf(float %s1_0, float* %s1_1)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%s2_1 = getelementptr <8 x float>* %p1, i32 0, i32 1
	%v2 = call float @_Z5fractfPf(float %s2_0, float* %s2_1)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%s3_1 = getelementptr <8 x float>* %p1, i32 0, i32 2
	%v3 = call float @_Z5fractfPf(float %s3_0, float* %s3_1)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%s4_1 = getelementptr <8 x float>* %p1, i32 0, i32 3
	%v4 = call float @_Z5fractfPf(float %s4_0, float* %s4_1)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%s5_1 = getelementptr <8 x float>* %p1, i32 0, i32 4
	%v5 = call float @_Z5fractfPf(float %s5_0, float* %s5_1)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%s6_1 = getelementptr <8 x float>* %p1, i32 0, i32 5
	%v6 = call float @_Z5fractfPf(float %s6_0, float* %s6_1)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%s7_1 = getelementptr <8 x float>* %p1, i32 0, i32 6
	%v7 = call float @_Z5fractfPf(float %s7_0, float* %s7_1)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%s8_1 = getelementptr <8 x float>* %p1, i32 0, i32 7
	%v8 = call float @_Z5fractfPf(float %s8_0, float* %s8_1)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z5frexpu2v8fPu2v8i(<8 x float> %p0, <8 x i32>* %p1) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%s1_1 = getelementptr <8 x i32>* %p1, i32 0, i32 0
	%v1 = call float @_Z5frexpfPi(float %s1_0, i32* %s1_1)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%s2_1 = getelementptr <8 x i32>* %p1, i32 0, i32 1
	%v2 = call float @_Z5frexpfPi(float %s2_0, i32* %s2_1)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%s3_1 = getelementptr <8 x i32>* %p1, i32 0, i32 2
	%v3 = call float @_Z5frexpfPi(float %s3_0, i32* %s3_1)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%s4_1 = getelementptr <8 x i32>* %p1, i32 0, i32 3
	%v4 = call float @_Z5frexpfPi(float %s4_0, i32* %s4_1)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%s5_1 = getelementptr <8 x i32>* %p1, i32 0, i32 4
	%v5 = call float @_Z5frexpfPi(float %s5_0, i32* %s5_1)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%s6_1 = getelementptr <8 x i32>* %p1, i32 0, i32 5
	%v6 = call float @_Z5frexpfPi(float %s6_0, i32* %s6_1)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%s7_1 = getelementptr <8 x i32>* %p1, i32 0, i32 6
	%v7 = call float @_Z5frexpfPi(float %s7_0, i32* %s7_1)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%s8_1 = getelementptr <8 x i32>* %p1, i32 0, i32 7
	%v8 = call float @_Z5frexpfPi(float %s8_0, i32* %s8_1)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z5hypotu2v8fu2v8f(<8 x float> %p0, <8 x float> %p1) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%s1_1 = extractelement <8 x float> %p1, i32 0
	%v1 = call float @_Z5hypotff(float %s1_0, float %s1_1)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%s2_1 = extractelement <8 x float> %p1, i32 1
	%v2 = call float @_Z5hypotff(float %s2_0, float %s2_1)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%s3_1 = extractelement <8 x float> %p1, i32 2
	%v3 = call float @_Z5hypotff(float %s3_0, float %s3_1)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%s4_1 = extractelement <8 x float> %p1, i32 3
	%v4 = call float @_Z5hypotff(float %s4_0, float %s4_1)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%s5_1 = extractelement <8 x float> %p1, i32 4
	%v5 = call float @_Z5hypotff(float %s5_0, float %s5_1)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%s6_1 = extractelement <8 x float> %p1, i32 5
	%v6 = call float @_Z5hypotff(float %s6_0, float %s6_1)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%s7_1 = extractelement <8 x float> %p1, i32 6
	%v7 = call float @_Z5hypotff(float %s7_0, float %s7_1)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%s8_1 = extractelement <8 x float> %p1, i32 7
	%v8 = call float @_Z5hypotff(float %s8_0, float %s8_1)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z5ldexpu2v8fu2v8i(<8 x float> %p0, <8 x i32> %p1) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%s1_1 = extractelement <8 x i32> %p1, i32 0
	%v1 = call float @_Z5ldexpfi(float %s1_0, i32 %s1_1)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%s2_1 = extractelement <8 x i32> %p1, i32 1
	%v2 = call float @_Z5ldexpfi(float %s2_0, i32 %s2_1)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%s3_1 = extractelement <8 x i32> %p1, i32 2
	%v3 = call float @_Z5ldexpfi(float %s3_0, i32 %s3_1)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%s4_1 = extractelement <8 x i32> %p1, i32 3
	%v4 = call float @_Z5ldexpfi(float %s4_0, i32 %s4_1)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%s5_1 = extractelement <8 x i32> %p1, i32 4
	%v5 = call float @_Z5ldexpfi(float %s5_0, i32 %s5_1)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%s6_1 = extractelement <8 x i32> %p1, i32 5
	%v6 = call float @_Z5ldexpfi(float %s6_0, i32 %s6_1)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%s7_1 = extractelement <8 x i32> %p1, i32 6
	%v7 = call float @_Z5ldexpfi(float %s7_0, i32 %s7_1)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%s8_1 = extractelement <8 x i32> %p1, i32 7
	%v8 = call float @_Z5ldexpfi(float %s8_0, i32 %s8_1)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z6lgammau2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z6lgammaf(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z6lgammaf(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z6lgammaf(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z6lgammaf(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z6lgammaf(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z6lgammaf(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z6lgammaf(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z6lgammaf(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z8lgamma_ru2v8fPu2v8i(<8 x float> %p0, <8 x i32>* %p1) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%s1_1 = getelementptr <8 x i32>* %p1, i32 0, i32 0
	%v1 = call float @_Z8lgamma_rfPi(float %s1_0, i32* %s1_1)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%s2_1 = getelementptr <8 x i32>* %p1, i32 0, i32 1
	%v2 = call float @_Z8lgamma_rfPi(float %s2_0, i32* %s2_1)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%s3_1 = getelementptr <8 x i32>* %p1, i32 0, i32 2
	%v3 = call float @_Z8lgamma_rfPi(float %s3_0, i32* %s3_1)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%s4_1 = getelementptr <8 x i32>* %p1, i32 0, i32 3
	%v4 = call float @_Z8lgamma_rfPi(float %s4_0, i32* %s4_1)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%s5_1 = getelementptr <8 x i32>* %p1, i32 0, i32 4
	%v5 = call float @_Z8lgamma_rfPi(float %s5_0, i32* %s5_1)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%s6_1 = getelementptr <8 x i32>* %p1, i32 0, i32 5
	%v6 = call float @_Z8lgamma_rfPi(float %s6_0, i32* %s6_1)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%s7_1 = getelementptr <8 x i32>* %p1, i32 0, i32 6
	%v7 = call float @_Z8lgamma_rfPi(float %s7_0, i32* %s7_1)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%s8_1 = getelementptr <8 x i32>* %p1, i32 0, i32 7
	%v8 = call float @_Z8lgamma_rfPi(float %s8_0, i32* %s8_1)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z4log2u2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z4log2f(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z4log2f(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z4log2f(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z4log2f(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z4log2f(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z4log2f(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z4log2f(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z4log2f(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z5log10u2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z5log10f(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z5log10f(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z5log10f(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z5log10f(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z5log10f(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z5log10f(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z5log10f(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z5log10f(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z5log1pu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z5log1pf(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z5log1pf(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z5log1pf(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z5log1pf(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z5log1pf(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z5log1pf(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z5log1pf(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z5log1pf(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z4logbu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z4logbf(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z4logbf(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z4logbf(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z4logbf(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z4logbf(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z4logbf(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z4logbf(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z4logbf(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z3madu2v8fu2v8fu2v8f(<8 x float> %p0, <8 x float> %p1, <8 x float> %p2) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%s1_1 = extractelement <8 x float> %p1, i32 0
	%s1_2 = extractelement <8 x float> %p2, i32 0
	%v1 = call float @_Z3madfff(float %s1_0, float %s1_1, float %s1_2)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%s2_1 = extractelement <8 x float> %p1, i32 1
	%s2_2 = extractelement <8 x float> %p2, i32 1
	%v2 = call float @_Z3madfff(float %s2_0, float %s2_1, float %s2_2)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%s3_1 = extractelement <8 x float> %p1, i32 2
	%s3_2 = extractelement <8 x float> %p2, i32 2
	%v3 = call float @_Z3madfff(float %s3_0, float %s3_1, float %s3_2)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%s4_1 = extractelement <8 x float> %p1, i32 3
	%s4_2 = extractelement <8 x float> %p2, i32 3
	%v4 = call float @_Z3madfff(float %s4_0, float %s4_1, float %s4_2)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%s5_1 = extractelement <8 x float> %p1, i32 4
	%s5_2 = extractelement <8 x float> %p2, i32 4
	%v5 = call float @_Z3madfff(float %s5_0, float %s5_1, float %s5_2)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%s6_1 = extractelement <8 x float> %p1, i32 5
	%s6_2 = extractelement <8 x float> %p2, i32 5
	%v6 = call float @_Z3madfff(float %s6_0, float %s6_1, float %s6_2)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%s7_1 = extractelement <8 x float> %p1, i32 6
	%s7_2 = extractelement <8 x float> %p2, i32 6
	%v7 = call float @_Z3madfff(float %s7_0, float %s7_1, float %s7_2)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%s8_1 = extractelement <8 x float> %p1, i32 7
	%s8_2 = extractelement <8 x float> %p2, i32 7
	%v8 = call float @_Z3madfff(float %s8_0, float %s8_1, float %s8_2)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z6maxmagu2v8fu2v8f(<8 x float> %p0, <8 x float> %p1) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%s1_1 = extractelement <8 x float> %p1, i32 0
	%v1 = call float @_Z6maxmagff(float %s1_0, float %s1_1)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%s2_1 = extractelement <8 x float> %p1, i32 1
	%v2 = call float @_Z6maxmagff(float %s2_0, float %s2_1)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%s3_1 = extractelement <8 x float> %p1, i32 2
	%v3 = call float @_Z6maxmagff(float %s3_0, float %s3_1)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%s4_1 = extractelement <8 x float> %p1, i32 3
	%v4 = call float @_Z6maxmagff(float %s4_0, float %s4_1)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%s5_1 = extractelement <8 x float> %p1, i32 4
	%v5 = call float @_Z6maxmagff(float %s5_0, float %s5_1)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%s6_1 = extractelement <8 x float> %p1, i32 5
	%v6 = call float @_Z6maxmagff(float %s6_0, float %s6_1)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%s7_1 = extractelement <8 x float> %p1, i32 6
	%v7 = call float @_Z6maxmagff(float %s7_0, float %s7_1)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%s8_1 = extractelement <8 x float> %p1, i32 7
	%v8 = call float @_Z6maxmagff(float %s8_0, float %s8_1)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z6minmagu2v8fu2v8f(<8 x float> %p0, <8 x float> %p1) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%s1_1 = extractelement <8 x float> %p1, i32 0
	%v1 = call float @_Z6minmagff(float %s1_0, float %s1_1)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%s2_1 = extractelement <8 x float> %p1, i32 1
	%v2 = call float @_Z6minmagff(float %s2_0, float %s2_1)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%s3_1 = extractelement <8 x float> %p1, i32 2
	%v3 = call float @_Z6minmagff(float %s3_0, float %s3_1)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%s4_1 = extractelement <8 x float> %p1, i32 3
	%v4 = call float @_Z6minmagff(float %s4_0, float %s4_1)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%s5_1 = extractelement <8 x float> %p1, i32 4
	%v5 = call float @_Z6minmagff(float %s5_0, float %s5_1)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%s6_1 = extractelement <8 x float> %p1, i32 5
	%v6 = call float @_Z6minmagff(float %s6_0, float %s6_1)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%s7_1 = extractelement <8 x float> %p1, i32 6
	%v7 = call float @_Z6minmagff(float %s7_0, float %s7_1)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%s8_1 = extractelement <8 x float> %p1, i32 7
	%v8 = call float @_Z6minmagff(float %s8_0, float %s8_1)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z4modfu2v8fPu2v8f(<8 x float> %p0, <8 x float>* %p1) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%s1_1 = getelementptr <8 x float>* %p1, i32 0, i32 0
	%v1 = call float @_Z4modffPf(float %s1_0, float* %s1_1)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%s2_1 = getelementptr <8 x float>* %p1, i32 0, i32 1
	%v2 = call float @_Z4modffPf(float %s2_0, float* %s2_1)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%s3_1 = getelementptr <8 x float>* %p1, i32 0, i32 2
	%v3 = call float @_Z4modffPf(float %s3_0, float* %s3_1)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%s4_1 = getelementptr <8 x float>* %p1, i32 0, i32 3
	%v4 = call float @_Z4modffPf(float %s4_0, float* %s4_1)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%s5_1 = getelementptr <8 x float>* %p1, i32 0, i32 4
	%v5 = call float @_Z4modffPf(float %s5_0, float* %s5_1)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%s6_1 = getelementptr <8 x float>* %p1, i32 0, i32 5
	%v6 = call float @_Z4modffPf(float %s6_0, float* %s6_1)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%s7_1 = getelementptr <8 x float>* %p1, i32 0, i32 6
	%v7 = call float @_Z4modffPf(float %s7_0, float* %s7_1)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%s8_1 = getelementptr <8 x float>* %p1, i32 0, i32 7
	%v8 = call float @_Z4modffPf(float %s8_0, float* %s8_1)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z9nextafteru2v8fu2v8f(<8 x float> %p0, <8 x float> %p1) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%s1_1 = extractelement <8 x float> %p1, i32 0
	%v1 = call float @_Z9nextafterff(float %s1_0, float %s1_1)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%s2_1 = extractelement <8 x float> %p1, i32 1
	%v2 = call float @_Z9nextafterff(float %s2_0, float %s2_1)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%s3_1 = extractelement <8 x float> %p1, i32 2
	%v3 = call float @_Z9nextafterff(float %s3_0, float %s3_1)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%s4_1 = extractelement <8 x float> %p1, i32 3
	%v4 = call float @_Z9nextafterff(float %s4_0, float %s4_1)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%s5_1 = extractelement <8 x float> %p1, i32 4
	%v5 = call float @_Z9nextafterff(float %s5_0, float %s5_1)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%s6_1 = extractelement <8 x float> %p1, i32 5
	%v6 = call float @_Z9nextafterff(float %s6_0, float %s6_1)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%s7_1 = extractelement <8 x float> %p1, i32 6
	%v7 = call float @_Z9nextafterff(float %s7_0, float %s7_1)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%s8_1 = extractelement <8 x float> %p1, i32 7
	%v8 = call float @_Z9nextafterff(float %s8_0, float %s8_1)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z4powru2v8fu2v8f(<8 x float> %p0, <8 x float> %p1) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%s1_1 = extractelement <8 x float> %p1, i32 0
	%v1 = call float @_Z4powrff(float %s1_0, float %s1_1)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%s2_1 = extractelement <8 x float> %p1, i32 1
	%v2 = call float @_Z4powrff(float %s2_0, float %s2_1)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%s3_1 = extractelement <8 x float> %p1, i32 2
	%v3 = call float @_Z4powrff(float %s3_0, float %s3_1)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%s4_1 = extractelement <8 x float> %p1, i32 3
	%v4 = call float @_Z4powrff(float %s4_0, float %s4_1)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%s5_1 = extractelement <8 x float> %p1, i32 4
	%v5 = call float @_Z4powrff(float %s5_0, float %s5_1)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%s6_1 = extractelement <8 x float> %p1, i32 5
	%v6 = call float @_Z4powrff(float %s6_0, float %s6_1)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%s7_1 = extractelement <8 x float> %p1, i32 6
	%v7 = call float @_Z4powrff(float %s7_0, float %s7_1)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%s8_1 = extractelement <8 x float> %p1, i32 7
	%v8 = call float @_Z4powrff(float %s8_0, float %s8_1)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z9remainderu2v8fu2v8f(<8 x float> %p0, <8 x float> %p1) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%s1_1 = extractelement <8 x float> %p1, i32 0
	%v1 = call float @_Z9remainderff(float %s1_0, float %s1_1)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%s2_1 = extractelement <8 x float> %p1, i32 1
	%v2 = call float @_Z9remainderff(float %s2_0, float %s2_1)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%s3_1 = extractelement <8 x float> %p1, i32 2
	%v3 = call float @_Z9remainderff(float %s3_0, float %s3_1)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%s4_1 = extractelement <8 x float> %p1, i32 3
	%v4 = call float @_Z9remainderff(float %s4_0, float %s4_1)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%s5_1 = extractelement <8 x float> %p1, i32 4
	%v5 = call float @_Z9remainderff(float %s5_0, float %s5_1)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%s6_1 = extractelement <8 x float> %p1, i32 5
	%v6 = call float @_Z9remainderff(float %s6_0, float %s6_1)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%s7_1 = extractelement <8 x float> %p1, i32 6
	%v7 = call float @_Z9remainderff(float %s7_0, float %s7_1)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%s8_1 = extractelement <8 x float> %p1, i32 7
	%v8 = call float @_Z9remainderff(float %s8_0, float %s8_1)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z6remquou2v8fu2v8fPu2v8i(<8 x float> %p0, <8 x float> %p1, <8 x i32>* %p2) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%s1_1 = extractelement <8 x float> %p1, i32 0
	%s1_2 = getelementptr <8 x i32>* %p2, i32 0, i32 0
	%v1 = call float @_Z6remquoffPi(float %s1_0, float %s1_1, i32* %s1_2)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%s2_1 = extractelement <8 x float> %p1, i32 1
	%s2_2 = getelementptr <8 x i32>* %p2, i32 0, i32 1
	%v2 = call float @_Z6remquoffPi(float %s2_0, float %s2_1, i32* %s2_2)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%s3_1 = extractelement <8 x float> %p1, i32 2
	%s3_2 = getelementptr <8 x i32>* %p2, i32 0, i32 2
	%v3 = call float @_Z6remquoffPi(float %s3_0, float %s3_1, i32* %s3_2)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%s4_1 = extractelement <8 x float> %p1, i32 3
	%s4_2 = getelementptr <8 x i32>* %p2, i32 0, i32 3
	%v4 = call float @_Z6remquoffPi(float %s4_0, float %s4_1, i32* %s4_2)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%s5_1 = extractelement <8 x float> %p1, i32 4
	%s5_2 = getelementptr <8 x i32>* %p2, i32 0, i32 4
	%v5 = call float @_Z6remquoffPi(float %s5_0, float %s5_1, i32* %s5_2)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%s6_1 = extractelement <8 x float> %p1, i32 5
	%s6_2 = getelementptr <8 x i32>* %p2, i32 0, i32 5
	%v6 = call float @_Z6remquoffPi(float %s6_0, float %s6_1, i32* %s6_2)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%s7_1 = extractelement <8 x float> %p1, i32 6
	%s7_2 = getelementptr <8 x i32>* %p2, i32 0, i32 6
	%v7 = call float @_Z6remquoffPi(float %s7_0, float %s7_1, i32* %s7_2)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%s8_1 = extractelement <8 x float> %p1, i32 7
	%s8_2 = getelementptr <8 x i32>* %p2, i32 0, i32 7
	%v8 = call float @_Z6remquoffPi(float %s8_0, float %s8_1, i32* %s8_2)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z4rintu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z4rintf(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z4rintf(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z4rintf(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z4rintf(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z4rintf(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z4rintf(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z4rintf(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z4rintf(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z5rootnu2v8fu2v8i(<8 x float> %p0, <8 x i32> %p1) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%s1_1 = extractelement <8 x i32> %p1, i32 0
	%v1 = call float @_Z5rootnfi(float %s1_0, i32 %s1_1)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%s2_1 = extractelement <8 x i32> %p1, i32 1
	%v2 = call float @_Z5rootnfi(float %s2_0, i32 %s2_1)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%s3_1 = extractelement <8 x i32> %p1, i32 2
	%v3 = call float @_Z5rootnfi(float %s3_0, i32 %s3_1)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%s4_1 = extractelement <8 x i32> %p1, i32 3
	%v4 = call float @_Z5rootnfi(float %s4_0, i32 %s4_1)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%s5_1 = extractelement <8 x i32> %p1, i32 4
	%v5 = call float @_Z5rootnfi(float %s5_0, i32 %s5_1)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%s6_1 = extractelement <8 x i32> %p1, i32 5
	%v6 = call float @_Z5rootnfi(float %s6_0, i32 %s6_1)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%s7_1 = extractelement <8 x i32> %p1, i32 6
	%v7 = call float @_Z5rootnfi(float %s7_0, i32 %s7_1)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%s8_1 = extractelement <8 x i32> %p1, i32 7
	%v8 = call float @_Z5rootnfi(float %s8_0, i32 %s8_1)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z5roundu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z5roundf(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z5roundf(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z5roundf(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z5roundf(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z5roundf(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z5roundf(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z5roundf(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z5roundf(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z5rsqrtu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z5rsqrtf(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z5rsqrtf(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z5rsqrtf(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z5rsqrtf(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z5rsqrtf(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z5rsqrtf(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z5rsqrtf(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z5rsqrtf(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z6sincosu2v8fPu2v8f(<8 x float> %p0, <8 x float>* %p1) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%s1_1 = getelementptr <8 x float>* %p1, i32 0, i32 0
	%v1 = call float @_Z6sincosfPf(float %s1_0, float* %s1_1)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%s2_1 = getelementptr <8 x float>* %p1, i32 0, i32 1
	%v2 = call float @_Z6sincosfPf(float %s2_0, float* %s2_1)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%s3_1 = getelementptr <8 x float>* %p1, i32 0, i32 2
	%v3 = call float @_Z6sincosfPf(float %s3_0, float* %s3_1)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%s4_1 = getelementptr <8 x float>* %p1, i32 0, i32 3
	%v4 = call float @_Z6sincosfPf(float %s4_0, float* %s4_1)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%s5_1 = getelementptr <8 x float>* %p1, i32 0, i32 4
	%v5 = call float @_Z6sincosfPf(float %s5_0, float* %s5_1)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%s6_1 = getelementptr <8 x float>* %p1, i32 0, i32 5
	%v6 = call float @_Z6sincosfPf(float %s6_0, float* %s6_1)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%s7_1 = getelementptr <8 x float>* %p1, i32 0, i32 6
	%v7 = call float @_Z6sincosfPf(float %s7_0, float* %s7_1)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%s8_1 = getelementptr <8 x float>* %p1, i32 0, i32 7
	%v8 = call float @_Z6sincosfPf(float %s8_0, float* %s8_1)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z4sinhu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z4sinhf(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z4sinhf(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z4sinhf(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z4sinhf(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z4sinhf(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z4sinhf(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z4sinhf(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z4sinhf(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z5sinpiu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z5sinpif(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z5sinpif(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z5sinpif(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z5sinpif(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z5sinpif(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z5sinpif(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z5sinpif(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z5sinpif(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z3tanu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z3tanf(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z3tanf(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z3tanf(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z3tanf(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z3tanf(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z3tanf(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z3tanf(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z3tanf(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z4tanhu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z4tanhf(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z4tanhf(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z4tanhf(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z4tanhf(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z4tanhf(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z4tanhf(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z4tanhf(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z4tanhf(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z5tanpiu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z5tanpif(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z5tanpif(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z5tanpif(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z5tanpif(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z5tanpif(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z5tanpif(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z5tanpif(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z5tanpif(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z6tgammau2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z6tgammaf(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z6tgammaf(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z6tgammaf(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z6tgammaf(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z6tgammaf(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z6tgammaf(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z6tgammaf(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z6tgammaf(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z5truncu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z5truncf(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z5truncf(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z5truncf(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z5truncf(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z5truncf(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z5truncf(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z5truncf(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z5truncf(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z8half_cosu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z8half_cosf(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z8half_cosf(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z8half_cosf(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z8half_cosf(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z8half_cosf(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z8half_cosf(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z8half_cosf(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z8half_cosf(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z11half_divideu2v8fu2v8f(<8 x float> %p0, <8 x float> %p1) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%s1_1 = extractelement <8 x float> %p1, i32 0
	%v1 = call float @_Z11half_divideff(float %s1_0, float %s1_1)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%s2_1 = extractelement <8 x float> %p1, i32 1
	%v2 = call float @_Z11half_divideff(float %s2_0, float %s2_1)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%s3_1 = extractelement <8 x float> %p1, i32 2
	%v3 = call float @_Z11half_divideff(float %s3_0, float %s3_1)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%s4_1 = extractelement <8 x float> %p1, i32 3
	%v4 = call float @_Z11half_divideff(float %s4_0, float %s4_1)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%s5_1 = extractelement <8 x float> %p1, i32 4
	%v5 = call float @_Z11half_divideff(float %s5_0, float %s5_1)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%s6_1 = extractelement <8 x float> %p1, i32 5
	%v6 = call float @_Z11half_divideff(float %s6_0, float %s6_1)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%s7_1 = extractelement <8 x float> %p1, i32 6
	%v7 = call float @_Z11half_divideff(float %s7_0, float %s7_1)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%s8_1 = extractelement <8 x float> %p1, i32 7
	%v8 = call float @_Z11half_divideff(float %s8_0, float %s8_1)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z8half_expu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z8half_expf(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z8half_expf(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z8half_expf(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z8half_expf(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z8half_expf(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z8half_expf(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z8half_expf(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z8half_expf(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z9half_exp2u2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z9half_exp2f(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z9half_exp2f(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z9half_exp2f(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z9half_exp2f(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z9half_exp2f(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z9half_exp2f(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z9half_exp2f(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z9half_exp2f(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z10half_exp10u2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z10half_exp10f(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z10half_exp10f(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z10half_exp10f(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z10half_exp10f(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z10half_exp10f(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z10half_exp10f(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z10half_exp10f(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z10half_exp10f(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z8half_logu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z8half_logf(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z8half_logf(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z8half_logf(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z8half_logf(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z8half_logf(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z8half_logf(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z8half_logf(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z8half_logf(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z9half_log2u2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z9half_log2f(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z9half_log2f(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z9half_log2f(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z9half_log2f(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z9half_log2f(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z9half_log2f(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z9half_log2f(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z9half_log2f(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z10half_log10u2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z10half_log10f(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z10half_log10f(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z10half_log10f(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z10half_log10f(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z10half_log10f(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z10half_log10f(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z10half_log10f(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z10half_log10f(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z9half_powru2v8fu2v8f(<8 x float> %p0, <8 x float> %p1) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%s1_1 = extractelement <8 x float> %p1, i32 0
	%v1 = call float @_Z9half_powrff(float %s1_0, float %s1_1)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%s2_1 = extractelement <8 x float> %p1, i32 1
	%v2 = call float @_Z9half_powrff(float %s2_0, float %s2_1)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%s3_1 = extractelement <8 x float> %p1, i32 2
	%v3 = call float @_Z9half_powrff(float %s3_0, float %s3_1)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%s4_1 = extractelement <8 x float> %p1, i32 3
	%v4 = call float @_Z9half_powrff(float %s4_0, float %s4_1)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%s5_1 = extractelement <8 x float> %p1, i32 4
	%v5 = call float @_Z9half_powrff(float %s5_0, float %s5_1)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%s6_1 = extractelement <8 x float> %p1, i32 5
	%v6 = call float @_Z9half_powrff(float %s6_0, float %s6_1)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%s7_1 = extractelement <8 x float> %p1, i32 6
	%v7 = call float @_Z9half_powrff(float %s7_0, float %s7_1)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%s8_1 = extractelement <8 x float> %p1, i32 7
	%v8 = call float @_Z9half_powrff(float %s8_0, float %s8_1)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z10half_recipu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z10half_recipf(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z10half_recipf(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z10half_recipf(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z10half_recipf(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z10half_recipf(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z10half_recipf(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z10half_recipf(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z10half_recipf(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z10half_rsqrtu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z10half_rsqrtf(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z10half_rsqrtf(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z10half_rsqrtf(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z10half_rsqrtf(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z10half_rsqrtf(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z10half_rsqrtf(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z10half_rsqrtf(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z10half_rsqrtf(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z8half_sinu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z8half_sinf(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z8half_sinf(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z8half_sinf(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z8half_sinf(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z8half_sinf(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z8half_sinf(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z8half_sinf(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z8half_sinf(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z9half_sqrtu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z9half_sqrtf(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z9half_sqrtf(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z9half_sqrtf(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z9half_sqrtf(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z9half_sqrtf(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z9half_sqrtf(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z9half_sqrtf(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z9half_sqrtf(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z8half_tanu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z8half_tanf(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z8half_tanf(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z8half_tanf(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z8half_tanf(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z8half_tanf(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z8half_tanf(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z8half_tanf(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z8half_tanf(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z11native_exp2u2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z11native_exp2f(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z11native_exp2f(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z11native_exp2f(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z11native_exp2f(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z11native_exp2f(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z11native_exp2f(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z11native_exp2f(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z11native_exp2f(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z12native_exp10u2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z12native_exp10f(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z12native_exp10f(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z12native_exp10f(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z12native_exp10f(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z12native_exp10f(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z12native_exp10f(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z12native_exp10f(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z12native_exp10f(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z11native_log2u2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z11native_log2f(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z11native_log2f(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z11native_log2f(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z11native_log2f(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z11native_log2f(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z11native_log2f(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z11native_log2f(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z11native_log2f(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z12native_log10u2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z12native_log10f(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z12native_log10f(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z12native_log10f(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z12native_log10f(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z12native_log10f(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z12native_log10f(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z12native_log10f(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z12native_log10f(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z12native_recipu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z12native_recipf(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z12native_recipf(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z12native_recipf(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z12native_recipf(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z12native_recipf(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z12native_recipf(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z12native_recipf(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z12native_recipf(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z12native_rsqrtu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z12native_rsqrtf(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z12native_rsqrtf(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z12native_rsqrtf(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z12native_rsqrtf(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z12native_rsqrtf(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z12native_rsqrtf(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z12native_rsqrtf(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z12native_rsqrtf(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z11native_sqrtu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z11native_sqrtf(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z11native_sqrtf(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z11native_sqrtf(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z11native_sqrtf(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z11native_sqrtf(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z11native_sqrtf(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z11native_sqrtf(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z11native_sqrtf(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z10native_sinu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z10native_sinf(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z10native_sinf(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z10native_sinf(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z10native_sinf(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z10native_sinf(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z10native_sinf(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z10native_sinf(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z10native_sinf(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z10native_cosu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z10native_cosf(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z10native_cosf(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z10native_cosf(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z10native_cosf(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z10native_cosf(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z10native_cosf(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z10native_cosf(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z10native_cosf(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z10native_expu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z10native_expf(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z10native_expf(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z10native_expf(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z10native_expf(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z10native_expf(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z10native_expf(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z10native_expf(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z10native_expf(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z10native_logu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z10native_logf(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z10native_logf(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z10native_logf(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z10native_logf(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z10native_logf(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z10native_logf(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z10native_logf(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z10native_logf(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z10native_tanu2v8f(<8 x float> %p0) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%v1 = call float @_Z10native_tanf(float %s1_0)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%v2 = call float @_Z10native_tanf(float %s2_0)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%v3 = call float @_Z10native_tanf(float %s3_0)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%v4 = call float @_Z10native_tanf(float %s4_0)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%v5 = call float @_Z10native_tanf(float %s5_0)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%v6 = call float @_Z10native_tanf(float %s6_0)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%v7 = call float @_Z10native_tanf(float %s7_0)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%v8 = call float @_Z10native_tanf(float %s8_0)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z13native_divideu2v8fu2v8f(<8 x float> %p0, <8 x float> %p1) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%s1_1 = extractelement <8 x float> %p1, i32 0
	%v1 = call float @_Z13native_divideff(float %s1_0, float %s1_1)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%s2_1 = extractelement <8 x float> %p1, i32 1
	%v2 = call float @_Z13native_divideff(float %s2_0, float %s2_1)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%s3_1 = extractelement <8 x float> %p1, i32 2
	%v3 = call float @_Z13native_divideff(float %s3_0, float %s3_1)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%s4_1 = extractelement <8 x float> %p1, i32 3
	%v4 = call float @_Z13native_divideff(float %s4_0, float %s4_1)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%s5_1 = extractelement <8 x float> %p1, i32 4
	%v5 = call float @_Z13native_divideff(float %s5_0, float %s5_1)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%s6_1 = extractelement <8 x float> %p1, i32 5
	%v6 = call float @_Z13native_divideff(float %s6_0, float %s6_1)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%s7_1 = extractelement <8 x float> %p1, i32 6
	%v7 = call float @_Z13native_divideff(float %s7_0, float %s7_1)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%s8_1 = extractelement <8 x float> %p1, i32 7
	%v8 = call float @_Z13native_divideff(float %s8_0, float %s8_1)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z11native_powru2v8fu2v8f(<8 x float> %p0, <8 x float> %p1) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%s1_1 = extractelement <8 x float> %p1, i32 0
	%v1 = call float @_Z11native_powrff(float %s1_0, float %s1_1)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%s2_1 = extractelement <8 x float> %p1, i32 1
	%v2 = call float @_Z11native_powrff(float %s2_0, float %s2_1)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%s3_1 = extractelement <8 x float> %p1, i32 2
	%v3 = call float @_Z11native_powrff(float %s3_0, float %s3_1)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%s4_1 = extractelement <8 x float> %p1, i32 3
	%v4 = call float @_Z11native_powrff(float %s4_0, float %s4_1)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%s5_1 = extractelement <8 x float> %p1, i32 4
	%v5 = call float @_Z11native_powrff(float %s5_0, float %s5_1)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%s6_1 = extractelement <8 x float> %p1, i32 5
	%v6 = call float @_Z11native_powrff(float %s6_0, float %s6_1)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%s7_1 = extractelement <8 x float> %p1, i32 6
	%v7 = call float @_Z11native_powrff(float %s7_0, float %s7_1)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%s8_1 = extractelement <8 x float> %p1, i32 7
	%v8 = call float @_Z11native_powrff(float %s8_0, float %s8_1)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x float> @_Z12native_ldexpu2v8fu2v8i(<8 x float> %p0, <8 x i32> %p1) nounwind {
	%s1_0 = extractelement <8 x float> %p0, i32 0
	%s1_1 = extractelement <8 x i32> %p1, i32 0
	%v1 = call float @_Z12native_ldexpfi(float %s1_0, i32 %s1_1)
	%r1 = insertelement <8 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <8 x float> %p0, i32 1
	%s2_1 = extractelement <8 x i32> %p1, i32 1
	%v2 = call float @_Z12native_ldexpfi(float %s2_0, i32 %s2_1)
	%r2 = insertelement <8 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <8 x float> %p0, i32 2
	%s3_1 = extractelement <8 x i32> %p1, i32 2
	%v3 = call float @_Z12native_ldexpfi(float %s3_0, i32 %s3_1)
	%r3 = insertelement <8 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <8 x float> %p0, i32 3
	%s4_1 = extractelement <8 x i32> %p1, i32 3
	%v4 = call float @_Z12native_ldexpfi(float %s4_0, i32 %s4_1)
	%r4 = insertelement <8 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <8 x float> %p0, i32 4
	%s5_1 = extractelement <8 x i32> %p1, i32 4
	%v5 = call float @_Z12native_ldexpfi(float %s5_0, i32 %s5_1)
	%r5 = insertelement <8 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <8 x float> %p0, i32 5
	%s6_1 = extractelement <8 x i32> %p1, i32 5
	%v6 = call float @_Z12native_ldexpfi(float %s6_0, i32 %s6_1)
	%r6 = insertelement <8 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <8 x float> %p0, i32 6
	%s7_1 = extractelement <8 x i32> %p1, i32 6
	%v7 = call float @_Z12native_ldexpfi(float %s7_0, i32 %s7_1)
	%r7 = insertelement <8 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <8 x float> %p0, i32 7
	%s8_1 = extractelement <8 x i32> %p1, i32 7
	%v8 = call float @_Z12native_ldexpfi(float %s8_0, i32 %s8_1)
	%r8 = insertelement <8 x float> %r7, float %v8, i32 7
	ret <8 x float> %r8
}
define <8 x double> @_Z4acosu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z4acosd(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z4acosd(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z4acosd(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z4acosd(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z4acosd(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z4acosd(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z4acosd(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z4acosd(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z5acoshu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z5acoshd(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z5acoshd(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z5acoshd(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z5acoshd(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z5acoshd(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z5acoshd(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z5acoshd(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z5acoshd(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z6acospiu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z6acospid(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z6acospid(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z6acospid(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z6acospid(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z6acospid(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z6acospid(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z6acospid(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z6acospid(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z4asinu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z4asind(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z4asind(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z4asind(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z4asind(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z4asind(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z4asind(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z4asind(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z4asind(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z5asinhu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z5asinhd(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z5asinhd(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z5asinhd(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z5asinhd(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z5asinhd(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z5asinhd(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z5asinhd(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z5asinhd(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z6asinpiu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z6asinpid(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z6asinpid(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z6asinpid(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z6asinpid(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z6asinpid(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z6asinpid(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z6asinpid(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z6asinpid(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z4atanu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z4atand(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z4atand(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z4atand(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z4atand(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z4atand(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z4atand(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z4atand(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z4atand(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z5atan2u2v8du2v8d(<8 x double> %p0, <8 x double> %p1) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%s1_1 = extractelement <8 x double> %p1, i32 0
	%v1 = call double @_Z5atan2dd(double %s1_0, double %s1_1)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%s2_1 = extractelement <8 x double> %p1, i32 1
	%v2 = call double @_Z5atan2dd(double %s2_0, double %s2_1)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%s3_1 = extractelement <8 x double> %p1, i32 2
	%v3 = call double @_Z5atan2dd(double %s3_0, double %s3_1)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%s4_1 = extractelement <8 x double> %p1, i32 3
	%v4 = call double @_Z5atan2dd(double %s4_0, double %s4_1)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%s5_1 = extractelement <8 x double> %p1, i32 4
	%v5 = call double @_Z5atan2dd(double %s5_0, double %s5_1)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%s6_1 = extractelement <8 x double> %p1, i32 5
	%v6 = call double @_Z5atan2dd(double %s6_0, double %s6_1)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%s7_1 = extractelement <8 x double> %p1, i32 6
	%v7 = call double @_Z5atan2dd(double %s7_0, double %s7_1)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%s8_1 = extractelement <8 x double> %p1, i32 7
	%v8 = call double @_Z5atan2dd(double %s8_0, double %s8_1)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z5atanhu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z5atanhd(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z5atanhd(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z5atanhd(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z5atanhd(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z5atanhd(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z5atanhd(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z5atanhd(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z5atanhd(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z6atanpiu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z6atanpid(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z6atanpid(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z6atanpid(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z6atanpid(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z6atanpid(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z6atanpid(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z6atanpid(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z6atanpid(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z7atan2piu2v8du2v8d(<8 x double> %p0, <8 x double> %p1) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%s1_1 = extractelement <8 x double> %p1, i32 0
	%v1 = call double @_Z7atan2pidd(double %s1_0, double %s1_1)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%s2_1 = extractelement <8 x double> %p1, i32 1
	%v2 = call double @_Z7atan2pidd(double %s2_0, double %s2_1)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%s3_1 = extractelement <8 x double> %p1, i32 2
	%v3 = call double @_Z7atan2pidd(double %s3_0, double %s3_1)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%s4_1 = extractelement <8 x double> %p1, i32 3
	%v4 = call double @_Z7atan2pidd(double %s4_0, double %s4_1)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%s5_1 = extractelement <8 x double> %p1, i32 4
	%v5 = call double @_Z7atan2pidd(double %s5_0, double %s5_1)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%s6_1 = extractelement <8 x double> %p1, i32 5
	%v6 = call double @_Z7atan2pidd(double %s6_0, double %s6_1)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%s7_1 = extractelement <8 x double> %p1, i32 6
	%v7 = call double @_Z7atan2pidd(double %s7_0, double %s7_1)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%s8_1 = extractelement <8 x double> %p1, i32 7
	%v8 = call double @_Z7atan2pidd(double %s8_0, double %s8_1)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z4cbrtu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z4cbrtd(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z4cbrtd(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z4cbrtd(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z4cbrtd(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z4cbrtd(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z4cbrtd(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z4cbrtd(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z4cbrtd(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z4ceilu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z4ceild(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z4ceild(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z4ceild(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z4ceild(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z4ceild(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z4ceild(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z4ceild(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z4ceild(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z8copysignu2v8du2v8d(<8 x double> %p0, <8 x double> %p1) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%s1_1 = extractelement <8 x double> %p1, i32 0
	%v1 = call double @_Z8copysigndd(double %s1_0, double %s1_1)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%s2_1 = extractelement <8 x double> %p1, i32 1
	%v2 = call double @_Z8copysigndd(double %s2_0, double %s2_1)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%s3_1 = extractelement <8 x double> %p1, i32 2
	%v3 = call double @_Z8copysigndd(double %s3_0, double %s3_1)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%s4_1 = extractelement <8 x double> %p1, i32 3
	%v4 = call double @_Z8copysigndd(double %s4_0, double %s4_1)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%s5_1 = extractelement <8 x double> %p1, i32 4
	%v5 = call double @_Z8copysigndd(double %s5_0, double %s5_1)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%s6_1 = extractelement <8 x double> %p1, i32 5
	%v6 = call double @_Z8copysigndd(double %s6_0, double %s6_1)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%s7_1 = extractelement <8 x double> %p1, i32 6
	%v7 = call double @_Z8copysigndd(double %s7_0, double %s7_1)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%s8_1 = extractelement <8 x double> %p1, i32 7
	%v8 = call double @_Z8copysigndd(double %s8_0, double %s8_1)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z4coshu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z4coshd(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z4coshd(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z4coshd(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z4coshd(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z4coshd(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z4coshd(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z4coshd(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z4coshd(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z5cospiu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z5cospid(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z5cospid(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z5cospid(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z5cospid(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z5cospid(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z5cospid(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z5cospid(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z5cospid(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z4erfcu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z4erfcd(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z4erfcd(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z4erfcd(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z4erfcd(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z4erfcd(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z4erfcd(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z4erfcd(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z4erfcd(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z3erfu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z3erfd(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z3erfd(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z3erfd(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z3erfd(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z3erfd(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z3erfd(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z3erfd(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z3erfd(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z4exp2u2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z4exp2d(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z4exp2d(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z4exp2d(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z4exp2d(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z4exp2d(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z4exp2d(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z4exp2d(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z4exp2d(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z5exp10u2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z5exp10d(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z5exp10d(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z5exp10d(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z5exp10d(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z5exp10d(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z5exp10d(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z5exp10d(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z5exp10d(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z5expm1u2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z5expm1d(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z5expm1d(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z5expm1d(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z5expm1d(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z5expm1d(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z5expm1d(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z5expm1d(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z5expm1d(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z4fdimu2v8du2v8d(<8 x double> %p0, <8 x double> %p1) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%s1_1 = extractelement <8 x double> %p1, i32 0
	%v1 = call double @_Z4fdimdd(double %s1_0, double %s1_1)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%s2_1 = extractelement <8 x double> %p1, i32 1
	%v2 = call double @_Z4fdimdd(double %s2_0, double %s2_1)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%s3_1 = extractelement <8 x double> %p1, i32 2
	%v3 = call double @_Z4fdimdd(double %s3_0, double %s3_1)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%s4_1 = extractelement <8 x double> %p1, i32 3
	%v4 = call double @_Z4fdimdd(double %s4_0, double %s4_1)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%s5_1 = extractelement <8 x double> %p1, i32 4
	%v5 = call double @_Z4fdimdd(double %s5_0, double %s5_1)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%s6_1 = extractelement <8 x double> %p1, i32 5
	%v6 = call double @_Z4fdimdd(double %s6_0, double %s6_1)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%s7_1 = extractelement <8 x double> %p1, i32 6
	%v7 = call double @_Z4fdimdd(double %s7_0, double %s7_1)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%s8_1 = extractelement <8 x double> %p1, i32 7
	%v8 = call double @_Z4fdimdd(double %s8_0, double %s8_1)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z4fmaxu2v8du2v8d(<8 x double> %p0, <8 x double> %p1) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%s1_1 = extractelement <8 x double> %p1, i32 0
	%v1 = call double @_Z4fmaxdd(double %s1_0, double %s1_1)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%s2_1 = extractelement <8 x double> %p1, i32 1
	%v2 = call double @_Z4fmaxdd(double %s2_0, double %s2_1)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%s3_1 = extractelement <8 x double> %p1, i32 2
	%v3 = call double @_Z4fmaxdd(double %s3_0, double %s3_1)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%s4_1 = extractelement <8 x double> %p1, i32 3
	%v4 = call double @_Z4fmaxdd(double %s4_0, double %s4_1)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%s5_1 = extractelement <8 x double> %p1, i32 4
	%v5 = call double @_Z4fmaxdd(double %s5_0, double %s5_1)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%s6_1 = extractelement <8 x double> %p1, i32 5
	%v6 = call double @_Z4fmaxdd(double %s6_0, double %s6_1)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%s7_1 = extractelement <8 x double> %p1, i32 6
	%v7 = call double @_Z4fmaxdd(double %s7_0, double %s7_1)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%s8_1 = extractelement <8 x double> %p1, i32 7
	%v8 = call double @_Z4fmaxdd(double %s8_0, double %s8_1)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z4fminu2v8du2v8d(<8 x double> %p0, <8 x double> %p1) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%s1_1 = extractelement <8 x double> %p1, i32 0
	%v1 = call double @_Z4fmindd(double %s1_0, double %s1_1)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%s2_1 = extractelement <8 x double> %p1, i32 1
	%v2 = call double @_Z4fmindd(double %s2_0, double %s2_1)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%s3_1 = extractelement <8 x double> %p1, i32 2
	%v3 = call double @_Z4fmindd(double %s3_0, double %s3_1)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%s4_1 = extractelement <8 x double> %p1, i32 3
	%v4 = call double @_Z4fmindd(double %s4_0, double %s4_1)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%s5_1 = extractelement <8 x double> %p1, i32 4
	%v5 = call double @_Z4fmindd(double %s5_0, double %s5_1)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%s6_1 = extractelement <8 x double> %p1, i32 5
	%v6 = call double @_Z4fmindd(double %s6_0, double %s6_1)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%s7_1 = extractelement <8 x double> %p1, i32 6
	%v7 = call double @_Z4fmindd(double %s7_0, double %s7_1)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%s8_1 = extractelement <8 x double> %p1, i32 7
	%v8 = call double @_Z4fmindd(double %s8_0, double %s8_1)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z4fmodu2v8du2v8d(<8 x double> %p0, <8 x double> %p1) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%s1_1 = extractelement <8 x double> %p1, i32 0
	%v1 = call double @_Z4fmoddd(double %s1_0, double %s1_1)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%s2_1 = extractelement <8 x double> %p1, i32 1
	%v2 = call double @_Z4fmoddd(double %s2_0, double %s2_1)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%s3_1 = extractelement <8 x double> %p1, i32 2
	%v3 = call double @_Z4fmoddd(double %s3_0, double %s3_1)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%s4_1 = extractelement <8 x double> %p1, i32 3
	%v4 = call double @_Z4fmoddd(double %s4_0, double %s4_1)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%s5_1 = extractelement <8 x double> %p1, i32 4
	%v5 = call double @_Z4fmoddd(double %s5_0, double %s5_1)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%s6_1 = extractelement <8 x double> %p1, i32 5
	%v6 = call double @_Z4fmoddd(double %s6_0, double %s6_1)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%s7_1 = extractelement <8 x double> %p1, i32 6
	%v7 = call double @_Z4fmoddd(double %s7_0, double %s7_1)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%s8_1 = extractelement <8 x double> %p1, i32 7
	%v8 = call double @_Z4fmoddd(double %s8_0, double %s8_1)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z5fractu2v8dPu2v8d(<8 x double> %p0, <8 x double>* %p1) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%s1_1 = getelementptr <8 x double>* %p1, i32 0, i32 0
	%v1 = call double @_Z5fractdPd(double %s1_0, double* %s1_1)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%s2_1 = getelementptr <8 x double>* %p1, i32 0, i32 1
	%v2 = call double @_Z5fractdPd(double %s2_0, double* %s2_1)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%s3_1 = getelementptr <8 x double>* %p1, i32 0, i32 2
	%v3 = call double @_Z5fractdPd(double %s3_0, double* %s3_1)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%s4_1 = getelementptr <8 x double>* %p1, i32 0, i32 3
	%v4 = call double @_Z5fractdPd(double %s4_0, double* %s4_1)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%s5_1 = getelementptr <8 x double>* %p1, i32 0, i32 4
	%v5 = call double @_Z5fractdPd(double %s5_0, double* %s5_1)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%s6_1 = getelementptr <8 x double>* %p1, i32 0, i32 5
	%v6 = call double @_Z5fractdPd(double %s6_0, double* %s6_1)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%s7_1 = getelementptr <8 x double>* %p1, i32 0, i32 6
	%v7 = call double @_Z5fractdPd(double %s7_0, double* %s7_1)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%s8_1 = getelementptr <8 x double>* %p1, i32 0, i32 7
	%v8 = call double @_Z5fractdPd(double %s8_0, double* %s8_1)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z5frexpu2v8dPu2v8i(<8 x double> %p0, <8 x i32>* %p1) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%s1_1 = getelementptr <8 x i32>* %p1, i32 0, i32 0
	%v1 = call double @_Z5frexpdPi(double %s1_0, i32* %s1_1)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%s2_1 = getelementptr <8 x i32>* %p1, i32 0, i32 1
	%v2 = call double @_Z5frexpdPi(double %s2_0, i32* %s2_1)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%s3_1 = getelementptr <8 x i32>* %p1, i32 0, i32 2
	%v3 = call double @_Z5frexpdPi(double %s3_0, i32* %s3_1)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%s4_1 = getelementptr <8 x i32>* %p1, i32 0, i32 3
	%v4 = call double @_Z5frexpdPi(double %s4_0, i32* %s4_1)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%s5_1 = getelementptr <8 x i32>* %p1, i32 0, i32 4
	%v5 = call double @_Z5frexpdPi(double %s5_0, i32* %s5_1)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%s6_1 = getelementptr <8 x i32>* %p1, i32 0, i32 5
	%v6 = call double @_Z5frexpdPi(double %s6_0, i32* %s6_1)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%s7_1 = getelementptr <8 x i32>* %p1, i32 0, i32 6
	%v7 = call double @_Z5frexpdPi(double %s7_0, i32* %s7_1)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%s8_1 = getelementptr <8 x i32>* %p1, i32 0, i32 7
	%v8 = call double @_Z5frexpdPi(double %s8_0, i32* %s8_1)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z5hypotu2v8du2v8d(<8 x double> %p0, <8 x double> %p1) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%s1_1 = extractelement <8 x double> %p1, i32 0
	%v1 = call double @_Z5hypotdd(double %s1_0, double %s1_1)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%s2_1 = extractelement <8 x double> %p1, i32 1
	%v2 = call double @_Z5hypotdd(double %s2_0, double %s2_1)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%s3_1 = extractelement <8 x double> %p1, i32 2
	%v3 = call double @_Z5hypotdd(double %s3_0, double %s3_1)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%s4_1 = extractelement <8 x double> %p1, i32 3
	%v4 = call double @_Z5hypotdd(double %s4_0, double %s4_1)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%s5_1 = extractelement <8 x double> %p1, i32 4
	%v5 = call double @_Z5hypotdd(double %s5_0, double %s5_1)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%s6_1 = extractelement <8 x double> %p1, i32 5
	%v6 = call double @_Z5hypotdd(double %s6_0, double %s6_1)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%s7_1 = extractelement <8 x double> %p1, i32 6
	%v7 = call double @_Z5hypotdd(double %s7_0, double %s7_1)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%s8_1 = extractelement <8 x double> %p1, i32 7
	%v8 = call double @_Z5hypotdd(double %s8_0, double %s8_1)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z5ldexpu2v8du2v8i(<8 x double> %p0, <8 x i32> %p1) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%s1_1 = extractelement <8 x i32> %p1, i32 0
	%v1 = call double @_Z5ldexpdi(double %s1_0, i32 %s1_1)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%s2_1 = extractelement <8 x i32> %p1, i32 1
	%v2 = call double @_Z5ldexpdi(double %s2_0, i32 %s2_1)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%s3_1 = extractelement <8 x i32> %p1, i32 2
	%v3 = call double @_Z5ldexpdi(double %s3_0, i32 %s3_1)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%s4_1 = extractelement <8 x i32> %p1, i32 3
	%v4 = call double @_Z5ldexpdi(double %s4_0, i32 %s4_1)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%s5_1 = extractelement <8 x i32> %p1, i32 4
	%v5 = call double @_Z5ldexpdi(double %s5_0, i32 %s5_1)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%s6_1 = extractelement <8 x i32> %p1, i32 5
	%v6 = call double @_Z5ldexpdi(double %s6_0, i32 %s6_1)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%s7_1 = extractelement <8 x i32> %p1, i32 6
	%v7 = call double @_Z5ldexpdi(double %s7_0, i32 %s7_1)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%s8_1 = extractelement <8 x i32> %p1, i32 7
	%v8 = call double @_Z5ldexpdi(double %s8_0, i32 %s8_1)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z6lgammau2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z6lgammad(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z6lgammad(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z6lgammad(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z6lgammad(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z6lgammad(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z6lgammad(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z6lgammad(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z6lgammad(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z8lgamma_ru2v8dPu2v8i(<8 x double> %p0, <8 x i32>* %p1) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%s1_1 = getelementptr <8 x i32>* %p1, i32 0, i32 0
	%v1 = call double @_Z8lgamma_rdPi(double %s1_0, i32* %s1_1)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%s2_1 = getelementptr <8 x i32>* %p1, i32 0, i32 1
	%v2 = call double @_Z8lgamma_rdPi(double %s2_0, i32* %s2_1)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%s3_1 = getelementptr <8 x i32>* %p1, i32 0, i32 2
	%v3 = call double @_Z8lgamma_rdPi(double %s3_0, i32* %s3_1)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%s4_1 = getelementptr <8 x i32>* %p1, i32 0, i32 3
	%v4 = call double @_Z8lgamma_rdPi(double %s4_0, i32* %s4_1)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%s5_1 = getelementptr <8 x i32>* %p1, i32 0, i32 4
	%v5 = call double @_Z8lgamma_rdPi(double %s5_0, i32* %s5_1)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%s6_1 = getelementptr <8 x i32>* %p1, i32 0, i32 5
	%v6 = call double @_Z8lgamma_rdPi(double %s6_0, i32* %s6_1)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%s7_1 = getelementptr <8 x i32>* %p1, i32 0, i32 6
	%v7 = call double @_Z8lgamma_rdPi(double %s7_0, i32* %s7_1)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%s8_1 = getelementptr <8 x i32>* %p1, i32 0, i32 7
	%v8 = call double @_Z8lgamma_rdPi(double %s8_0, i32* %s8_1)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z4log2u2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z4log2d(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z4log2d(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z4log2d(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z4log2d(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z4log2d(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z4log2d(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z4log2d(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z4log2d(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z5log10u2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z5log10d(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z5log10d(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z5log10d(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z5log10d(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z5log10d(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z5log10d(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z5log10d(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z5log10d(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z5log1pu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z5log1pd(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z5log1pd(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z5log1pd(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z5log1pd(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z5log1pd(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z5log1pd(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z5log1pd(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z5log1pd(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z4logbu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z4logbd(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z4logbd(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z4logbd(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z4logbd(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z4logbd(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z4logbd(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z4logbd(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z4logbd(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z3madu2v8du2v8du2v8d(<8 x double> %p0, <8 x double> %p1, <8 x double> %p2) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%s1_1 = extractelement <8 x double> %p1, i32 0
	%s1_2 = extractelement <8 x double> %p2, i32 0
	%v1 = call double @_Z3madddd(double %s1_0, double %s1_1, double %s1_2)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%s2_1 = extractelement <8 x double> %p1, i32 1
	%s2_2 = extractelement <8 x double> %p2, i32 1
	%v2 = call double @_Z3madddd(double %s2_0, double %s2_1, double %s2_2)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%s3_1 = extractelement <8 x double> %p1, i32 2
	%s3_2 = extractelement <8 x double> %p2, i32 2
	%v3 = call double @_Z3madddd(double %s3_0, double %s3_1, double %s3_2)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%s4_1 = extractelement <8 x double> %p1, i32 3
	%s4_2 = extractelement <8 x double> %p2, i32 3
	%v4 = call double @_Z3madddd(double %s4_0, double %s4_1, double %s4_2)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%s5_1 = extractelement <8 x double> %p1, i32 4
	%s5_2 = extractelement <8 x double> %p2, i32 4
	%v5 = call double @_Z3madddd(double %s5_0, double %s5_1, double %s5_2)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%s6_1 = extractelement <8 x double> %p1, i32 5
	%s6_2 = extractelement <8 x double> %p2, i32 5
	%v6 = call double @_Z3madddd(double %s6_0, double %s6_1, double %s6_2)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%s7_1 = extractelement <8 x double> %p1, i32 6
	%s7_2 = extractelement <8 x double> %p2, i32 6
	%v7 = call double @_Z3madddd(double %s7_0, double %s7_1, double %s7_2)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%s8_1 = extractelement <8 x double> %p1, i32 7
	%s8_2 = extractelement <8 x double> %p2, i32 7
	%v8 = call double @_Z3madddd(double %s8_0, double %s8_1, double %s8_2)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z6maxmagu2v8du2v8d(<8 x double> %p0, <8 x double> %p1) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%s1_1 = extractelement <8 x double> %p1, i32 0
	%v1 = call double @_Z6maxmagdd(double %s1_0, double %s1_1)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%s2_1 = extractelement <8 x double> %p1, i32 1
	%v2 = call double @_Z6maxmagdd(double %s2_0, double %s2_1)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%s3_1 = extractelement <8 x double> %p1, i32 2
	%v3 = call double @_Z6maxmagdd(double %s3_0, double %s3_1)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%s4_1 = extractelement <8 x double> %p1, i32 3
	%v4 = call double @_Z6maxmagdd(double %s4_0, double %s4_1)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%s5_1 = extractelement <8 x double> %p1, i32 4
	%v5 = call double @_Z6maxmagdd(double %s5_0, double %s5_1)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%s6_1 = extractelement <8 x double> %p1, i32 5
	%v6 = call double @_Z6maxmagdd(double %s6_0, double %s6_1)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%s7_1 = extractelement <8 x double> %p1, i32 6
	%v7 = call double @_Z6maxmagdd(double %s7_0, double %s7_1)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%s8_1 = extractelement <8 x double> %p1, i32 7
	%v8 = call double @_Z6maxmagdd(double %s8_0, double %s8_1)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z6minmagu2v8du2v8d(<8 x double> %p0, <8 x double> %p1) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%s1_1 = extractelement <8 x double> %p1, i32 0
	%v1 = call double @_Z6minmagdd(double %s1_0, double %s1_1)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%s2_1 = extractelement <8 x double> %p1, i32 1
	%v2 = call double @_Z6minmagdd(double %s2_0, double %s2_1)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%s3_1 = extractelement <8 x double> %p1, i32 2
	%v3 = call double @_Z6minmagdd(double %s3_0, double %s3_1)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%s4_1 = extractelement <8 x double> %p1, i32 3
	%v4 = call double @_Z6minmagdd(double %s4_0, double %s4_1)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%s5_1 = extractelement <8 x double> %p1, i32 4
	%v5 = call double @_Z6minmagdd(double %s5_0, double %s5_1)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%s6_1 = extractelement <8 x double> %p1, i32 5
	%v6 = call double @_Z6minmagdd(double %s6_0, double %s6_1)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%s7_1 = extractelement <8 x double> %p1, i32 6
	%v7 = call double @_Z6minmagdd(double %s7_0, double %s7_1)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%s8_1 = extractelement <8 x double> %p1, i32 7
	%v8 = call double @_Z6minmagdd(double %s8_0, double %s8_1)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z4modfu2v8dPu2v8d(<8 x double> %p0, <8 x double>* %p1) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%s1_1 = getelementptr <8 x double>* %p1, i32 0, i32 0
	%v1 = call double @_Z4modfdPd(double %s1_0, double* %s1_1)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%s2_1 = getelementptr <8 x double>* %p1, i32 0, i32 1
	%v2 = call double @_Z4modfdPd(double %s2_0, double* %s2_1)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%s3_1 = getelementptr <8 x double>* %p1, i32 0, i32 2
	%v3 = call double @_Z4modfdPd(double %s3_0, double* %s3_1)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%s4_1 = getelementptr <8 x double>* %p1, i32 0, i32 3
	%v4 = call double @_Z4modfdPd(double %s4_0, double* %s4_1)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%s5_1 = getelementptr <8 x double>* %p1, i32 0, i32 4
	%v5 = call double @_Z4modfdPd(double %s5_0, double* %s5_1)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%s6_1 = getelementptr <8 x double>* %p1, i32 0, i32 5
	%v6 = call double @_Z4modfdPd(double %s6_0, double* %s6_1)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%s7_1 = getelementptr <8 x double>* %p1, i32 0, i32 6
	%v7 = call double @_Z4modfdPd(double %s7_0, double* %s7_1)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%s8_1 = getelementptr <8 x double>* %p1, i32 0, i32 7
	%v8 = call double @_Z4modfdPd(double %s8_0, double* %s8_1)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z9nextafteru2v8du2v8d(<8 x double> %p0, <8 x double> %p1) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%s1_1 = extractelement <8 x double> %p1, i32 0
	%v1 = call double @_Z9nextafterdd(double %s1_0, double %s1_1)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%s2_1 = extractelement <8 x double> %p1, i32 1
	%v2 = call double @_Z9nextafterdd(double %s2_0, double %s2_1)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%s3_1 = extractelement <8 x double> %p1, i32 2
	%v3 = call double @_Z9nextafterdd(double %s3_0, double %s3_1)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%s4_1 = extractelement <8 x double> %p1, i32 3
	%v4 = call double @_Z9nextafterdd(double %s4_0, double %s4_1)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%s5_1 = extractelement <8 x double> %p1, i32 4
	%v5 = call double @_Z9nextafterdd(double %s5_0, double %s5_1)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%s6_1 = extractelement <8 x double> %p1, i32 5
	%v6 = call double @_Z9nextafterdd(double %s6_0, double %s6_1)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%s7_1 = extractelement <8 x double> %p1, i32 6
	%v7 = call double @_Z9nextafterdd(double %s7_0, double %s7_1)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%s8_1 = extractelement <8 x double> %p1, i32 7
	%v8 = call double @_Z9nextafterdd(double %s8_0, double %s8_1)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z4powru2v8du2v8d(<8 x double> %p0, <8 x double> %p1) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%s1_1 = extractelement <8 x double> %p1, i32 0
	%v1 = call double @_Z4powrdd(double %s1_0, double %s1_1)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%s2_1 = extractelement <8 x double> %p1, i32 1
	%v2 = call double @_Z4powrdd(double %s2_0, double %s2_1)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%s3_1 = extractelement <8 x double> %p1, i32 2
	%v3 = call double @_Z4powrdd(double %s3_0, double %s3_1)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%s4_1 = extractelement <8 x double> %p1, i32 3
	%v4 = call double @_Z4powrdd(double %s4_0, double %s4_1)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%s5_1 = extractelement <8 x double> %p1, i32 4
	%v5 = call double @_Z4powrdd(double %s5_0, double %s5_1)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%s6_1 = extractelement <8 x double> %p1, i32 5
	%v6 = call double @_Z4powrdd(double %s6_0, double %s6_1)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%s7_1 = extractelement <8 x double> %p1, i32 6
	%v7 = call double @_Z4powrdd(double %s7_0, double %s7_1)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%s8_1 = extractelement <8 x double> %p1, i32 7
	%v8 = call double @_Z4powrdd(double %s8_0, double %s8_1)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z9remainderu2v8du2v8d(<8 x double> %p0, <8 x double> %p1) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%s1_1 = extractelement <8 x double> %p1, i32 0
	%v1 = call double @_Z9remainderdd(double %s1_0, double %s1_1)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%s2_1 = extractelement <8 x double> %p1, i32 1
	%v2 = call double @_Z9remainderdd(double %s2_0, double %s2_1)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%s3_1 = extractelement <8 x double> %p1, i32 2
	%v3 = call double @_Z9remainderdd(double %s3_0, double %s3_1)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%s4_1 = extractelement <8 x double> %p1, i32 3
	%v4 = call double @_Z9remainderdd(double %s4_0, double %s4_1)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%s5_1 = extractelement <8 x double> %p1, i32 4
	%v5 = call double @_Z9remainderdd(double %s5_0, double %s5_1)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%s6_1 = extractelement <8 x double> %p1, i32 5
	%v6 = call double @_Z9remainderdd(double %s6_0, double %s6_1)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%s7_1 = extractelement <8 x double> %p1, i32 6
	%v7 = call double @_Z9remainderdd(double %s7_0, double %s7_1)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%s8_1 = extractelement <8 x double> %p1, i32 7
	%v8 = call double @_Z9remainderdd(double %s8_0, double %s8_1)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z6remquou2v8du2v8dPu2v8i(<8 x double> %p0, <8 x double> %p1, <8 x i32>* %p2) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%s1_1 = extractelement <8 x double> %p1, i32 0
	%s1_2 = getelementptr <8 x i32>* %p2, i32 0, i32 0
	%v1 = call double @_Z6remquoddPi(double %s1_0, double %s1_1, i32* %s1_2)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%s2_1 = extractelement <8 x double> %p1, i32 1
	%s2_2 = getelementptr <8 x i32>* %p2, i32 0, i32 1
	%v2 = call double @_Z6remquoddPi(double %s2_0, double %s2_1, i32* %s2_2)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%s3_1 = extractelement <8 x double> %p1, i32 2
	%s3_2 = getelementptr <8 x i32>* %p2, i32 0, i32 2
	%v3 = call double @_Z6remquoddPi(double %s3_0, double %s3_1, i32* %s3_2)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%s4_1 = extractelement <8 x double> %p1, i32 3
	%s4_2 = getelementptr <8 x i32>* %p2, i32 0, i32 3
	%v4 = call double @_Z6remquoddPi(double %s4_0, double %s4_1, i32* %s4_2)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%s5_1 = extractelement <8 x double> %p1, i32 4
	%s5_2 = getelementptr <8 x i32>* %p2, i32 0, i32 4
	%v5 = call double @_Z6remquoddPi(double %s5_0, double %s5_1, i32* %s5_2)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%s6_1 = extractelement <8 x double> %p1, i32 5
	%s6_2 = getelementptr <8 x i32>* %p2, i32 0, i32 5
	%v6 = call double @_Z6remquoddPi(double %s6_0, double %s6_1, i32* %s6_2)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%s7_1 = extractelement <8 x double> %p1, i32 6
	%s7_2 = getelementptr <8 x i32>* %p2, i32 0, i32 6
	%v7 = call double @_Z6remquoddPi(double %s7_0, double %s7_1, i32* %s7_2)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%s8_1 = extractelement <8 x double> %p1, i32 7
	%s8_2 = getelementptr <8 x i32>* %p2, i32 0, i32 7
	%v8 = call double @_Z6remquoddPi(double %s8_0, double %s8_1, i32* %s8_2)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z4rintu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z4rintd(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z4rintd(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z4rintd(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z4rintd(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z4rintd(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z4rintd(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z4rintd(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z4rintd(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z5rootnu2v8du2v8i(<8 x double> %p0, <8 x i32> %p1) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%s1_1 = extractelement <8 x i32> %p1, i32 0
	%v1 = call double @_Z5rootndi(double %s1_0, i32 %s1_1)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%s2_1 = extractelement <8 x i32> %p1, i32 1
	%v2 = call double @_Z5rootndi(double %s2_0, i32 %s2_1)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%s3_1 = extractelement <8 x i32> %p1, i32 2
	%v3 = call double @_Z5rootndi(double %s3_0, i32 %s3_1)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%s4_1 = extractelement <8 x i32> %p1, i32 3
	%v4 = call double @_Z5rootndi(double %s4_0, i32 %s4_1)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%s5_1 = extractelement <8 x i32> %p1, i32 4
	%v5 = call double @_Z5rootndi(double %s5_0, i32 %s5_1)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%s6_1 = extractelement <8 x i32> %p1, i32 5
	%v6 = call double @_Z5rootndi(double %s6_0, i32 %s6_1)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%s7_1 = extractelement <8 x i32> %p1, i32 6
	%v7 = call double @_Z5rootndi(double %s7_0, i32 %s7_1)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%s8_1 = extractelement <8 x i32> %p1, i32 7
	%v8 = call double @_Z5rootndi(double %s8_0, i32 %s8_1)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z5roundu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z5roundd(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z5roundd(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z5roundd(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z5roundd(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z5roundd(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z5roundd(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z5roundd(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z5roundd(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z5rsqrtu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z5rsqrtd(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z5rsqrtd(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z5rsqrtd(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z5rsqrtd(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z5rsqrtd(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z5rsqrtd(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z5rsqrtd(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z5rsqrtd(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z6sincosu2v8dPu2v8d(<8 x double> %p0, <8 x double>* %p1) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%s1_1 = getelementptr <8 x double>* %p1, i32 0, i32 0
	%v1 = call double @_Z6sincosdPd(double %s1_0, double* %s1_1)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%s2_1 = getelementptr <8 x double>* %p1, i32 0, i32 1
	%v2 = call double @_Z6sincosdPd(double %s2_0, double* %s2_1)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%s3_1 = getelementptr <8 x double>* %p1, i32 0, i32 2
	%v3 = call double @_Z6sincosdPd(double %s3_0, double* %s3_1)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%s4_1 = getelementptr <8 x double>* %p1, i32 0, i32 3
	%v4 = call double @_Z6sincosdPd(double %s4_0, double* %s4_1)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%s5_1 = getelementptr <8 x double>* %p1, i32 0, i32 4
	%v5 = call double @_Z6sincosdPd(double %s5_0, double* %s5_1)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%s6_1 = getelementptr <8 x double>* %p1, i32 0, i32 5
	%v6 = call double @_Z6sincosdPd(double %s6_0, double* %s6_1)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%s7_1 = getelementptr <8 x double>* %p1, i32 0, i32 6
	%v7 = call double @_Z6sincosdPd(double %s7_0, double* %s7_1)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%s8_1 = getelementptr <8 x double>* %p1, i32 0, i32 7
	%v8 = call double @_Z6sincosdPd(double %s8_0, double* %s8_1)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z4sinhu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z4sinhd(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z4sinhd(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z4sinhd(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z4sinhd(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z4sinhd(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z4sinhd(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z4sinhd(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z4sinhd(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z5sinpiu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z5sinpid(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z5sinpid(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z5sinpid(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z5sinpid(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z5sinpid(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z5sinpid(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z5sinpid(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z5sinpid(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z3tanu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z3tand(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z3tand(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z3tand(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z3tand(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z3tand(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z3tand(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z3tand(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z3tand(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z4tanhu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z4tanhd(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z4tanhd(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z4tanhd(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z4tanhd(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z4tanhd(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z4tanhd(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z4tanhd(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z4tanhd(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z5tanpiu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z5tanpid(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z5tanpid(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z5tanpid(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z5tanpid(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z5tanpid(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z5tanpid(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z5tanpid(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z5tanpid(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z6tgammau2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z6tgammad(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z6tgammad(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z6tgammad(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z6tgammad(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z6tgammad(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z6tgammad(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z6tgammad(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z6tgammad(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z5truncu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z5truncd(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z5truncd(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z5truncd(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z5truncd(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z5truncd(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z5truncd(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z5truncd(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z5truncd(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z8half_cosu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z8half_cosd(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z8half_cosd(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z8half_cosd(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z8half_cosd(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z8half_cosd(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z8half_cosd(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z8half_cosd(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z8half_cosd(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z11half_divideu2v8du2v8d(<8 x double> %p0, <8 x double> %p1) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%s1_1 = extractelement <8 x double> %p1, i32 0
	%v1 = call double @_Z11half_dividedd(double %s1_0, double %s1_1)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%s2_1 = extractelement <8 x double> %p1, i32 1
	%v2 = call double @_Z11half_dividedd(double %s2_0, double %s2_1)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%s3_1 = extractelement <8 x double> %p1, i32 2
	%v3 = call double @_Z11half_dividedd(double %s3_0, double %s3_1)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%s4_1 = extractelement <8 x double> %p1, i32 3
	%v4 = call double @_Z11half_dividedd(double %s4_0, double %s4_1)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%s5_1 = extractelement <8 x double> %p1, i32 4
	%v5 = call double @_Z11half_dividedd(double %s5_0, double %s5_1)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%s6_1 = extractelement <8 x double> %p1, i32 5
	%v6 = call double @_Z11half_dividedd(double %s6_0, double %s6_1)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%s7_1 = extractelement <8 x double> %p1, i32 6
	%v7 = call double @_Z11half_dividedd(double %s7_0, double %s7_1)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%s8_1 = extractelement <8 x double> %p1, i32 7
	%v8 = call double @_Z11half_dividedd(double %s8_0, double %s8_1)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z8half_expu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z8half_expd(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z8half_expd(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z8half_expd(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z8half_expd(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z8half_expd(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z8half_expd(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z8half_expd(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z8half_expd(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z9half_exp2u2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z9half_exp2d(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z9half_exp2d(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z9half_exp2d(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z9half_exp2d(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z9half_exp2d(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z9half_exp2d(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z9half_exp2d(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z9half_exp2d(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z10half_exp10u2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z10half_exp10d(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z10half_exp10d(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z10half_exp10d(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z10half_exp10d(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z10half_exp10d(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z10half_exp10d(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z10half_exp10d(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z10half_exp10d(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z8half_logu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z8half_logd(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z8half_logd(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z8half_logd(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z8half_logd(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z8half_logd(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z8half_logd(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z8half_logd(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z8half_logd(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z9half_log2u2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z9half_log2d(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z9half_log2d(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z9half_log2d(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z9half_log2d(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z9half_log2d(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z9half_log2d(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z9half_log2d(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z9half_log2d(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z10half_log10u2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z10half_log10d(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z10half_log10d(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z10half_log10d(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z10half_log10d(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z10half_log10d(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z10half_log10d(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z10half_log10d(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z10half_log10d(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z9half_powru2v8du2v8d(<8 x double> %p0, <8 x double> %p1) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%s1_1 = extractelement <8 x double> %p1, i32 0
	%v1 = call double @_Z9half_powrdd(double %s1_0, double %s1_1)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%s2_1 = extractelement <8 x double> %p1, i32 1
	%v2 = call double @_Z9half_powrdd(double %s2_0, double %s2_1)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%s3_1 = extractelement <8 x double> %p1, i32 2
	%v3 = call double @_Z9half_powrdd(double %s3_0, double %s3_1)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%s4_1 = extractelement <8 x double> %p1, i32 3
	%v4 = call double @_Z9half_powrdd(double %s4_0, double %s4_1)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%s5_1 = extractelement <8 x double> %p1, i32 4
	%v5 = call double @_Z9half_powrdd(double %s5_0, double %s5_1)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%s6_1 = extractelement <8 x double> %p1, i32 5
	%v6 = call double @_Z9half_powrdd(double %s6_0, double %s6_1)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%s7_1 = extractelement <8 x double> %p1, i32 6
	%v7 = call double @_Z9half_powrdd(double %s7_0, double %s7_1)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%s8_1 = extractelement <8 x double> %p1, i32 7
	%v8 = call double @_Z9half_powrdd(double %s8_0, double %s8_1)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z10half_recipu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z10half_recipd(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z10half_recipd(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z10half_recipd(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z10half_recipd(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z10half_recipd(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z10half_recipd(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z10half_recipd(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z10half_recipd(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z10half_rsqrtu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z10half_rsqrtd(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z10half_rsqrtd(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z10half_rsqrtd(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z10half_rsqrtd(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z10half_rsqrtd(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z10half_rsqrtd(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z10half_rsqrtd(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z10half_rsqrtd(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z8half_sinu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z8half_sind(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z8half_sind(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z8half_sind(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z8half_sind(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z8half_sind(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z8half_sind(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z8half_sind(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z8half_sind(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z9half_sqrtu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z9half_sqrtd(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z9half_sqrtd(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z9half_sqrtd(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z9half_sqrtd(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z9half_sqrtd(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z9half_sqrtd(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z9half_sqrtd(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z9half_sqrtd(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z8half_tanu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z8half_tand(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z8half_tand(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z8half_tand(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z8half_tand(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z8half_tand(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z8half_tand(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z8half_tand(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z8half_tand(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z11native_exp2u2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z11native_exp2d(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z11native_exp2d(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z11native_exp2d(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z11native_exp2d(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z11native_exp2d(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z11native_exp2d(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z11native_exp2d(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z11native_exp2d(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z12native_exp10u2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z12native_exp10d(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z12native_exp10d(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z12native_exp10d(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z12native_exp10d(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z12native_exp10d(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z12native_exp10d(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z12native_exp10d(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z12native_exp10d(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z11native_log2u2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z11native_log2d(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z11native_log2d(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z11native_log2d(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z11native_log2d(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z11native_log2d(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z11native_log2d(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z11native_log2d(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z11native_log2d(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z12native_log10u2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z12native_log10d(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z12native_log10d(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z12native_log10d(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z12native_log10d(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z12native_log10d(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z12native_log10d(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z12native_log10d(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z12native_log10d(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z12native_recipu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z12native_recipd(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z12native_recipd(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z12native_recipd(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z12native_recipd(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z12native_recipd(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z12native_recipd(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z12native_recipd(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z12native_recipd(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z12native_rsqrtu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z12native_rsqrtd(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z12native_rsqrtd(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z12native_rsqrtd(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z12native_rsqrtd(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z12native_rsqrtd(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z12native_rsqrtd(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z12native_rsqrtd(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z12native_rsqrtd(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z11native_sqrtu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z11native_sqrtd(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z11native_sqrtd(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z11native_sqrtd(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z11native_sqrtd(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z11native_sqrtd(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z11native_sqrtd(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z11native_sqrtd(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z11native_sqrtd(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z10native_sinu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z10native_sind(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z10native_sind(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z10native_sind(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z10native_sind(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z10native_sind(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z10native_sind(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z10native_sind(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z10native_sind(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z10native_cosu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z10native_cosd(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z10native_cosd(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z10native_cosd(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z10native_cosd(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z10native_cosd(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z10native_cosd(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z10native_cosd(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z10native_cosd(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z10native_expu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z10native_expd(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z10native_expd(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z10native_expd(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z10native_expd(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z10native_expd(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z10native_expd(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z10native_expd(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z10native_expd(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z10native_logu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z10native_logd(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z10native_logd(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z10native_logd(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z10native_logd(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z10native_logd(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z10native_logd(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z10native_logd(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z10native_logd(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z10native_tanu2v8d(<8 x double> %p0) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%v1 = call double @_Z10native_tand(double %s1_0)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%v2 = call double @_Z10native_tand(double %s2_0)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%v3 = call double @_Z10native_tand(double %s3_0)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%v4 = call double @_Z10native_tand(double %s4_0)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%v5 = call double @_Z10native_tand(double %s5_0)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%v6 = call double @_Z10native_tand(double %s6_0)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%v7 = call double @_Z10native_tand(double %s7_0)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%v8 = call double @_Z10native_tand(double %s8_0)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z13native_divideu2v8du2v8d(<8 x double> %p0, <8 x double> %p1) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%s1_1 = extractelement <8 x double> %p1, i32 0
	%v1 = call double @_Z13native_dividedd(double %s1_0, double %s1_1)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%s2_1 = extractelement <8 x double> %p1, i32 1
	%v2 = call double @_Z13native_dividedd(double %s2_0, double %s2_1)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%s3_1 = extractelement <8 x double> %p1, i32 2
	%v3 = call double @_Z13native_dividedd(double %s3_0, double %s3_1)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%s4_1 = extractelement <8 x double> %p1, i32 3
	%v4 = call double @_Z13native_dividedd(double %s4_0, double %s4_1)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%s5_1 = extractelement <8 x double> %p1, i32 4
	%v5 = call double @_Z13native_dividedd(double %s5_0, double %s5_1)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%s6_1 = extractelement <8 x double> %p1, i32 5
	%v6 = call double @_Z13native_dividedd(double %s6_0, double %s6_1)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%s7_1 = extractelement <8 x double> %p1, i32 6
	%v7 = call double @_Z13native_dividedd(double %s7_0, double %s7_1)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%s8_1 = extractelement <8 x double> %p1, i32 7
	%v8 = call double @_Z13native_dividedd(double %s8_0, double %s8_1)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z11native_powru2v8du2v8d(<8 x double> %p0, <8 x double> %p1) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%s1_1 = extractelement <8 x double> %p1, i32 0
	%v1 = call double @_Z11native_powrdd(double %s1_0, double %s1_1)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%s2_1 = extractelement <8 x double> %p1, i32 1
	%v2 = call double @_Z11native_powrdd(double %s2_0, double %s2_1)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%s3_1 = extractelement <8 x double> %p1, i32 2
	%v3 = call double @_Z11native_powrdd(double %s3_0, double %s3_1)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%s4_1 = extractelement <8 x double> %p1, i32 3
	%v4 = call double @_Z11native_powrdd(double %s4_0, double %s4_1)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%s5_1 = extractelement <8 x double> %p1, i32 4
	%v5 = call double @_Z11native_powrdd(double %s5_0, double %s5_1)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%s6_1 = extractelement <8 x double> %p1, i32 5
	%v6 = call double @_Z11native_powrdd(double %s6_0, double %s6_1)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%s7_1 = extractelement <8 x double> %p1, i32 6
	%v7 = call double @_Z11native_powrdd(double %s7_0, double %s7_1)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%s8_1 = extractelement <8 x double> %p1, i32 7
	%v8 = call double @_Z11native_powrdd(double %s8_0, double %s8_1)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <8 x double> @_Z12native_ldexpu2v8du2v8i(<8 x double> %p0, <8 x i32> %p1) nounwind {
	%s1_0 = extractelement <8 x double> %p0, i32 0
	%s1_1 = extractelement <8 x i32> %p1, i32 0
	%v1 = call double @_Z12native_ldexpdi(double %s1_0, i32 %s1_1)
	%r1 = insertelement <8 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <8 x double> %p0, i32 1
	%s2_1 = extractelement <8 x i32> %p1, i32 1
	%v2 = call double @_Z12native_ldexpdi(double %s2_0, i32 %s2_1)
	%r2 = insertelement <8 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <8 x double> %p0, i32 2
	%s3_1 = extractelement <8 x i32> %p1, i32 2
	%v3 = call double @_Z12native_ldexpdi(double %s3_0, i32 %s3_1)
	%r3 = insertelement <8 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <8 x double> %p0, i32 3
	%s4_1 = extractelement <8 x i32> %p1, i32 3
	%v4 = call double @_Z12native_ldexpdi(double %s4_0, i32 %s4_1)
	%r4 = insertelement <8 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <8 x double> %p0, i32 4
	%s5_1 = extractelement <8 x i32> %p1, i32 4
	%v5 = call double @_Z12native_ldexpdi(double %s5_0, i32 %s5_1)
	%r5 = insertelement <8 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <8 x double> %p0, i32 5
	%s6_1 = extractelement <8 x i32> %p1, i32 5
	%v6 = call double @_Z12native_ldexpdi(double %s6_0, i32 %s6_1)
	%r6 = insertelement <8 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <8 x double> %p0, i32 6
	%s7_1 = extractelement <8 x i32> %p1, i32 6
	%v7 = call double @_Z12native_ldexpdi(double %s7_0, i32 %s7_1)
	%r7 = insertelement <8 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <8 x double> %p0, i32 7
	%s8_1 = extractelement <8 x i32> %p1, i32 7
	%v8 = call double @_Z12native_ldexpdi(double %s8_0, i32 %s8_1)
	%r8 = insertelement <8 x double> %r7, double %v8, i32 7
	ret <8 x double> %r8
}
define <16 x float> @_Z4acosu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z4acosf(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z4acosf(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z4acosf(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z4acosf(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z4acosf(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z4acosf(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z4acosf(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z4acosf(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z4acosf(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z4acosf(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z4acosf(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z4acosf(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z4acosf(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z4acosf(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z4acosf(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z4acosf(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z5acoshu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z5acoshf(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z5acoshf(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z5acoshf(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z5acoshf(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z5acoshf(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z5acoshf(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z5acoshf(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z5acoshf(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z5acoshf(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z5acoshf(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z5acoshf(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z5acoshf(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z5acoshf(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z5acoshf(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z5acoshf(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z5acoshf(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z6acospiu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z6acospif(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z6acospif(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z6acospif(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z6acospif(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z6acospif(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z6acospif(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z6acospif(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z6acospif(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z6acospif(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z6acospif(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z6acospif(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z6acospif(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z6acospif(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z6acospif(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z6acospif(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z6acospif(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z4asinu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z4asinf(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z4asinf(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z4asinf(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z4asinf(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z4asinf(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z4asinf(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z4asinf(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z4asinf(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z4asinf(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z4asinf(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z4asinf(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z4asinf(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z4asinf(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z4asinf(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z4asinf(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z4asinf(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z5asinhu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z5asinhf(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z5asinhf(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z5asinhf(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z5asinhf(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z5asinhf(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z5asinhf(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z5asinhf(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z5asinhf(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z5asinhf(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z5asinhf(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z5asinhf(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z5asinhf(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z5asinhf(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z5asinhf(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z5asinhf(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z5asinhf(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z6asinpiu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z6asinpif(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z6asinpif(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z6asinpif(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z6asinpif(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z6asinpif(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z6asinpif(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z6asinpif(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z6asinpif(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z6asinpif(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z6asinpif(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z6asinpif(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z6asinpif(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z6asinpif(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z6asinpif(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z6asinpif(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z6asinpif(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z4atanu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z4atanf(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z4atanf(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z4atanf(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z4atanf(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z4atanf(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z4atanf(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z4atanf(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z4atanf(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z4atanf(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z4atanf(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z4atanf(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z4atanf(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z4atanf(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z4atanf(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z4atanf(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z4atanf(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z5atan2u3v16fu3v16f(<16 x float> %p0, <16 x float> %p1) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%s1_1 = extractelement <16 x float> %p1, i32 0
	%v1 = call float @_Z5atan2ff(float %s1_0, float %s1_1)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%s2_1 = extractelement <16 x float> %p1, i32 1
	%v2 = call float @_Z5atan2ff(float %s2_0, float %s2_1)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%s3_1 = extractelement <16 x float> %p1, i32 2
	%v3 = call float @_Z5atan2ff(float %s3_0, float %s3_1)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%s4_1 = extractelement <16 x float> %p1, i32 3
	%v4 = call float @_Z5atan2ff(float %s4_0, float %s4_1)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%s5_1 = extractelement <16 x float> %p1, i32 4
	%v5 = call float @_Z5atan2ff(float %s5_0, float %s5_1)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%s6_1 = extractelement <16 x float> %p1, i32 5
	%v6 = call float @_Z5atan2ff(float %s6_0, float %s6_1)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%s7_1 = extractelement <16 x float> %p1, i32 6
	%v7 = call float @_Z5atan2ff(float %s7_0, float %s7_1)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%s8_1 = extractelement <16 x float> %p1, i32 7
	%v8 = call float @_Z5atan2ff(float %s8_0, float %s8_1)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%s9_1 = extractelement <16 x float> %p1, i32 8
	%v9 = call float @_Z5atan2ff(float %s9_0, float %s9_1)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%s10_1 = extractelement <16 x float> %p1, i32 9
	%v10 = call float @_Z5atan2ff(float %s10_0, float %s10_1)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%s11_1 = extractelement <16 x float> %p1, i32 10
	%v11 = call float @_Z5atan2ff(float %s11_0, float %s11_1)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%s12_1 = extractelement <16 x float> %p1, i32 11
	%v12 = call float @_Z5atan2ff(float %s12_0, float %s12_1)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%s13_1 = extractelement <16 x float> %p1, i32 12
	%v13 = call float @_Z5atan2ff(float %s13_0, float %s13_1)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%s14_1 = extractelement <16 x float> %p1, i32 13
	%v14 = call float @_Z5atan2ff(float %s14_0, float %s14_1)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%s15_1 = extractelement <16 x float> %p1, i32 14
	%v15 = call float @_Z5atan2ff(float %s15_0, float %s15_1)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%s16_1 = extractelement <16 x float> %p1, i32 15
	%v16 = call float @_Z5atan2ff(float %s16_0, float %s16_1)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z5atanhu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z5atanhf(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z5atanhf(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z5atanhf(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z5atanhf(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z5atanhf(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z5atanhf(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z5atanhf(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z5atanhf(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z5atanhf(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z5atanhf(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z5atanhf(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z5atanhf(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z5atanhf(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z5atanhf(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z5atanhf(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z5atanhf(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z6atanpiu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z6atanpif(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z6atanpif(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z6atanpif(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z6atanpif(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z6atanpif(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z6atanpif(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z6atanpif(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z6atanpif(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z6atanpif(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z6atanpif(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z6atanpif(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z6atanpif(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z6atanpif(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z6atanpif(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z6atanpif(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z6atanpif(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z7atan2piu3v16fu3v16f(<16 x float> %p0, <16 x float> %p1) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%s1_1 = extractelement <16 x float> %p1, i32 0
	%v1 = call float @_Z7atan2piff(float %s1_0, float %s1_1)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%s2_1 = extractelement <16 x float> %p1, i32 1
	%v2 = call float @_Z7atan2piff(float %s2_0, float %s2_1)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%s3_1 = extractelement <16 x float> %p1, i32 2
	%v3 = call float @_Z7atan2piff(float %s3_0, float %s3_1)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%s4_1 = extractelement <16 x float> %p1, i32 3
	%v4 = call float @_Z7atan2piff(float %s4_0, float %s4_1)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%s5_1 = extractelement <16 x float> %p1, i32 4
	%v5 = call float @_Z7atan2piff(float %s5_0, float %s5_1)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%s6_1 = extractelement <16 x float> %p1, i32 5
	%v6 = call float @_Z7atan2piff(float %s6_0, float %s6_1)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%s7_1 = extractelement <16 x float> %p1, i32 6
	%v7 = call float @_Z7atan2piff(float %s7_0, float %s7_1)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%s8_1 = extractelement <16 x float> %p1, i32 7
	%v8 = call float @_Z7atan2piff(float %s8_0, float %s8_1)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%s9_1 = extractelement <16 x float> %p1, i32 8
	%v9 = call float @_Z7atan2piff(float %s9_0, float %s9_1)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%s10_1 = extractelement <16 x float> %p1, i32 9
	%v10 = call float @_Z7atan2piff(float %s10_0, float %s10_1)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%s11_1 = extractelement <16 x float> %p1, i32 10
	%v11 = call float @_Z7atan2piff(float %s11_0, float %s11_1)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%s12_1 = extractelement <16 x float> %p1, i32 11
	%v12 = call float @_Z7atan2piff(float %s12_0, float %s12_1)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%s13_1 = extractelement <16 x float> %p1, i32 12
	%v13 = call float @_Z7atan2piff(float %s13_0, float %s13_1)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%s14_1 = extractelement <16 x float> %p1, i32 13
	%v14 = call float @_Z7atan2piff(float %s14_0, float %s14_1)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%s15_1 = extractelement <16 x float> %p1, i32 14
	%v15 = call float @_Z7atan2piff(float %s15_0, float %s15_1)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%s16_1 = extractelement <16 x float> %p1, i32 15
	%v16 = call float @_Z7atan2piff(float %s16_0, float %s16_1)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z4cbrtu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z4cbrtf(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z4cbrtf(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z4cbrtf(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z4cbrtf(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z4cbrtf(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z4cbrtf(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z4cbrtf(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z4cbrtf(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z4cbrtf(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z4cbrtf(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z4cbrtf(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z4cbrtf(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z4cbrtf(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z4cbrtf(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z4cbrtf(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z4cbrtf(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z4ceilu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z4ceilf(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z4ceilf(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z4ceilf(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z4ceilf(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z4ceilf(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z4ceilf(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z4ceilf(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z4ceilf(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z4ceilf(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z4ceilf(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z4ceilf(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z4ceilf(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z4ceilf(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z4ceilf(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z4ceilf(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z4ceilf(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z8copysignu3v16fu3v16f(<16 x float> %p0, <16 x float> %p1) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%s1_1 = extractelement <16 x float> %p1, i32 0
	%v1 = call float @_Z8copysignff(float %s1_0, float %s1_1)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%s2_1 = extractelement <16 x float> %p1, i32 1
	%v2 = call float @_Z8copysignff(float %s2_0, float %s2_1)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%s3_1 = extractelement <16 x float> %p1, i32 2
	%v3 = call float @_Z8copysignff(float %s3_0, float %s3_1)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%s4_1 = extractelement <16 x float> %p1, i32 3
	%v4 = call float @_Z8copysignff(float %s4_0, float %s4_1)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%s5_1 = extractelement <16 x float> %p1, i32 4
	%v5 = call float @_Z8copysignff(float %s5_0, float %s5_1)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%s6_1 = extractelement <16 x float> %p1, i32 5
	%v6 = call float @_Z8copysignff(float %s6_0, float %s6_1)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%s7_1 = extractelement <16 x float> %p1, i32 6
	%v7 = call float @_Z8copysignff(float %s7_0, float %s7_1)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%s8_1 = extractelement <16 x float> %p1, i32 7
	%v8 = call float @_Z8copysignff(float %s8_0, float %s8_1)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%s9_1 = extractelement <16 x float> %p1, i32 8
	%v9 = call float @_Z8copysignff(float %s9_0, float %s9_1)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%s10_1 = extractelement <16 x float> %p1, i32 9
	%v10 = call float @_Z8copysignff(float %s10_0, float %s10_1)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%s11_1 = extractelement <16 x float> %p1, i32 10
	%v11 = call float @_Z8copysignff(float %s11_0, float %s11_1)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%s12_1 = extractelement <16 x float> %p1, i32 11
	%v12 = call float @_Z8copysignff(float %s12_0, float %s12_1)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%s13_1 = extractelement <16 x float> %p1, i32 12
	%v13 = call float @_Z8copysignff(float %s13_0, float %s13_1)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%s14_1 = extractelement <16 x float> %p1, i32 13
	%v14 = call float @_Z8copysignff(float %s14_0, float %s14_1)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%s15_1 = extractelement <16 x float> %p1, i32 14
	%v15 = call float @_Z8copysignff(float %s15_0, float %s15_1)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%s16_1 = extractelement <16 x float> %p1, i32 15
	%v16 = call float @_Z8copysignff(float %s16_0, float %s16_1)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z4coshu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z4coshf(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z4coshf(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z4coshf(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z4coshf(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z4coshf(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z4coshf(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z4coshf(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z4coshf(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z4coshf(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z4coshf(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z4coshf(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z4coshf(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z4coshf(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z4coshf(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z4coshf(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z4coshf(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z5cospiu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z5cospif(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z5cospif(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z5cospif(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z5cospif(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z5cospif(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z5cospif(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z5cospif(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z5cospif(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z5cospif(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z5cospif(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z5cospif(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z5cospif(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z5cospif(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z5cospif(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z5cospif(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z5cospif(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z4erfcu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z4erfcf(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z4erfcf(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z4erfcf(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z4erfcf(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z4erfcf(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z4erfcf(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z4erfcf(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z4erfcf(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z4erfcf(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z4erfcf(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z4erfcf(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z4erfcf(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z4erfcf(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z4erfcf(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z4erfcf(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z4erfcf(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z3erfu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z3erff(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z3erff(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z3erff(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z3erff(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z3erff(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z3erff(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z3erff(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z3erff(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z3erff(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z3erff(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z3erff(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z3erff(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z3erff(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z3erff(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z3erff(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z3erff(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z4exp2u3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z4exp2f(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z4exp2f(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z4exp2f(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z4exp2f(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z4exp2f(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z4exp2f(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z4exp2f(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z4exp2f(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z4exp2f(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z4exp2f(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z4exp2f(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z4exp2f(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z4exp2f(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z4exp2f(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z4exp2f(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z4exp2f(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z5exp10u3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z5exp10f(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z5exp10f(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z5exp10f(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z5exp10f(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z5exp10f(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z5exp10f(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z5exp10f(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z5exp10f(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z5exp10f(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z5exp10f(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z5exp10f(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z5exp10f(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z5exp10f(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z5exp10f(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z5exp10f(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z5exp10f(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z5expm1u3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z5expm1f(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z5expm1f(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z5expm1f(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z5expm1f(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z5expm1f(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z5expm1f(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z5expm1f(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z5expm1f(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z5expm1f(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z5expm1f(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z5expm1f(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z5expm1f(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z5expm1f(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z5expm1f(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z5expm1f(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z5expm1f(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z4fdimu3v16fu3v16f(<16 x float> %p0, <16 x float> %p1) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%s1_1 = extractelement <16 x float> %p1, i32 0
	%v1 = call float @_Z4fdimff(float %s1_0, float %s1_1)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%s2_1 = extractelement <16 x float> %p1, i32 1
	%v2 = call float @_Z4fdimff(float %s2_0, float %s2_1)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%s3_1 = extractelement <16 x float> %p1, i32 2
	%v3 = call float @_Z4fdimff(float %s3_0, float %s3_1)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%s4_1 = extractelement <16 x float> %p1, i32 3
	%v4 = call float @_Z4fdimff(float %s4_0, float %s4_1)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%s5_1 = extractelement <16 x float> %p1, i32 4
	%v5 = call float @_Z4fdimff(float %s5_0, float %s5_1)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%s6_1 = extractelement <16 x float> %p1, i32 5
	%v6 = call float @_Z4fdimff(float %s6_0, float %s6_1)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%s7_1 = extractelement <16 x float> %p1, i32 6
	%v7 = call float @_Z4fdimff(float %s7_0, float %s7_1)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%s8_1 = extractelement <16 x float> %p1, i32 7
	%v8 = call float @_Z4fdimff(float %s8_0, float %s8_1)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%s9_1 = extractelement <16 x float> %p1, i32 8
	%v9 = call float @_Z4fdimff(float %s9_0, float %s9_1)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%s10_1 = extractelement <16 x float> %p1, i32 9
	%v10 = call float @_Z4fdimff(float %s10_0, float %s10_1)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%s11_1 = extractelement <16 x float> %p1, i32 10
	%v11 = call float @_Z4fdimff(float %s11_0, float %s11_1)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%s12_1 = extractelement <16 x float> %p1, i32 11
	%v12 = call float @_Z4fdimff(float %s12_0, float %s12_1)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%s13_1 = extractelement <16 x float> %p1, i32 12
	%v13 = call float @_Z4fdimff(float %s13_0, float %s13_1)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%s14_1 = extractelement <16 x float> %p1, i32 13
	%v14 = call float @_Z4fdimff(float %s14_0, float %s14_1)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%s15_1 = extractelement <16 x float> %p1, i32 14
	%v15 = call float @_Z4fdimff(float %s15_0, float %s15_1)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%s16_1 = extractelement <16 x float> %p1, i32 15
	%v16 = call float @_Z4fdimff(float %s16_0, float %s16_1)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z4fmaxu3v16fu3v16f(<16 x float> %p0, <16 x float> %p1) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%s1_1 = extractelement <16 x float> %p1, i32 0
	%v1 = call float @_Z4fmaxff(float %s1_0, float %s1_1)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%s2_1 = extractelement <16 x float> %p1, i32 1
	%v2 = call float @_Z4fmaxff(float %s2_0, float %s2_1)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%s3_1 = extractelement <16 x float> %p1, i32 2
	%v3 = call float @_Z4fmaxff(float %s3_0, float %s3_1)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%s4_1 = extractelement <16 x float> %p1, i32 3
	%v4 = call float @_Z4fmaxff(float %s4_0, float %s4_1)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%s5_1 = extractelement <16 x float> %p1, i32 4
	%v5 = call float @_Z4fmaxff(float %s5_0, float %s5_1)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%s6_1 = extractelement <16 x float> %p1, i32 5
	%v6 = call float @_Z4fmaxff(float %s6_0, float %s6_1)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%s7_1 = extractelement <16 x float> %p1, i32 6
	%v7 = call float @_Z4fmaxff(float %s7_0, float %s7_1)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%s8_1 = extractelement <16 x float> %p1, i32 7
	%v8 = call float @_Z4fmaxff(float %s8_0, float %s8_1)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%s9_1 = extractelement <16 x float> %p1, i32 8
	%v9 = call float @_Z4fmaxff(float %s9_0, float %s9_1)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%s10_1 = extractelement <16 x float> %p1, i32 9
	%v10 = call float @_Z4fmaxff(float %s10_0, float %s10_1)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%s11_1 = extractelement <16 x float> %p1, i32 10
	%v11 = call float @_Z4fmaxff(float %s11_0, float %s11_1)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%s12_1 = extractelement <16 x float> %p1, i32 11
	%v12 = call float @_Z4fmaxff(float %s12_0, float %s12_1)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%s13_1 = extractelement <16 x float> %p1, i32 12
	%v13 = call float @_Z4fmaxff(float %s13_0, float %s13_1)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%s14_1 = extractelement <16 x float> %p1, i32 13
	%v14 = call float @_Z4fmaxff(float %s14_0, float %s14_1)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%s15_1 = extractelement <16 x float> %p1, i32 14
	%v15 = call float @_Z4fmaxff(float %s15_0, float %s15_1)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%s16_1 = extractelement <16 x float> %p1, i32 15
	%v16 = call float @_Z4fmaxff(float %s16_0, float %s16_1)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z4fminu3v16fu3v16f(<16 x float> %p0, <16 x float> %p1) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%s1_1 = extractelement <16 x float> %p1, i32 0
	%v1 = call float @_Z4fminff(float %s1_0, float %s1_1)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%s2_1 = extractelement <16 x float> %p1, i32 1
	%v2 = call float @_Z4fminff(float %s2_0, float %s2_1)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%s3_1 = extractelement <16 x float> %p1, i32 2
	%v3 = call float @_Z4fminff(float %s3_0, float %s3_1)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%s4_1 = extractelement <16 x float> %p1, i32 3
	%v4 = call float @_Z4fminff(float %s4_0, float %s4_1)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%s5_1 = extractelement <16 x float> %p1, i32 4
	%v5 = call float @_Z4fminff(float %s5_0, float %s5_1)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%s6_1 = extractelement <16 x float> %p1, i32 5
	%v6 = call float @_Z4fminff(float %s6_0, float %s6_1)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%s7_1 = extractelement <16 x float> %p1, i32 6
	%v7 = call float @_Z4fminff(float %s7_0, float %s7_1)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%s8_1 = extractelement <16 x float> %p1, i32 7
	%v8 = call float @_Z4fminff(float %s8_0, float %s8_1)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%s9_1 = extractelement <16 x float> %p1, i32 8
	%v9 = call float @_Z4fminff(float %s9_0, float %s9_1)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%s10_1 = extractelement <16 x float> %p1, i32 9
	%v10 = call float @_Z4fminff(float %s10_0, float %s10_1)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%s11_1 = extractelement <16 x float> %p1, i32 10
	%v11 = call float @_Z4fminff(float %s11_0, float %s11_1)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%s12_1 = extractelement <16 x float> %p1, i32 11
	%v12 = call float @_Z4fminff(float %s12_0, float %s12_1)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%s13_1 = extractelement <16 x float> %p1, i32 12
	%v13 = call float @_Z4fminff(float %s13_0, float %s13_1)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%s14_1 = extractelement <16 x float> %p1, i32 13
	%v14 = call float @_Z4fminff(float %s14_0, float %s14_1)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%s15_1 = extractelement <16 x float> %p1, i32 14
	%v15 = call float @_Z4fminff(float %s15_0, float %s15_1)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%s16_1 = extractelement <16 x float> %p1, i32 15
	%v16 = call float @_Z4fminff(float %s16_0, float %s16_1)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z4fmodu3v16fu3v16f(<16 x float> %p0, <16 x float> %p1) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%s1_1 = extractelement <16 x float> %p1, i32 0
	%v1 = call float @_Z4fmodff(float %s1_0, float %s1_1)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%s2_1 = extractelement <16 x float> %p1, i32 1
	%v2 = call float @_Z4fmodff(float %s2_0, float %s2_1)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%s3_1 = extractelement <16 x float> %p1, i32 2
	%v3 = call float @_Z4fmodff(float %s3_0, float %s3_1)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%s4_1 = extractelement <16 x float> %p1, i32 3
	%v4 = call float @_Z4fmodff(float %s4_0, float %s4_1)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%s5_1 = extractelement <16 x float> %p1, i32 4
	%v5 = call float @_Z4fmodff(float %s5_0, float %s5_1)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%s6_1 = extractelement <16 x float> %p1, i32 5
	%v6 = call float @_Z4fmodff(float %s6_0, float %s6_1)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%s7_1 = extractelement <16 x float> %p1, i32 6
	%v7 = call float @_Z4fmodff(float %s7_0, float %s7_1)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%s8_1 = extractelement <16 x float> %p1, i32 7
	%v8 = call float @_Z4fmodff(float %s8_0, float %s8_1)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%s9_1 = extractelement <16 x float> %p1, i32 8
	%v9 = call float @_Z4fmodff(float %s9_0, float %s9_1)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%s10_1 = extractelement <16 x float> %p1, i32 9
	%v10 = call float @_Z4fmodff(float %s10_0, float %s10_1)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%s11_1 = extractelement <16 x float> %p1, i32 10
	%v11 = call float @_Z4fmodff(float %s11_0, float %s11_1)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%s12_1 = extractelement <16 x float> %p1, i32 11
	%v12 = call float @_Z4fmodff(float %s12_0, float %s12_1)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%s13_1 = extractelement <16 x float> %p1, i32 12
	%v13 = call float @_Z4fmodff(float %s13_0, float %s13_1)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%s14_1 = extractelement <16 x float> %p1, i32 13
	%v14 = call float @_Z4fmodff(float %s14_0, float %s14_1)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%s15_1 = extractelement <16 x float> %p1, i32 14
	%v15 = call float @_Z4fmodff(float %s15_0, float %s15_1)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%s16_1 = extractelement <16 x float> %p1, i32 15
	%v16 = call float @_Z4fmodff(float %s16_0, float %s16_1)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z5fractu3v16fPu3v16f(<16 x float> %p0, <16 x float>* %p1) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%s1_1 = getelementptr <16 x float>* %p1, i32 0, i32 0
	%v1 = call float @_Z5fractfPf(float %s1_0, float* %s1_1)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%s2_1 = getelementptr <16 x float>* %p1, i32 0, i32 1
	%v2 = call float @_Z5fractfPf(float %s2_0, float* %s2_1)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%s3_1 = getelementptr <16 x float>* %p1, i32 0, i32 2
	%v3 = call float @_Z5fractfPf(float %s3_0, float* %s3_1)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%s4_1 = getelementptr <16 x float>* %p1, i32 0, i32 3
	%v4 = call float @_Z5fractfPf(float %s4_0, float* %s4_1)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%s5_1 = getelementptr <16 x float>* %p1, i32 0, i32 4
	%v5 = call float @_Z5fractfPf(float %s5_0, float* %s5_1)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%s6_1 = getelementptr <16 x float>* %p1, i32 0, i32 5
	%v6 = call float @_Z5fractfPf(float %s6_0, float* %s6_1)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%s7_1 = getelementptr <16 x float>* %p1, i32 0, i32 6
	%v7 = call float @_Z5fractfPf(float %s7_0, float* %s7_1)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%s8_1 = getelementptr <16 x float>* %p1, i32 0, i32 7
	%v8 = call float @_Z5fractfPf(float %s8_0, float* %s8_1)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%s9_1 = getelementptr <16 x float>* %p1, i32 0, i32 8
	%v9 = call float @_Z5fractfPf(float %s9_0, float* %s9_1)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%s10_1 = getelementptr <16 x float>* %p1, i32 0, i32 9
	%v10 = call float @_Z5fractfPf(float %s10_0, float* %s10_1)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%s11_1 = getelementptr <16 x float>* %p1, i32 0, i32 10
	%v11 = call float @_Z5fractfPf(float %s11_0, float* %s11_1)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%s12_1 = getelementptr <16 x float>* %p1, i32 0, i32 11
	%v12 = call float @_Z5fractfPf(float %s12_0, float* %s12_1)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%s13_1 = getelementptr <16 x float>* %p1, i32 0, i32 12
	%v13 = call float @_Z5fractfPf(float %s13_0, float* %s13_1)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%s14_1 = getelementptr <16 x float>* %p1, i32 0, i32 13
	%v14 = call float @_Z5fractfPf(float %s14_0, float* %s14_1)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%s15_1 = getelementptr <16 x float>* %p1, i32 0, i32 14
	%v15 = call float @_Z5fractfPf(float %s15_0, float* %s15_1)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%s16_1 = getelementptr <16 x float>* %p1, i32 0, i32 15
	%v16 = call float @_Z5fractfPf(float %s16_0, float* %s16_1)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z5frexpu3v16fPu3v16i(<16 x float> %p0, <16 x i32>* %p1) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%s1_1 = getelementptr <16 x i32>* %p1, i32 0, i32 0
	%v1 = call float @_Z5frexpfPi(float %s1_0, i32* %s1_1)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%s2_1 = getelementptr <16 x i32>* %p1, i32 0, i32 1
	%v2 = call float @_Z5frexpfPi(float %s2_0, i32* %s2_1)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%s3_1 = getelementptr <16 x i32>* %p1, i32 0, i32 2
	%v3 = call float @_Z5frexpfPi(float %s3_0, i32* %s3_1)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%s4_1 = getelementptr <16 x i32>* %p1, i32 0, i32 3
	%v4 = call float @_Z5frexpfPi(float %s4_0, i32* %s4_1)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%s5_1 = getelementptr <16 x i32>* %p1, i32 0, i32 4
	%v5 = call float @_Z5frexpfPi(float %s5_0, i32* %s5_1)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%s6_1 = getelementptr <16 x i32>* %p1, i32 0, i32 5
	%v6 = call float @_Z5frexpfPi(float %s6_0, i32* %s6_1)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%s7_1 = getelementptr <16 x i32>* %p1, i32 0, i32 6
	%v7 = call float @_Z5frexpfPi(float %s7_0, i32* %s7_1)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%s8_1 = getelementptr <16 x i32>* %p1, i32 0, i32 7
	%v8 = call float @_Z5frexpfPi(float %s8_0, i32* %s8_1)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%s9_1 = getelementptr <16 x i32>* %p1, i32 0, i32 8
	%v9 = call float @_Z5frexpfPi(float %s9_0, i32* %s9_1)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%s10_1 = getelementptr <16 x i32>* %p1, i32 0, i32 9
	%v10 = call float @_Z5frexpfPi(float %s10_0, i32* %s10_1)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%s11_1 = getelementptr <16 x i32>* %p1, i32 0, i32 10
	%v11 = call float @_Z5frexpfPi(float %s11_0, i32* %s11_1)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%s12_1 = getelementptr <16 x i32>* %p1, i32 0, i32 11
	%v12 = call float @_Z5frexpfPi(float %s12_0, i32* %s12_1)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%s13_1 = getelementptr <16 x i32>* %p1, i32 0, i32 12
	%v13 = call float @_Z5frexpfPi(float %s13_0, i32* %s13_1)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%s14_1 = getelementptr <16 x i32>* %p1, i32 0, i32 13
	%v14 = call float @_Z5frexpfPi(float %s14_0, i32* %s14_1)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%s15_1 = getelementptr <16 x i32>* %p1, i32 0, i32 14
	%v15 = call float @_Z5frexpfPi(float %s15_0, i32* %s15_1)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%s16_1 = getelementptr <16 x i32>* %p1, i32 0, i32 15
	%v16 = call float @_Z5frexpfPi(float %s16_0, i32* %s16_1)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z5hypotu3v16fu3v16f(<16 x float> %p0, <16 x float> %p1) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%s1_1 = extractelement <16 x float> %p1, i32 0
	%v1 = call float @_Z5hypotff(float %s1_0, float %s1_1)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%s2_1 = extractelement <16 x float> %p1, i32 1
	%v2 = call float @_Z5hypotff(float %s2_0, float %s2_1)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%s3_1 = extractelement <16 x float> %p1, i32 2
	%v3 = call float @_Z5hypotff(float %s3_0, float %s3_1)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%s4_1 = extractelement <16 x float> %p1, i32 3
	%v4 = call float @_Z5hypotff(float %s4_0, float %s4_1)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%s5_1 = extractelement <16 x float> %p1, i32 4
	%v5 = call float @_Z5hypotff(float %s5_0, float %s5_1)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%s6_1 = extractelement <16 x float> %p1, i32 5
	%v6 = call float @_Z5hypotff(float %s6_0, float %s6_1)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%s7_1 = extractelement <16 x float> %p1, i32 6
	%v7 = call float @_Z5hypotff(float %s7_0, float %s7_1)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%s8_1 = extractelement <16 x float> %p1, i32 7
	%v8 = call float @_Z5hypotff(float %s8_0, float %s8_1)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%s9_1 = extractelement <16 x float> %p1, i32 8
	%v9 = call float @_Z5hypotff(float %s9_0, float %s9_1)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%s10_1 = extractelement <16 x float> %p1, i32 9
	%v10 = call float @_Z5hypotff(float %s10_0, float %s10_1)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%s11_1 = extractelement <16 x float> %p1, i32 10
	%v11 = call float @_Z5hypotff(float %s11_0, float %s11_1)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%s12_1 = extractelement <16 x float> %p1, i32 11
	%v12 = call float @_Z5hypotff(float %s12_0, float %s12_1)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%s13_1 = extractelement <16 x float> %p1, i32 12
	%v13 = call float @_Z5hypotff(float %s13_0, float %s13_1)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%s14_1 = extractelement <16 x float> %p1, i32 13
	%v14 = call float @_Z5hypotff(float %s14_0, float %s14_1)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%s15_1 = extractelement <16 x float> %p1, i32 14
	%v15 = call float @_Z5hypotff(float %s15_0, float %s15_1)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%s16_1 = extractelement <16 x float> %p1, i32 15
	%v16 = call float @_Z5hypotff(float %s16_0, float %s16_1)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z5ldexpu3v16fu3v16i(<16 x float> %p0, <16 x i32> %p1) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%s1_1 = extractelement <16 x i32> %p1, i32 0
	%v1 = call float @_Z5ldexpfi(float %s1_0, i32 %s1_1)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%s2_1 = extractelement <16 x i32> %p1, i32 1
	%v2 = call float @_Z5ldexpfi(float %s2_0, i32 %s2_1)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%s3_1 = extractelement <16 x i32> %p1, i32 2
	%v3 = call float @_Z5ldexpfi(float %s3_0, i32 %s3_1)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%s4_1 = extractelement <16 x i32> %p1, i32 3
	%v4 = call float @_Z5ldexpfi(float %s4_0, i32 %s4_1)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%s5_1 = extractelement <16 x i32> %p1, i32 4
	%v5 = call float @_Z5ldexpfi(float %s5_0, i32 %s5_1)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%s6_1 = extractelement <16 x i32> %p1, i32 5
	%v6 = call float @_Z5ldexpfi(float %s6_0, i32 %s6_1)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%s7_1 = extractelement <16 x i32> %p1, i32 6
	%v7 = call float @_Z5ldexpfi(float %s7_0, i32 %s7_1)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%s8_1 = extractelement <16 x i32> %p1, i32 7
	%v8 = call float @_Z5ldexpfi(float %s8_0, i32 %s8_1)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%s9_1 = extractelement <16 x i32> %p1, i32 8
	%v9 = call float @_Z5ldexpfi(float %s9_0, i32 %s9_1)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%s10_1 = extractelement <16 x i32> %p1, i32 9
	%v10 = call float @_Z5ldexpfi(float %s10_0, i32 %s10_1)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%s11_1 = extractelement <16 x i32> %p1, i32 10
	%v11 = call float @_Z5ldexpfi(float %s11_0, i32 %s11_1)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%s12_1 = extractelement <16 x i32> %p1, i32 11
	%v12 = call float @_Z5ldexpfi(float %s12_0, i32 %s12_1)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%s13_1 = extractelement <16 x i32> %p1, i32 12
	%v13 = call float @_Z5ldexpfi(float %s13_0, i32 %s13_1)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%s14_1 = extractelement <16 x i32> %p1, i32 13
	%v14 = call float @_Z5ldexpfi(float %s14_0, i32 %s14_1)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%s15_1 = extractelement <16 x i32> %p1, i32 14
	%v15 = call float @_Z5ldexpfi(float %s15_0, i32 %s15_1)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%s16_1 = extractelement <16 x i32> %p1, i32 15
	%v16 = call float @_Z5ldexpfi(float %s16_0, i32 %s16_1)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z6lgammau3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z6lgammaf(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z6lgammaf(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z6lgammaf(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z6lgammaf(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z6lgammaf(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z6lgammaf(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z6lgammaf(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z6lgammaf(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z6lgammaf(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z6lgammaf(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z6lgammaf(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z6lgammaf(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z6lgammaf(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z6lgammaf(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z6lgammaf(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z6lgammaf(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z8lgamma_ru3v16fPu3v16i(<16 x float> %p0, <16 x i32>* %p1) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%s1_1 = getelementptr <16 x i32>* %p1, i32 0, i32 0
	%v1 = call float @_Z8lgamma_rfPi(float %s1_0, i32* %s1_1)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%s2_1 = getelementptr <16 x i32>* %p1, i32 0, i32 1
	%v2 = call float @_Z8lgamma_rfPi(float %s2_0, i32* %s2_1)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%s3_1 = getelementptr <16 x i32>* %p1, i32 0, i32 2
	%v3 = call float @_Z8lgamma_rfPi(float %s3_0, i32* %s3_1)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%s4_1 = getelementptr <16 x i32>* %p1, i32 0, i32 3
	%v4 = call float @_Z8lgamma_rfPi(float %s4_0, i32* %s4_1)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%s5_1 = getelementptr <16 x i32>* %p1, i32 0, i32 4
	%v5 = call float @_Z8lgamma_rfPi(float %s5_0, i32* %s5_1)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%s6_1 = getelementptr <16 x i32>* %p1, i32 0, i32 5
	%v6 = call float @_Z8lgamma_rfPi(float %s6_0, i32* %s6_1)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%s7_1 = getelementptr <16 x i32>* %p1, i32 0, i32 6
	%v7 = call float @_Z8lgamma_rfPi(float %s7_0, i32* %s7_1)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%s8_1 = getelementptr <16 x i32>* %p1, i32 0, i32 7
	%v8 = call float @_Z8lgamma_rfPi(float %s8_0, i32* %s8_1)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%s9_1 = getelementptr <16 x i32>* %p1, i32 0, i32 8
	%v9 = call float @_Z8lgamma_rfPi(float %s9_0, i32* %s9_1)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%s10_1 = getelementptr <16 x i32>* %p1, i32 0, i32 9
	%v10 = call float @_Z8lgamma_rfPi(float %s10_0, i32* %s10_1)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%s11_1 = getelementptr <16 x i32>* %p1, i32 0, i32 10
	%v11 = call float @_Z8lgamma_rfPi(float %s11_0, i32* %s11_1)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%s12_1 = getelementptr <16 x i32>* %p1, i32 0, i32 11
	%v12 = call float @_Z8lgamma_rfPi(float %s12_0, i32* %s12_1)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%s13_1 = getelementptr <16 x i32>* %p1, i32 0, i32 12
	%v13 = call float @_Z8lgamma_rfPi(float %s13_0, i32* %s13_1)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%s14_1 = getelementptr <16 x i32>* %p1, i32 0, i32 13
	%v14 = call float @_Z8lgamma_rfPi(float %s14_0, i32* %s14_1)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%s15_1 = getelementptr <16 x i32>* %p1, i32 0, i32 14
	%v15 = call float @_Z8lgamma_rfPi(float %s15_0, i32* %s15_1)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%s16_1 = getelementptr <16 x i32>* %p1, i32 0, i32 15
	%v16 = call float @_Z8lgamma_rfPi(float %s16_0, i32* %s16_1)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z4log2u3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z4log2f(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z4log2f(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z4log2f(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z4log2f(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z4log2f(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z4log2f(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z4log2f(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z4log2f(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z4log2f(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z4log2f(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z4log2f(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z4log2f(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z4log2f(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z4log2f(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z4log2f(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z4log2f(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z5log10u3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z5log10f(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z5log10f(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z5log10f(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z5log10f(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z5log10f(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z5log10f(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z5log10f(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z5log10f(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z5log10f(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z5log10f(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z5log10f(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z5log10f(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z5log10f(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z5log10f(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z5log10f(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z5log10f(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z5log1pu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z5log1pf(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z5log1pf(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z5log1pf(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z5log1pf(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z5log1pf(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z5log1pf(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z5log1pf(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z5log1pf(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z5log1pf(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z5log1pf(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z5log1pf(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z5log1pf(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z5log1pf(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z5log1pf(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z5log1pf(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z5log1pf(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z4logbu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z4logbf(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z4logbf(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z4logbf(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z4logbf(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z4logbf(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z4logbf(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z4logbf(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z4logbf(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z4logbf(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z4logbf(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z4logbf(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z4logbf(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z4logbf(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z4logbf(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z4logbf(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z4logbf(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z3madu3v16fu3v16fu3v16f(<16 x float> %p0, <16 x float> %p1, <16 x float> %p2) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%s1_1 = extractelement <16 x float> %p1, i32 0
	%s1_2 = extractelement <16 x float> %p2, i32 0
	%v1 = call float @_Z3madfff(float %s1_0, float %s1_1, float %s1_2)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%s2_1 = extractelement <16 x float> %p1, i32 1
	%s2_2 = extractelement <16 x float> %p2, i32 1
	%v2 = call float @_Z3madfff(float %s2_0, float %s2_1, float %s2_2)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%s3_1 = extractelement <16 x float> %p1, i32 2
	%s3_2 = extractelement <16 x float> %p2, i32 2
	%v3 = call float @_Z3madfff(float %s3_0, float %s3_1, float %s3_2)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%s4_1 = extractelement <16 x float> %p1, i32 3
	%s4_2 = extractelement <16 x float> %p2, i32 3
	%v4 = call float @_Z3madfff(float %s4_0, float %s4_1, float %s4_2)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%s5_1 = extractelement <16 x float> %p1, i32 4
	%s5_2 = extractelement <16 x float> %p2, i32 4
	%v5 = call float @_Z3madfff(float %s5_0, float %s5_1, float %s5_2)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%s6_1 = extractelement <16 x float> %p1, i32 5
	%s6_2 = extractelement <16 x float> %p2, i32 5
	%v6 = call float @_Z3madfff(float %s6_0, float %s6_1, float %s6_2)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%s7_1 = extractelement <16 x float> %p1, i32 6
	%s7_2 = extractelement <16 x float> %p2, i32 6
	%v7 = call float @_Z3madfff(float %s7_0, float %s7_1, float %s7_2)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%s8_1 = extractelement <16 x float> %p1, i32 7
	%s8_2 = extractelement <16 x float> %p2, i32 7
	%v8 = call float @_Z3madfff(float %s8_0, float %s8_1, float %s8_2)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%s9_1 = extractelement <16 x float> %p1, i32 8
	%s9_2 = extractelement <16 x float> %p2, i32 8
	%v9 = call float @_Z3madfff(float %s9_0, float %s9_1, float %s9_2)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%s10_1 = extractelement <16 x float> %p1, i32 9
	%s10_2 = extractelement <16 x float> %p2, i32 9
	%v10 = call float @_Z3madfff(float %s10_0, float %s10_1, float %s10_2)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%s11_1 = extractelement <16 x float> %p1, i32 10
	%s11_2 = extractelement <16 x float> %p2, i32 10
	%v11 = call float @_Z3madfff(float %s11_0, float %s11_1, float %s11_2)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%s12_1 = extractelement <16 x float> %p1, i32 11
	%s12_2 = extractelement <16 x float> %p2, i32 11
	%v12 = call float @_Z3madfff(float %s12_0, float %s12_1, float %s12_2)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%s13_1 = extractelement <16 x float> %p1, i32 12
	%s13_2 = extractelement <16 x float> %p2, i32 12
	%v13 = call float @_Z3madfff(float %s13_0, float %s13_1, float %s13_2)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%s14_1 = extractelement <16 x float> %p1, i32 13
	%s14_2 = extractelement <16 x float> %p2, i32 13
	%v14 = call float @_Z3madfff(float %s14_0, float %s14_1, float %s14_2)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%s15_1 = extractelement <16 x float> %p1, i32 14
	%s15_2 = extractelement <16 x float> %p2, i32 14
	%v15 = call float @_Z3madfff(float %s15_0, float %s15_1, float %s15_2)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%s16_1 = extractelement <16 x float> %p1, i32 15
	%s16_2 = extractelement <16 x float> %p2, i32 15
	%v16 = call float @_Z3madfff(float %s16_0, float %s16_1, float %s16_2)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z6maxmagu3v16fu3v16f(<16 x float> %p0, <16 x float> %p1) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%s1_1 = extractelement <16 x float> %p1, i32 0
	%v1 = call float @_Z6maxmagff(float %s1_0, float %s1_1)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%s2_1 = extractelement <16 x float> %p1, i32 1
	%v2 = call float @_Z6maxmagff(float %s2_0, float %s2_1)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%s3_1 = extractelement <16 x float> %p1, i32 2
	%v3 = call float @_Z6maxmagff(float %s3_0, float %s3_1)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%s4_1 = extractelement <16 x float> %p1, i32 3
	%v4 = call float @_Z6maxmagff(float %s4_0, float %s4_1)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%s5_1 = extractelement <16 x float> %p1, i32 4
	%v5 = call float @_Z6maxmagff(float %s5_0, float %s5_1)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%s6_1 = extractelement <16 x float> %p1, i32 5
	%v6 = call float @_Z6maxmagff(float %s6_0, float %s6_1)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%s7_1 = extractelement <16 x float> %p1, i32 6
	%v7 = call float @_Z6maxmagff(float %s7_0, float %s7_1)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%s8_1 = extractelement <16 x float> %p1, i32 7
	%v8 = call float @_Z6maxmagff(float %s8_0, float %s8_1)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%s9_1 = extractelement <16 x float> %p1, i32 8
	%v9 = call float @_Z6maxmagff(float %s9_0, float %s9_1)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%s10_1 = extractelement <16 x float> %p1, i32 9
	%v10 = call float @_Z6maxmagff(float %s10_0, float %s10_1)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%s11_1 = extractelement <16 x float> %p1, i32 10
	%v11 = call float @_Z6maxmagff(float %s11_0, float %s11_1)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%s12_1 = extractelement <16 x float> %p1, i32 11
	%v12 = call float @_Z6maxmagff(float %s12_0, float %s12_1)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%s13_1 = extractelement <16 x float> %p1, i32 12
	%v13 = call float @_Z6maxmagff(float %s13_0, float %s13_1)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%s14_1 = extractelement <16 x float> %p1, i32 13
	%v14 = call float @_Z6maxmagff(float %s14_0, float %s14_1)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%s15_1 = extractelement <16 x float> %p1, i32 14
	%v15 = call float @_Z6maxmagff(float %s15_0, float %s15_1)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%s16_1 = extractelement <16 x float> %p1, i32 15
	%v16 = call float @_Z6maxmagff(float %s16_0, float %s16_1)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z6minmagu3v16fu3v16f(<16 x float> %p0, <16 x float> %p1) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%s1_1 = extractelement <16 x float> %p1, i32 0
	%v1 = call float @_Z6minmagff(float %s1_0, float %s1_1)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%s2_1 = extractelement <16 x float> %p1, i32 1
	%v2 = call float @_Z6minmagff(float %s2_0, float %s2_1)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%s3_1 = extractelement <16 x float> %p1, i32 2
	%v3 = call float @_Z6minmagff(float %s3_0, float %s3_1)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%s4_1 = extractelement <16 x float> %p1, i32 3
	%v4 = call float @_Z6minmagff(float %s4_0, float %s4_1)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%s5_1 = extractelement <16 x float> %p1, i32 4
	%v5 = call float @_Z6minmagff(float %s5_0, float %s5_1)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%s6_1 = extractelement <16 x float> %p1, i32 5
	%v6 = call float @_Z6minmagff(float %s6_0, float %s6_1)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%s7_1 = extractelement <16 x float> %p1, i32 6
	%v7 = call float @_Z6minmagff(float %s7_0, float %s7_1)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%s8_1 = extractelement <16 x float> %p1, i32 7
	%v8 = call float @_Z6minmagff(float %s8_0, float %s8_1)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%s9_1 = extractelement <16 x float> %p1, i32 8
	%v9 = call float @_Z6minmagff(float %s9_0, float %s9_1)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%s10_1 = extractelement <16 x float> %p1, i32 9
	%v10 = call float @_Z6minmagff(float %s10_0, float %s10_1)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%s11_1 = extractelement <16 x float> %p1, i32 10
	%v11 = call float @_Z6minmagff(float %s11_0, float %s11_1)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%s12_1 = extractelement <16 x float> %p1, i32 11
	%v12 = call float @_Z6minmagff(float %s12_0, float %s12_1)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%s13_1 = extractelement <16 x float> %p1, i32 12
	%v13 = call float @_Z6minmagff(float %s13_0, float %s13_1)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%s14_1 = extractelement <16 x float> %p1, i32 13
	%v14 = call float @_Z6minmagff(float %s14_0, float %s14_1)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%s15_1 = extractelement <16 x float> %p1, i32 14
	%v15 = call float @_Z6minmagff(float %s15_0, float %s15_1)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%s16_1 = extractelement <16 x float> %p1, i32 15
	%v16 = call float @_Z6minmagff(float %s16_0, float %s16_1)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z4modfu3v16fPu3v16f(<16 x float> %p0, <16 x float>* %p1) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%s1_1 = getelementptr <16 x float>* %p1, i32 0, i32 0
	%v1 = call float @_Z4modffPf(float %s1_0, float* %s1_1)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%s2_1 = getelementptr <16 x float>* %p1, i32 0, i32 1
	%v2 = call float @_Z4modffPf(float %s2_0, float* %s2_1)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%s3_1 = getelementptr <16 x float>* %p1, i32 0, i32 2
	%v3 = call float @_Z4modffPf(float %s3_0, float* %s3_1)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%s4_1 = getelementptr <16 x float>* %p1, i32 0, i32 3
	%v4 = call float @_Z4modffPf(float %s4_0, float* %s4_1)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%s5_1 = getelementptr <16 x float>* %p1, i32 0, i32 4
	%v5 = call float @_Z4modffPf(float %s5_0, float* %s5_1)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%s6_1 = getelementptr <16 x float>* %p1, i32 0, i32 5
	%v6 = call float @_Z4modffPf(float %s6_0, float* %s6_1)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%s7_1 = getelementptr <16 x float>* %p1, i32 0, i32 6
	%v7 = call float @_Z4modffPf(float %s7_0, float* %s7_1)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%s8_1 = getelementptr <16 x float>* %p1, i32 0, i32 7
	%v8 = call float @_Z4modffPf(float %s8_0, float* %s8_1)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%s9_1 = getelementptr <16 x float>* %p1, i32 0, i32 8
	%v9 = call float @_Z4modffPf(float %s9_0, float* %s9_1)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%s10_1 = getelementptr <16 x float>* %p1, i32 0, i32 9
	%v10 = call float @_Z4modffPf(float %s10_0, float* %s10_1)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%s11_1 = getelementptr <16 x float>* %p1, i32 0, i32 10
	%v11 = call float @_Z4modffPf(float %s11_0, float* %s11_1)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%s12_1 = getelementptr <16 x float>* %p1, i32 0, i32 11
	%v12 = call float @_Z4modffPf(float %s12_0, float* %s12_1)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%s13_1 = getelementptr <16 x float>* %p1, i32 0, i32 12
	%v13 = call float @_Z4modffPf(float %s13_0, float* %s13_1)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%s14_1 = getelementptr <16 x float>* %p1, i32 0, i32 13
	%v14 = call float @_Z4modffPf(float %s14_0, float* %s14_1)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%s15_1 = getelementptr <16 x float>* %p1, i32 0, i32 14
	%v15 = call float @_Z4modffPf(float %s15_0, float* %s15_1)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%s16_1 = getelementptr <16 x float>* %p1, i32 0, i32 15
	%v16 = call float @_Z4modffPf(float %s16_0, float* %s16_1)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z9nextafteru3v16fu3v16f(<16 x float> %p0, <16 x float> %p1) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%s1_1 = extractelement <16 x float> %p1, i32 0
	%v1 = call float @_Z9nextafterff(float %s1_0, float %s1_1)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%s2_1 = extractelement <16 x float> %p1, i32 1
	%v2 = call float @_Z9nextafterff(float %s2_0, float %s2_1)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%s3_1 = extractelement <16 x float> %p1, i32 2
	%v3 = call float @_Z9nextafterff(float %s3_0, float %s3_1)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%s4_1 = extractelement <16 x float> %p1, i32 3
	%v4 = call float @_Z9nextafterff(float %s4_0, float %s4_1)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%s5_1 = extractelement <16 x float> %p1, i32 4
	%v5 = call float @_Z9nextafterff(float %s5_0, float %s5_1)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%s6_1 = extractelement <16 x float> %p1, i32 5
	%v6 = call float @_Z9nextafterff(float %s6_0, float %s6_1)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%s7_1 = extractelement <16 x float> %p1, i32 6
	%v7 = call float @_Z9nextafterff(float %s7_0, float %s7_1)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%s8_1 = extractelement <16 x float> %p1, i32 7
	%v8 = call float @_Z9nextafterff(float %s8_0, float %s8_1)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%s9_1 = extractelement <16 x float> %p1, i32 8
	%v9 = call float @_Z9nextafterff(float %s9_0, float %s9_1)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%s10_1 = extractelement <16 x float> %p1, i32 9
	%v10 = call float @_Z9nextafterff(float %s10_0, float %s10_1)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%s11_1 = extractelement <16 x float> %p1, i32 10
	%v11 = call float @_Z9nextafterff(float %s11_0, float %s11_1)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%s12_1 = extractelement <16 x float> %p1, i32 11
	%v12 = call float @_Z9nextafterff(float %s12_0, float %s12_1)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%s13_1 = extractelement <16 x float> %p1, i32 12
	%v13 = call float @_Z9nextafterff(float %s13_0, float %s13_1)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%s14_1 = extractelement <16 x float> %p1, i32 13
	%v14 = call float @_Z9nextafterff(float %s14_0, float %s14_1)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%s15_1 = extractelement <16 x float> %p1, i32 14
	%v15 = call float @_Z9nextafterff(float %s15_0, float %s15_1)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%s16_1 = extractelement <16 x float> %p1, i32 15
	%v16 = call float @_Z9nextafterff(float %s16_0, float %s16_1)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z4powru3v16fu3v16f(<16 x float> %p0, <16 x float> %p1) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%s1_1 = extractelement <16 x float> %p1, i32 0
	%v1 = call float @_Z4powrff(float %s1_0, float %s1_1)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%s2_1 = extractelement <16 x float> %p1, i32 1
	%v2 = call float @_Z4powrff(float %s2_0, float %s2_1)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%s3_1 = extractelement <16 x float> %p1, i32 2
	%v3 = call float @_Z4powrff(float %s3_0, float %s3_1)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%s4_1 = extractelement <16 x float> %p1, i32 3
	%v4 = call float @_Z4powrff(float %s4_0, float %s4_1)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%s5_1 = extractelement <16 x float> %p1, i32 4
	%v5 = call float @_Z4powrff(float %s5_0, float %s5_1)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%s6_1 = extractelement <16 x float> %p1, i32 5
	%v6 = call float @_Z4powrff(float %s6_0, float %s6_1)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%s7_1 = extractelement <16 x float> %p1, i32 6
	%v7 = call float @_Z4powrff(float %s7_0, float %s7_1)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%s8_1 = extractelement <16 x float> %p1, i32 7
	%v8 = call float @_Z4powrff(float %s8_0, float %s8_1)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%s9_1 = extractelement <16 x float> %p1, i32 8
	%v9 = call float @_Z4powrff(float %s9_0, float %s9_1)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%s10_1 = extractelement <16 x float> %p1, i32 9
	%v10 = call float @_Z4powrff(float %s10_0, float %s10_1)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%s11_1 = extractelement <16 x float> %p1, i32 10
	%v11 = call float @_Z4powrff(float %s11_0, float %s11_1)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%s12_1 = extractelement <16 x float> %p1, i32 11
	%v12 = call float @_Z4powrff(float %s12_0, float %s12_1)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%s13_1 = extractelement <16 x float> %p1, i32 12
	%v13 = call float @_Z4powrff(float %s13_0, float %s13_1)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%s14_1 = extractelement <16 x float> %p1, i32 13
	%v14 = call float @_Z4powrff(float %s14_0, float %s14_1)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%s15_1 = extractelement <16 x float> %p1, i32 14
	%v15 = call float @_Z4powrff(float %s15_0, float %s15_1)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%s16_1 = extractelement <16 x float> %p1, i32 15
	%v16 = call float @_Z4powrff(float %s16_0, float %s16_1)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z9remainderu3v16fu3v16f(<16 x float> %p0, <16 x float> %p1) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%s1_1 = extractelement <16 x float> %p1, i32 0
	%v1 = call float @_Z9remainderff(float %s1_0, float %s1_1)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%s2_1 = extractelement <16 x float> %p1, i32 1
	%v2 = call float @_Z9remainderff(float %s2_0, float %s2_1)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%s3_1 = extractelement <16 x float> %p1, i32 2
	%v3 = call float @_Z9remainderff(float %s3_0, float %s3_1)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%s4_1 = extractelement <16 x float> %p1, i32 3
	%v4 = call float @_Z9remainderff(float %s4_0, float %s4_1)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%s5_1 = extractelement <16 x float> %p1, i32 4
	%v5 = call float @_Z9remainderff(float %s5_0, float %s5_1)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%s6_1 = extractelement <16 x float> %p1, i32 5
	%v6 = call float @_Z9remainderff(float %s6_0, float %s6_1)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%s7_1 = extractelement <16 x float> %p1, i32 6
	%v7 = call float @_Z9remainderff(float %s7_0, float %s7_1)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%s8_1 = extractelement <16 x float> %p1, i32 7
	%v8 = call float @_Z9remainderff(float %s8_0, float %s8_1)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%s9_1 = extractelement <16 x float> %p1, i32 8
	%v9 = call float @_Z9remainderff(float %s9_0, float %s9_1)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%s10_1 = extractelement <16 x float> %p1, i32 9
	%v10 = call float @_Z9remainderff(float %s10_0, float %s10_1)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%s11_1 = extractelement <16 x float> %p1, i32 10
	%v11 = call float @_Z9remainderff(float %s11_0, float %s11_1)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%s12_1 = extractelement <16 x float> %p1, i32 11
	%v12 = call float @_Z9remainderff(float %s12_0, float %s12_1)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%s13_1 = extractelement <16 x float> %p1, i32 12
	%v13 = call float @_Z9remainderff(float %s13_0, float %s13_1)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%s14_1 = extractelement <16 x float> %p1, i32 13
	%v14 = call float @_Z9remainderff(float %s14_0, float %s14_1)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%s15_1 = extractelement <16 x float> %p1, i32 14
	%v15 = call float @_Z9remainderff(float %s15_0, float %s15_1)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%s16_1 = extractelement <16 x float> %p1, i32 15
	%v16 = call float @_Z9remainderff(float %s16_0, float %s16_1)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z6remquou3v16fu3v16fPu3v16i(<16 x float> %p0, <16 x float> %p1, <16 x i32>* %p2) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%s1_1 = extractelement <16 x float> %p1, i32 0
	%s1_2 = getelementptr <16 x i32>* %p2, i32 0, i32 0
	%v1 = call float @_Z6remquoffPi(float %s1_0, float %s1_1, i32* %s1_2)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%s2_1 = extractelement <16 x float> %p1, i32 1
	%s2_2 = getelementptr <16 x i32>* %p2, i32 0, i32 1
	%v2 = call float @_Z6remquoffPi(float %s2_0, float %s2_1, i32* %s2_2)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%s3_1 = extractelement <16 x float> %p1, i32 2
	%s3_2 = getelementptr <16 x i32>* %p2, i32 0, i32 2
	%v3 = call float @_Z6remquoffPi(float %s3_0, float %s3_1, i32* %s3_2)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%s4_1 = extractelement <16 x float> %p1, i32 3
	%s4_2 = getelementptr <16 x i32>* %p2, i32 0, i32 3
	%v4 = call float @_Z6remquoffPi(float %s4_0, float %s4_1, i32* %s4_2)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%s5_1 = extractelement <16 x float> %p1, i32 4
	%s5_2 = getelementptr <16 x i32>* %p2, i32 0, i32 4
	%v5 = call float @_Z6remquoffPi(float %s5_0, float %s5_1, i32* %s5_2)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%s6_1 = extractelement <16 x float> %p1, i32 5
	%s6_2 = getelementptr <16 x i32>* %p2, i32 0, i32 5
	%v6 = call float @_Z6remquoffPi(float %s6_0, float %s6_1, i32* %s6_2)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%s7_1 = extractelement <16 x float> %p1, i32 6
	%s7_2 = getelementptr <16 x i32>* %p2, i32 0, i32 6
	%v7 = call float @_Z6remquoffPi(float %s7_0, float %s7_1, i32* %s7_2)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%s8_1 = extractelement <16 x float> %p1, i32 7
	%s8_2 = getelementptr <16 x i32>* %p2, i32 0, i32 7
	%v8 = call float @_Z6remquoffPi(float %s8_0, float %s8_1, i32* %s8_2)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%s9_1 = extractelement <16 x float> %p1, i32 8
	%s9_2 = getelementptr <16 x i32>* %p2, i32 0, i32 8
	%v9 = call float @_Z6remquoffPi(float %s9_0, float %s9_1, i32* %s9_2)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%s10_1 = extractelement <16 x float> %p1, i32 9
	%s10_2 = getelementptr <16 x i32>* %p2, i32 0, i32 9
	%v10 = call float @_Z6remquoffPi(float %s10_0, float %s10_1, i32* %s10_2)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%s11_1 = extractelement <16 x float> %p1, i32 10
	%s11_2 = getelementptr <16 x i32>* %p2, i32 0, i32 10
	%v11 = call float @_Z6remquoffPi(float %s11_0, float %s11_1, i32* %s11_2)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%s12_1 = extractelement <16 x float> %p1, i32 11
	%s12_2 = getelementptr <16 x i32>* %p2, i32 0, i32 11
	%v12 = call float @_Z6remquoffPi(float %s12_0, float %s12_1, i32* %s12_2)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%s13_1 = extractelement <16 x float> %p1, i32 12
	%s13_2 = getelementptr <16 x i32>* %p2, i32 0, i32 12
	%v13 = call float @_Z6remquoffPi(float %s13_0, float %s13_1, i32* %s13_2)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%s14_1 = extractelement <16 x float> %p1, i32 13
	%s14_2 = getelementptr <16 x i32>* %p2, i32 0, i32 13
	%v14 = call float @_Z6remquoffPi(float %s14_0, float %s14_1, i32* %s14_2)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%s15_1 = extractelement <16 x float> %p1, i32 14
	%s15_2 = getelementptr <16 x i32>* %p2, i32 0, i32 14
	%v15 = call float @_Z6remquoffPi(float %s15_0, float %s15_1, i32* %s15_2)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%s16_1 = extractelement <16 x float> %p1, i32 15
	%s16_2 = getelementptr <16 x i32>* %p2, i32 0, i32 15
	%v16 = call float @_Z6remquoffPi(float %s16_0, float %s16_1, i32* %s16_2)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z4rintu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z4rintf(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z4rintf(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z4rintf(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z4rintf(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z4rintf(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z4rintf(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z4rintf(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z4rintf(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z4rintf(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z4rintf(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z4rintf(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z4rintf(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z4rintf(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z4rintf(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z4rintf(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z4rintf(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z5rootnu3v16fu3v16i(<16 x float> %p0, <16 x i32> %p1) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%s1_1 = extractelement <16 x i32> %p1, i32 0
	%v1 = call float @_Z5rootnfi(float %s1_0, i32 %s1_1)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%s2_1 = extractelement <16 x i32> %p1, i32 1
	%v2 = call float @_Z5rootnfi(float %s2_0, i32 %s2_1)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%s3_1 = extractelement <16 x i32> %p1, i32 2
	%v3 = call float @_Z5rootnfi(float %s3_0, i32 %s3_1)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%s4_1 = extractelement <16 x i32> %p1, i32 3
	%v4 = call float @_Z5rootnfi(float %s4_0, i32 %s4_1)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%s5_1 = extractelement <16 x i32> %p1, i32 4
	%v5 = call float @_Z5rootnfi(float %s5_0, i32 %s5_1)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%s6_1 = extractelement <16 x i32> %p1, i32 5
	%v6 = call float @_Z5rootnfi(float %s6_0, i32 %s6_1)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%s7_1 = extractelement <16 x i32> %p1, i32 6
	%v7 = call float @_Z5rootnfi(float %s7_0, i32 %s7_1)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%s8_1 = extractelement <16 x i32> %p1, i32 7
	%v8 = call float @_Z5rootnfi(float %s8_0, i32 %s8_1)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%s9_1 = extractelement <16 x i32> %p1, i32 8
	%v9 = call float @_Z5rootnfi(float %s9_0, i32 %s9_1)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%s10_1 = extractelement <16 x i32> %p1, i32 9
	%v10 = call float @_Z5rootnfi(float %s10_0, i32 %s10_1)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%s11_1 = extractelement <16 x i32> %p1, i32 10
	%v11 = call float @_Z5rootnfi(float %s11_0, i32 %s11_1)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%s12_1 = extractelement <16 x i32> %p1, i32 11
	%v12 = call float @_Z5rootnfi(float %s12_0, i32 %s12_1)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%s13_1 = extractelement <16 x i32> %p1, i32 12
	%v13 = call float @_Z5rootnfi(float %s13_0, i32 %s13_1)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%s14_1 = extractelement <16 x i32> %p1, i32 13
	%v14 = call float @_Z5rootnfi(float %s14_0, i32 %s14_1)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%s15_1 = extractelement <16 x i32> %p1, i32 14
	%v15 = call float @_Z5rootnfi(float %s15_0, i32 %s15_1)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%s16_1 = extractelement <16 x i32> %p1, i32 15
	%v16 = call float @_Z5rootnfi(float %s16_0, i32 %s16_1)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z5roundu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z5roundf(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z5roundf(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z5roundf(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z5roundf(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z5roundf(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z5roundf(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z5roundf(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z5roundf(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z5roundf(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z5roundf(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z5roundf(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z5roundf(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z5roundf(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z5roundf(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z5roundf(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z5roundf(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z5rsqrtu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z5rsqrtf(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z5rsqrtf(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z5rsqrtf(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z5rsqrtf(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z5rsqrtf(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z5rsqrtf(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z5rsqrtf(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z5rsqrtf(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z5rsqrtf(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z5rsqrtf(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z5rsqrtf(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z5rsqrtf(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z5rsqrtf(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z5rsqrtf(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z5rsqrtf(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z5rsqrtf(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z6sincosu3v16fPu3v16f(<16 x float> %p0, <16 x float>* %p1) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%s1_1 = getelementptr <16 x float>* %p1, i32 0, i32 0
	%v1 = call float @_Z6sincosfPf(float %s1_0, float* %s1_1)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%s2_1 = getelementptr <16 x float>* %p1, i32 0, i32 1
	%v2 = call float @_Z6sincosfPf(float %s2_0, float* %s2_1)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%s3_1 = getelementptr <16 x float>* %p1, i32 0, i32 2
	%v3 = call float @_Z6sincosfPf(float %s3_0, float* %s3_1)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%s4_1 = getelementptr <16 x float>* %p1, i32 0, i32 3
	%v4 = call float @_Z6sincosfPf(float %s4_0, float* %s4_1)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%s5_1 = getelementptr <16 x float>* %p1, i32 0, i32 4
	%v5 = call float @_Z6sincosfPf(float %s5_0, float* %s5_1)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%s6_1 = getelementptr <16 x float>* %p1, i32 0, i32 5
	%v6 = call float @_Z6sincosfPf(float %s6_0, float* %s6_1)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%s7_1 = getelementptr <16 x float>* %p1, i32 0, i32 6
	%v7 = call float @_Z6sincosfPf(float %s7_0, float* %s7_1)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%s8_1 = getelementptr <16 x float>* %p1, i32 0, i32 7
	%v8 = call float @_Z6sincosfPf(float %s8_0, float* %s8_1)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%s9_1 = getelementptr <16 x float>* %p1, i32 0, i32 8
	%v9 = call float @_Z6sincosfPf(float %s9_0, float* %s9_1)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%s10_1 = getelementptr <16 x float>* %p1, i32 0, i32 9
	%v10 = call float @_Z6sincosfPf(float %s10_0, float* %s10_1)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%s11_1 = getelementptr <16 x float>* %p1, i32 0, i32 10
	%v11 = call float @_Z6sincosfPf(float %s11_0, float* %s11_1)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%s12_1 = getelementptr <16 x float>* %p1, i32 0, i32 11
	%v12 = call float @_Z6sincosfPf(float %s12_0, float* %s12_1)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%s13_1 = getelementptr <16 x float>* %p1, i32 0, i32 12
	%v13 = call float @_Z6sincosfPf(float %s13_0, float* %s13_1)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%s14_1 = getelementptr <16 x float>* %p1, i32 0, i32 13
	%v14 = call float @_Z6sincosfPf(float %s14_0, float* %s14_1)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%s15_1 = getelementptr <16 x float>* %p1, i32 0, i32 14
	%v15 = call float @_Z6sincosfPf(float %s15_0, float* %s15_1)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%s16_1 = getelementptr <16 x float>* %p1, i32 0, i32 15
	%v16 = call float @_Z6sincosfPf(float %s16_0, float* %s16_1)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z4sinhu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z4sinhf(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z4sinhf(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z4sinhf(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z4sinhf(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z4sinhf(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z4sinhf(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z4sinhf(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z4sinhf(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z4sinhf(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z4sinhf(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z4sinhf(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z4sinhf(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z4sinhf(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z4sinhf(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z4sinhf(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z4sinhf(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z5sinpiu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z5sinpif(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z5sinpif(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z5sinpif(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z5sinpif(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z5sinpif(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z5sinpif(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z5sinpif(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z5sinpif(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z5sinpif(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z5sinpif(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z5sinpif(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z5sinpif(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z5sinpif(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z5sinpif(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z5sinpif(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z5sinpif(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z3tanu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z3tanf(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z3tanf(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z3tanf(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z3tanf(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z3tanf(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z3tanf(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z3tanf(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z3tanf(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z3tanf(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z3tanf(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z3tanf(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z3tanf(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z3tanf(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z3tanf(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z3tanf(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z3tanf(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z4tanhu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z4tanhf(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z4tanhf(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z4tanhf(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z4tanhf(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z4tanhf(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z4tanhf(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z4tanhf(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z4tanhf(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z4tanhf(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z4tanhf(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z4tanhf(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z4tanhf(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z4tanhf(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z4tanhf(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z4tanhf(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z4tanhf(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z5tanpiu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z5tanpif(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z5tanpif(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z5tanpif(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z5tanpif(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z5tanpif(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z5tanpif(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z5tanpif(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z5tanpif(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z5tanpif(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z5tanpif(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z5tanpif(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z5tanpif(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z5tanpif(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z5tanpif(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z5tanpif(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z5tanpif(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z6tgammau3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z6tgammaf(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z6tgammaf(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z6tgammaf(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z6tgammaf(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z6tgammaf(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z6tgammaf(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z6tgammaf(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z6tgammaf(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z6tgammaf(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z6tgammaf(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z6tgammaf(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z6tgammaf(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z6tgammaf(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z6tgammaf(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z6tgammaf(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z6tgammaf(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z5truncu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z5truncf(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z5truncf(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z5truncf(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z5truncf(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z5truncf(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z5truncf(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z5truncf(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z5truncf(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z5truncf(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z5truncf(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z5truncf(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z5truncf(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z5truncf(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z5truncf(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z5truncf(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z5truncf(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z8half_cosu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z8half_cosf(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z8half_cosf(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z8half_cosf(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z8half_cosf(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z8half_cosf(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z8half_cosf(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z8half_cosf(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z8half_cosf(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z8half_cosf(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z8half_cosf(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z8half_cosf(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z8half_cosf(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z8half_cosf(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z8half_cosf(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z8half_cosf(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z8half_cosf(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z11half_divideu3v16fu3v16f(<16 x float> %p0, <16 x float> %p1) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%s1_1 = extractelement <16 x float> %p1, i32 0
	%v1 = call float @_Z11half_divideff(float %s1_0, float %s1_1)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%s2_1 = extractelement <16 x float> %p1, i32 1
	%v2 = call float @_Z11half_divideff(float %s2_0, float %s2_1)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%s3_1 = extractelement <16 x float> %p1, i32 2
	%v3 = call float @_Z11half_divideff(float %s3_0, float %s3_1)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%s4_1 = extractelement <16 x float> %p1, i32 3
	%v4 = call float @_Z11half_divideff(float %s4_0, float %s4_1)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%s5_1 = extractelement <16 x float> %p1, i32 4
	%v5 = call float @_Z11half_divideff(float %s5_0, float %s5_1)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%s6_1 = extractelement <16 x float> %p1, i32 5
	%v6 = call float @_Z11half_divideff(float %s6_0, float %s6_1)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%s7_1 = extractelement <16 x float> %p1, i32 6
	%v7 = call float @_Z11half_divideff(float %s7_0, float %s7_1)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%s8_1 = extractelement <16 x float> %p1, i32 7
	%v8 = call float @_Z11half_divideff(float %s8_0, float %s8_1)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%s9_1 = extractelement <16 x float> %p1, i32 8
	%v9 = call float @_Z11half_divideff(float %s9_0, float %s9_1)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%s10_1 = extractelement <16 x float> %p1, i32 9
	%v10 = call float @_Z11half_divideff(float %s10_0, float %s10_1)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%s11_1 = extractelement <16 x float> %p1, i32 10
	%v11 = call float @_Z11half_divideff(float %s11_0, float %s11_1)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%s12_1 = extractelement <16 x float> %p1, i32 11
	%v12 = call float @_Z11half_divideff(float %s12_0, float %s12_1)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%s13_1 = extractelement <16 x float> %p1, i32 12
	%v13 = call float @_Z11half_divideff(float %s13_0, float %s13_1)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%s14_1 = extractelement <16 x float> %p1, i32 13
	%v14 = call float @_Z11half_divideff(float %s14_0, float %s14_1)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%s15_1 = extractelement <16 x float> %p1, i32 14
	%v15 = call float @_Z11half_divideff(float %s15_0, float %s15_1)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%s16_1 = extractelement <16 x float> %p1, i32 15
	%v16 = call float @_Z11half_divideff(float %s16_0, float %s16_1)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z8half_expu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z8half_expf(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z8half_expf(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z8half_expf(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z8half_expf(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z8half_expf(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z8half_expf(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z8half_expf(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z8half_expf(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z8half_expf(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z8half_expf(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z8half_expf(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z8half_expf(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z8half_expf(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z8half_expf(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z8half_expf(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z8half_expf(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z9half_exp2u3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z9half_exp2f(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z9half_exp2f(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z9half_exp2f(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z9half_exp2f(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z9half_exp2f(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z9half_exp2f(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z9half_exp2f(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z9half_exp2f(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z9half_exp2f(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z9half_exp2f(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z9half_exp2f(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z9half_exp2f(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z9half_exp2f(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z9half_exp2f(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z9half_exp2f(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z9half_exp2f(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z10half_exp10u3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z10half_exp10f(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z10half_exp10f(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z10half_exp10f(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z10half_exp10f(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z10half_exp10f(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z10half_exp10f(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z10half_exp10f(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z10half_exp10f(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z10half_exp10f(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z10half_exp10f(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z10half_exp10f(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z10half_exp10f(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z10half_exp10f(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z10half_exp10f(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z10half_exp10f(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z10half_exp10f(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z8half_logu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z8half_logf(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z8half_logf(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z8half_logf(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z8half_logf(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z8half_logf(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z8half_logf(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z8half_logf(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z8half_logf(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z8half_logf(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z8half_logf(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z8half_logf(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z8half_logf(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z8half_logf(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z8half_logf(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z8half_logf(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z8half_logf(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z9half_log2u3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z9half_log2f(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z9half_log2f(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z9half_log2f(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z9half_log2f(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z9half_log2f(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z9half_log2f(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z9half_log2f(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z9half_log2f(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z9half_log2f(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z9half_log2f(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z9half_log2f(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z9half_log2f(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z9half_log2f(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z9half_log2f(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z9half_log2f(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z9half_log2f(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z10half_log10u3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z10half_log10f(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z10half_log10f(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z10half_log10f(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z10half_log10f(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z10half_log10f(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z10half_log10f(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z10half_log10f(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z10half_log10f(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z10half_log10f(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z10half_log10f(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z10half_log10f(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z10half_log10f(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z10half_log10f(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z10half_log10f(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z10half_log10f(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z10half_log10f(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z9half_powru3v16fu3v16f(<16 x float> %p0, <16 x float> %p1) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%s1_1 = extractelement <16 x float> %p1, i32 0
	%v1 = call float @_Z9half_powrff(float %s1_0, float %s1_1)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%s2_1 = extractelement <16 x float> %p1, i32 1
	%v2 = call float @_Z9half_powrff(float %s2_0, float %s2_1)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%s3_1 = extractelement <16 x float> %p1, i32 2
	%v3 = call float @_Z9half_powrff(float %s3_0, float %s3_1)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%s4_1 = extractelement <16 x float> %p1, i32 3
	%v4 = call float @_Z9half_powrff(float %s4_0, float %s4_1)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%s5_1 = extractelement <16 x float> %p1, i32 4
	%v5 = call float @_Z9half_powrff(float %s5_0, float %s5_1)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%s6_1 = extractelement <16 x float> %p1, i32 5
	%v6 = call float @_Z9half_powrff(float %s6_0, float %s6_1)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%s7_1 = extractelement <16 x float> %p1, i32 6
	%v7 = call float @_Z9half_powrff(float %s7_0, float %s7_1)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%s8_1 = extractelement <16 x float> %p1, i32 7
	%v8 = call float @_Z9half_powrff(float %s8_0, float %s8_1)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%s9_1 = extractelement <16 x float> %p1, i32 8
	%v9 = call float @_Z9half_powrff(float %s9_0, float %s9_1)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%s10_1 = extractelement <16 x float> %p1, i32 9
	%v10 = call float @_Z9half_powrff(float %s10_0, float %s10_1)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%s11_1 = extractelement <16 x float> %p1, i32 10
	%v11 = call float @_Z9half_powrff(float %s11_0, float %s11_1)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%s12_1 = extractelement <16 x float> %p1, i32 11
	%v12 = call float @_Z9half_powrff(float %s12_0, float %s12_1)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%s13_1 = extractelement <16 x float> %p1, i32 12
	%v13 = call float @_Z9half_powrff(float %s13_0, float %s13_1)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%s14_1 = extractelement <16 x float> %p1, i32 13
	%v14 = call float @_Z9half_powrff(float %s14_0, float %s14_1)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%s15_1 = extractelement <16 x float> %p1, i32 14
	%v15 = call float @_Z9half_powrff(float %s15_0, float %s15_1)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%s16_1 = extractelement <16 x float> %p1, i32 15
	%v16 = call float @_Z9half_powrff(float %s16_0, float %s16_1)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z10half_recipu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z10half_recipf(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z10half_recipf(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z10half_recipf(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z10half_recipf(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z10half_recipf(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z10half_recipf(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z10half_recipf(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z10half_recipf(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z10half_recipf(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z10half_recipf(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z10half_recipf(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z10half_recipf(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z10half_recipf(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z10half_recipf(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z10half_recipf(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z10half_recipf(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z10half_rsqrtu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z10half_rsqrtf(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z10half_rsqrtf(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z10half_rsqrtf(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z10half_rsqrtf(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z10half_rsqrtf(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z10half_rsqrtf(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z10half_rsqrtf(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z10half_rsqrtf(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z10half_rsqrtf(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z10half_rsqrtf(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z10half_rsqrtf(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z10half_rsqrtf(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z10half_rsqrtf(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z10half_rsqrtf(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z10half_rsqrtf(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z10half_rsqrtf(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z8half_sinu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z8half_sinf(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z8half_sinf(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z8half_sinf(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z8half_sinf(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z8half_sinf(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z8half_sinf(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z8half_sinf(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z8half_sinf(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z8half_sinf(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z8half_sinf(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z8half_sinf(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z8half_sinf(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z8half_sinf(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z8half_sinf(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z8half_sinf(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z8half_sinf(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z9half_sqrtu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z9half_sqrtf(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z9half_sqrtf(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z9half_sqrtf(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z9half_sqrtf(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z9half_sqrtf(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z9half_sqrtf(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z9half_sqrtf(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z9half_sqrtf(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z9half_sqrtf(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z9half_sqrtf(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z9half_sqrtf(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z9half_sqrtf(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z9half_sqrtf(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z9half_sqrtf(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z9half_sqrtf(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z9half_sqrtf(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z8half_tanu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z8half_tanf(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z8half_tanf(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z8half_tanf(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z8half_tanf(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z8half_tanf(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z8half_tanf(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z8half_tanf(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z8half_tanf(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z8half_tanf(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z8half_tanf(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z8half_tanf(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z8half_tanf(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z8half_tanf(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z8half_tanf(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z8half_tanf(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z8half_tanf(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z11native_exp2u3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z11native_exp2f(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z11native_exp2f(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z11native_exp2f(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z11native_exp2f(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z11native_exp2f(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z11native_exp2f(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z11native_exp2f(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z11native_exp2f(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z11native_exp2f(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z11native_exp2f(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z11native_exp2f(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z11native_exp2f(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z11native_exp2f(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z11native_exp2f(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z11native_exp2f(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z11native_exp2f(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z12native_exp10u3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z12native_exp10f(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z12native_exp10f(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z12native_exp10f(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z12native_exp10f(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z12native_exp10f(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z12native_exp10f(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z12native_exp10f(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z12native_exp10f(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z12native_exp10f(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z12native_exp10f(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z12native_exp10f(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z12native_exp10f(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z12native_exp10f(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z12native_exp10f(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z12native_exp10f(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z12native_exp10f(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z11native_log2u3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z11native_log2f(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z11native_log2f(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z11native_log2f(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z11native_log2f(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z11native_log2f(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z11native_log2f(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z11native_log2f(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z11native_log2f(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z11native_log2f(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z11native_log2f(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z11native_log2f(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z11native_log2f(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z11native_log2f(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z11native_log2f(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z11native_log2f(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z11native_log2f(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z12native_log10u3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z12native_log10f(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z12native_log10f(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z12native_log10f(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z12native_log10f(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z12native_log10f(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z12native_log10f(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z12native_log10f(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z12native_log10f(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z12native_log10f(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z12native_log10f(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z12native_log10f(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z12native_log10f(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z12native_log10f(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z12native_log10f(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z12native_log10f(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z12native_log10f(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z12native_recipu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z12native_recipf(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z12native_recipf(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z12native_recipf(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z12native_recipf(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z12native_recipf(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z12native_recipf(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z12native_recipf(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z12native_recipf(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z12native_recipf(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z12native_recipf(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z12native_recipf(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z12native_recipf(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z12native_recipf(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z12native_recipf(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z12native_recipf(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z12native_recipf(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z12native_rsqrtu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z12native_rsqrtf(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z12native_rsqrtf(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z12native_rsqrtf(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z12native_rsqrtf(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z12native_rsqrtf(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z12native_rsqrtf(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z12native_rsqrtf(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z12native_rsqrtf(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z12native_rsqrtf(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z12native_rsqrtf(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z12native_rsqrtf(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z12native_rsqrtf(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z12native_rsqrtf(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z12native_rsqrtf(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z12native_rsqrtf(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z12native_rsqrtf(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z11native_sqrtu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z11native_sqrtf(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z11native_sqrtf(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z11native_sqrtf(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z11native_sqrtf(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z11native_sqrtf(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z11native_sqrtf(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z11native_sqrtf(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z11native_sqrtf(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z11native_sqrtf(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z11native_sqrtf(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z11native_sqrtf(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z11native_sqrtf(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z11native_sqrtf(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z11native_sqrtf(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z11native_sqrtf(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z11native_sqrtf(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z10native_sinu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z10native_sinf(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z10native_sinf(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z10native_sinf(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z10native_sinf(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z10native_sinf(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z10native_sinf(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z10native_sinf(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z10native_sinf(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z10native_sinf(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z10native_sinf(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z10native_sinf(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z10native_sinf(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z10native_sinf(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z10native_sinf(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z10native_sinf(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z10native_sinf(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z10native_cosu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z10native_cosf(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z10native_cosf(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z10native_cosf(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z10native_cosf(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z10native_cosf(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z10native_cosf(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z10native_cosf(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z10native_cosf(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z10native_cosf(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z10native_cosf(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z10native_cosf(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z10native_cosf(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z10native_cosf(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z10native_cosf(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z10native_cosf(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z10native_cosf(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z10native_expu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z10native_expf(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z10native_expf(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z10native_expf(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z10native_expf(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z10native_expf(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z10native_expf(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z10native_expf(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z10native_expf(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z10native_expf(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z10native_expf(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z10native_expf(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z10native_expf(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z10native_expf(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z10native_expf(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z10native_expf(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z10native_expf(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z10native_logu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z10native_logf(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z10native_logf(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z10native_logf(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z10native_logf(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z10native_logf(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z10native_logf(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z10native_logf(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z10native_logf(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z10native_logf(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z10native_logf(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z10native_logf(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z10native_logf(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z10native_logf(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z10native_logf(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z10native_logf(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z10native_logf(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z10native_tanu3v16f(<16 x float> %p0) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%v1 = call float @_Z10native_tanf(float %s1_0)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%v2 = call float @_Z10native_tanf(float %s2_0)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%v3 = call float @_Z10native_tanf(float %s3_0)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%v4 = call float @_Z10native_tanf(float %s4_0)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%v5 = call float @_Z10native_tanf(float %s5_0)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%v6 = call float @_Z10native_tanf(float %s6_0)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%v7 = call float @_Z10native_tanf(float %s7_0)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%v8 = call float @_Z10native_tanf(float %s8_0)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%v9 = call float @_Z10native_tanf(float %s9_0)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%v10 = call float @_Z10native_tanf(float %s10_0)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%v11 = call float @_Z10native_tanf(float %s11_0)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%v12 = call float @_Z10native_tanf(float %s12_0)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%v13 = call float @_Z10native_tanf(float %s13_0)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%v14 = call float @_Z10native_tanf(float %s14_0)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%v15 = call float @_Z10native_tanf(float %s15_0)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%v16 = call float @_Z10native_tanf(float %s16_0)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z13native_divideu3v16fu3v16f(<16 x float> %p0, <16 x float> %p1) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%s1_1 = extractelement <16 x float> %p1, i32 0
	%v1 = call float @_Z13native_divideff(float %s1_0, float %s1_1)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%s2_1 = extractelement <16 x float> %p1, i32 1
	%v2 = call float @_Z13native_divideff(float %s2_0, float %s2_1)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%s3_1 = extractelement <16 x float> %p1, i32 2
	%v3 = call float @_Z13native_divideff(float %s3_0, float %s3_1)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%s4_1 = extractelement <16 x float> %p1, i32 3
	%v4 = call float @_Z13native_divideff(float %s4_0, float %s4_1)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%s5_1 = extractelement <16 x float> %p1, i32 4
	%v5 = call float @_Z13native_divideff(float %s5_0, float %s5_1)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%s6_1 = extractelement <16 x float> %p1, i32 5
	%v6 = call float @_Z13native_divideff(float %s6_0, float %s6_1)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%s7_1 = extractelement <16 x float> %p1, i32 6
	%v7 = call float @_Z13native_divideff(float %s7_0, float %s7_1)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%s8_1 = extractelement <16 x float> %p1, i32 7
	%v8 = call float @_Z13native_divideff(float %s8_0, float %s8_1)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%s9_1 = extractelement <16 x float> %p1, i32 8
	%v9 = call float @_Z13native_divideff(float %s9_0, float %s9_1)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%s10_1 = extractelement <16 x float> %p1, i32 9
	%v10 = call float @_Z13native_divideff(float %s10_0, float %s10_1)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%s11_1 = extractelement <16 x float> %p1, i32 10
	%v11 = call float @_Z13native_divideff(float %s11_0, float %s11_1)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%s12_1 = extractelement <16 x float> %p1, i32 11
	%v12 = call float @_Z13native_divideff(float %s12_0, float %s12_1)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%s13_1 = extractelement <16 x float> %p1, i32 12
	%v13 = call float @_Z13native_divideff(float %s13_0, float %s13_1)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%s14_1 = extractelement <16 x float> %p1, i32 13
	%v14 = call float @_Z13native_divideff(float %s14_0, float %s14_1)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%s15_1 = extractelement <16 x float> %p1, i32 14
	%v15 = call float @_Z13native_divideff(float %s15_0, float %s15_1)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%s16_1 = extractelement <16 x float> %p1, i32 15
	%v16 = call float @_Z13native_divideff(float %s16_0, float %s16_1)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z11native_powru3v16fu3v16f(<16 x float> %p0, <16 x float> %p1) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%s1_1 = extractelement <16 x float> %p1, i32 0
	%v1 = call float @_Z11native_powrff(float %s1_0, float %s1_1)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%s2_1 = extractelement <16 x float> %p1, i32 1
	%v2 = call float @_Z11native_powrff(float %s2_0, float %s2_1)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%s3_1 = extractelement <16 x float> %p1, i32 2
	%v3 = call float @_Z11native_powrff(float %s3_0, float %s3_1)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%s4_1 = extractelement <16 x float> %p1, i32 3
	%v4 = call float @_Z11native_powrff(float %s4_0, float %s4_1)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%s5_1 = extractelement <16 x float> %p1, i32 4
	%v5 = call float @_Z11native_powrff(float %s5_0, float %s5_1)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%s6_1 = extractelement <16 x float> %p1, i32 5
	%v6 = call float @_Z11native_powrff(float %s6_0, float %s6_1)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%s7_1 = extractelement <16 x float> %p1, i32 6
	%v7 = call float @_Z11native_powrff(float %s7_0, float %s7_1)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%s8_1 = extractelement <16 x float> %p1, i32 7
	%v8 = call float @_Z11native_powrff(float %s8_0, float %s8_1)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%s9_1 = extractelement <16 x float> %p1, i32 8
	%v9 = call float @_Z11native_powrff(float %s9_0, float %s9_1)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%s10_1 = extractelement <16 x float> %p1, i32 9
	%v10 = call float @_Z11native_powrff(float %s10_0, float %s10_1)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%s11_1 = extractelement <16 x float> %p1, i32 10
	%v11 = call float @_Z11native_powrff(float %s11_0, float %s11_1)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%s12_1 = extractelement <16 x float> %p1, i32 11
	%v12 = call float @_Z11native_powrff(float %s12_0, float %s12_1)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%s13_1 = extractelement <16 x float> %p1, i32 12
	%v13 = call float @_Z11native_powrff(float %s13_0, float %s13_1)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%s14_1 = extractelement <16 x float> %p1, i32 13
	%v14 = call float @_Z11native_powrff(float %s14_0, float %s14_1)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%s15_1 = extractelement <16 x float> %p1, i32 14
	%v15 = call float @_Z11native_powrff(float %s15_0, float %s15_1)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%s16_1 = extractelement <16 x float> %p1, i32 15
	%v16 = call float @_Z11native_powrff(float %s16_0, float %s16_1)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x float> @_Z12native_ldexpu3v16fu3v16i(<16 x float> %p0, <16 x i32> %p1) nounwind {
	%s1_0 = extractelement <16 x float> %p0, i32 0
	%s1_1 = extractelement <16 x i32> %p1, i32 0
	%v1 = call float @_Z12native_ldexpfi(float %s1_0, i32 %s1_1)
	%r1 = insertelement <16 x float> undef, float %v1, i32 0
	%s2_0 = extractelement <16 x float> %p0, i32 1
	%s2_1 = extractelement <16 x i32> %p1, i32 1
	%v2 = call float @_Z12native_ldexpfi(float %s2_0, i32 %s2_1)
	%r2 = insertelement <16 x float> %r1, float %v2, i32 1
	%s3_0 = extractelement <16 x float> %p0, i32 2
	%s3_1 = extractelement <16 x i32> %p1, i32 2
	%v3 = call float @_Z12native_ldexpfi(float %s3_0, i32 %s3_1)
	%r3 = insertelement <16 x float> %r2, float %v3, i32 2
	%s4_0 = extractelement <16 x float> %p0, i32 3
	%s4_1 = extractelement <16 x i32> %p1, i32 3
	%v4 = call float @_Z12native_ldexpfi(float %s4_0, i32 %s4_1)
	%r4 = insertelement <16 x float> %r3, float %v4, i32 3
	%s5_0 = extractelement <16 x float> %p0, i32 4
	%s5_1 = extractelement <16 x i32> %p1, i32 4
	%v5 = call float @_Z12native_ldexpfi(float %s5_0, i32 %s5_1)
	%r5 = insertelement <16 x float> %r4, float %v5, i32 4
	%s6_0 = extractelement <16 x float> %p0, i32 5
	%s6_1 = extractelement <16 x i32> %p1, i32 5
	%v6 = call float @_Z12native_ldexpfi(float %s6_0, i32 %s6_1)
	%r6 = insertelement <16 x float> %r5, float %v6, i32 5
	%s7_0 = extractelement <16 x float> %p0, i32 6
	%s7_1 = extractelement <16 x i32> %p1, i32 6
	%v7 = call float @_Z12native_ldexpfi(float %s7_0, i32 %s7_1)
	%r7 = insertelement <16 x float> %r6, float %v7, i32 6
	%s8_0 = extractelement <16 x float> %p0, i32 7
	%s8_1 = extractelement <16 x i32> %p1, i32 7
	%v8 = call float @_Z12native_ldexpfi(float %s8_0, i32 %s8_1)
	%r8 = insertelement <16 x float> %r7, float %v8, i32 7
	%s9_0 = extractelement <16 x float> %p0, i32 8
	%s9_1 = extractelement <16 x i32> %p1, i32 8
	%v9 = call float @_Z12native_ldexpfi(float %s9_0, i32 %s9_1)
	%r9 = insertelement <16 x float> %r8, float %v9, i32 8
	%s10_0 = extractelement <16 x float> %p0, i32 9
	%s10_1 = extractelement <16 x i32> %p1, i32 9
	%v10 = call float @_Z12native_ldexpfi(float %s10_0, i32 %s10_1)
	%r10 = insertelement <16 x float> %r9, float %v10, i32 9
	%s11_0 = extractelement <16 x float> %p0, i32 10
	%s11_1 = extractelement <16 x i32> %p1, i32 10
	%v11 = call float @_Z12native_ldexpfi(float %s11_0, i32 %s11_1)
	%r11 = insertelement <16 x float> %r10, float %v11, i32 10
	%s12_0 = extractelement <16 x float> %p0, i32 11
	%s12_1 = extractelement <16 x i32> %p1, i32 11
	%v12 = call float @_Z12native_ldexpfi(float %s12_0, i32 %s12_1)
	%r12 = insertelement <16 x float> %r11, float %v12, i32 11
	%s13_0 = extractelement <16 x float> %p0, i32 12
	%s13_1 = extractelement <16 x i32> %p1, i32 12
	%v13 = call float @_Z12native_ldexpfi(float %s13_0, i32 %s13_1)
	%r13 = insertelement <16 x float> %r12, float %v13, i32 12
	%s14_0 = extractelement <16 x float> %p0, i32 13
	%s14_1 = extractelement <16 x i32> %p1, i32 13
	%v14 = call float @_Z12native_ldexpfi(float %s14_0, i32 %s14_1)
	%r14 = insertelement <16 x float> %r13, float %v14, i32 13
	%s15_0 = extractelement <16 x float> %p0, i32 14
	%s15_1 = extractelement <16 x i32> %p1, i32 14
	%v15 = call float @_Z12native_ldexpfi(float %s15_0, i32 %s15_1)
	%r15 = insertelement <16 x float> %r14, float %v15, i32 14
	%s16_0 = extractelement <16 x float> %p0, i32 15
	%s16_1 = extractelement <16 x i32> %p1, i32 15
	%v16 = call float @_Z12native_ldexpfi(float %s16_0, i32 %s16_1)
	%r16 = insertelement <16 x float> %r15, float %v16, i32 15
	ret <16 x float> %r16
}
define <16 x double> @_Z4acosu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z4acosd(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z4acosd(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z4acosd(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z4acosd(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z4acosd(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z4acosd(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z4acosd(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z4acosd(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z4acosd(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z4acosd(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z4acosd(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z4acosd(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z4acosd(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z4acosd(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z4acosd(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z4acosd(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z5acoshu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z5acoshd(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z5acoshd(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z5acoshd(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z5acoshd(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z5acoshd(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z5acoshd(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z5acoshd(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z5acoshd(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z5acoshd(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z5acoshd(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z5acoshd(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z5acoshd(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z5acoshd(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z5acoshd(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z5acoshd(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z5acoshd(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z6acospiu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z6acospid(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z6acospid(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z6acospid(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z6acospid(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z6acospid(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z6acospid(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z6acospid(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z6acospid(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z6acospid(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z6acospid(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z6acospid(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z6acospid(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z6acospid(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z6acospid(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z6acospid(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z6acospid(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z4asinu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z4asind(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z4asind(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z4asind(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z4asind(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z4asind(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z4asind(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z4asind(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z4asind(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z4asind(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z4asind(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z4asind(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z4asind(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z4asind(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z4asind(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z4asind(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z4asind(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z5asinhu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z5asinhd(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z5asinhd(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z5asinhd(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z5asinhd(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z5asinhd(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z5asinhd(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z5asinhd(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z5asinhd(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z5asinhd(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z5asinhd(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z5asinhd(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z5asinhd(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z5asinhd(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z5asinhd(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z5asinhd(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z5asinhd(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z6asinpiu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z6asinpid(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z6asinpid(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z6asinpid(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z6asinpid(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z6asinpid(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z6asinpid(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z6asinpid(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z6asinpid(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z6asinpid(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z6asinpid(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z6asinpid(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z6asinpid(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z6asinpid(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z6asinpid(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z6asinpid(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z6asinpid(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z4atanu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z4atand(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z4atand(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z4atand(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z4atand(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z4atand(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z4atand(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z4atand(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z4atand(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z4atand(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z4atand(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z4atand(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z4atand(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z4atand(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z4atand(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z4atand(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z4atand(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z5atan2u3v16du3v16d(<16 x double> %p0, <16 x double> %p1) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%s1_1 = extractelement <16 x double> %p1, i32 0
	%v1 = call double @_Z5atan2dd(double %s1_0, double %s1_1)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%s2_1 = extractelement <16 x double> %p1, i32 1
	%v2 = call double @_Z5atan2dd(double %s2_0, double %s2_1)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%s3_1 = extractelement <16 x double> %p1, i32 2
	%v3 = call double @_Z5atan2dd(double %s3_0, double %s3_1)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%s4_1 = extractelement <16 x double> %p1, i32 3
	%v4 = call double @_Z5atan2dd(double %s4_0, double %s4_1)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%s5_1 = extractelement <16 x double> %p1, i32 4
	%v5 = call double @_Z5atan2dd(double %s5_0, double %s5_1)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%s6_1 = extractelement <16 x double> %p1, i32 5
	%v6 = call double @_Z5atan2dd(double %s6_0, double %s6_1)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%s7_1 = extractelement <16 x double> %p1, i32 6
	%v7 = call double @_Z5atan2dd(double %s7_0, double %s7_1)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%s8_1 = extractelement <16 x double> %p1, i32 7
	%v8 = call double @_Z5atan2dd(double %s8_0, double %s8_1)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%s9_1 = extractelement <16 x double> %p1, i32 8
	%v9 = call double @_Z5atan2dd(double %s9_0, double %s9_1)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%s10_1 = extractelement <16 x double> %p1, i32 9
	%v10 = call double @_Z5atan2dd(double %s10_0, double %s10_1)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%s11_1 = extractelement <16 x double> %p1, i32 10
	%v11 = call double @_Z5atan2dd(double %s11_0, double %s11_1)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%s12_1 = extractelement <16 x double> %p1, i32 11
	%v12 = call double @_Z5atan2dd(double %s12_0, double %s12_1)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%s13_1 = extractelement <16 x double> %p1, i32 12
	%v13 = call double @_Z5atan2dd(double %s13_0, double %s13_1)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%s14_1 = extractelement <16 x double> %p1, i32 13
	%v14 = call double @_Z5atan2dd(double %s14_0, double %s14_1)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%s15_1 = extractelement <16 x double> %p1, i32 14
	%v15 = call double @_Z5atan2dd(double %s15_0, double %s15_1)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%s16_1 = extractelement <16 x double> %p1, i32 15
	%v16 = call double @_Z5atan2dd(double %s16_0, double %s16_1)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z5atanhu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z5atanhd(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z5atanhd(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z5atanhd(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z5atanhd(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z5atanhd(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z5atanhd(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z5atanhd(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z5atanhd(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z5atanhd(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z5atanhd(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z5atanhd(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z5atanhd(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z5atanhd(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z5atanhd(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z5atanhd(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z5atanhd(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z6atanpiu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z6atanpid(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z6atanpid(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z6atanpid(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z6atanpid(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z6atanpid(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z6atanpid(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z6atanpid(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z6atanpid(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z6atanpid(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z6atanpid(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z6atanpid(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z6atanpid(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z6atanpid(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z6atanpid(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z6atanpid(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z6atanpid(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z7atan2piu3v16du3v16d(<16 x double> %p0, <16 x double> %p1) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%s1_1 = extractelement <16 x double> %p1, i32 0
	%v1 = call double @_Z7atan2pidd(double %s1_0, double %s1_1)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%s2_1 = extractelement <16 x double> %p1, i32 1
	%v2 = call double @_Z7atan2pidd(double %s2_0, double %s2_1)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%s3_1 = extractelement <16 x double> %p1, i32 2
	%v3 = call double @_Z7atan2pidd(double %s3_0, double %s3_1)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%s4_1 = extractelement <16 x double> %p1, i32 3
	%v4 = call double @_Z7atan2pidd(double %s4_0, double %s4_1)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%s5_1 = extractelement <16 x double> %p1, i32 4
	%v5 = call double @_Z7atan2pidd(double %s5_0, double %s5_1)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%s6_1 = extractelement <16 x double> %p1, i32 5
	%v6 = call double @_Z7atan2pidd(double %s6_0, double %s6_1)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%s7_1 = extractelement <16 x double> %p1, i32 6
	%v7 = call double @_Z7atan2pidd(double %s7_0, double %s7_1)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%s8_1 = extractelement <16 x double> %p1, i32 7
	%v8 = call double @_Z7atan2pidd(double %s8_0, double %s8_1)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%s9_1 = extractelement <16 x double> %p1, i32 8
	%v9 = call double @_Z7atan2pidd(double %s9_0, double %s9_1)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%s10_1 = extractelement <16 x double> %p1, i32 9
	%v10 = call double @_Z7atan2pidd(double %s10_0, double %s10_1)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%s11_1 = extractelement <16 x double> %p1, i32 10
	%v11 = call double @_Z7atan2pidd(double %s11_0, double %s11_1)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%s12_1 = extractelement <16 x double> %p1, i32 11
	%v12 = call double @_Z7atan2pidd(double %s12_0, double %s12_1)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%s13_1 = extractelement <16 x double> %p1, i32 12
	%v13 = call double @_Z7atan2pidd(double %s13_0, double %s13_1)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%s14_1 = extractelement <16 x double> %p1, i32 13
	%v14 = call double @_Z7atan2pidd(double %s14_0, double %s14_1)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%s15_1 = extractelement <16 x double> %p1, i32 14
	%v15 = call double @_Z7atan2pidd(double %s15_0, double %s15_1)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%s16_1 = extractelement <16 x double> %p1, i32 15
	%v16 = call double @_Z7atan2pidd(double %s16_0, double %s16_1)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z4cbrtu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z4cbrtd(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z4cbrtd(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z4cbrtd(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z4cbrtd(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z4cbrtd(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z4cbrtd(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z4cbrtd(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z4cbrtd(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z4cbrtd(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z4cbrtd(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z4cbrtd(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z4cbrtd(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z4cbrtd(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z4cbrtd(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z4cbrtd(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z4cbrtd(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z4ceilu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z4ceild(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z4ceild(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z4ceild(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z4ceild(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z4ceild(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z4ceild(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z4ceild(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z4ceild(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z4ceild(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z4ceild(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z4ceild(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z4ceild(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z4ceild(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z4ceild(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z4ceild(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z4ceild(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z8copysignu3v16du3v16d(<16 x double> %p0, <16 x double> %p1) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%s1_1 = extractelement <16 x double> %p1, i32 0
	%v1 = call double @_Z8copysigndd(double %s1_0, double %s1_1)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%s2_1 = extractelement <16 x double> %p1, i32 1
	%v2 = call double @_Z8copysigndd(double %s2_0, double %s2_1)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%s3_1 = extractelement <16 x double> %p1, i32 2
	%v3 = call double @_Z8copysigndd(double %s3_0, double %s3_1)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%s4_1 = extractelement <16 x double> %p1, i32 3
	%v4 = call double @_Z8copysigndd(double %s4_0, double %s4_1)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%s5_1 = extractelement <16 x double> %p1, i32 4
	%v5 = call double @_Z8copysigndd(double %s5_0, double %s5_1)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%s6_1 = extractelement <16 x double> %p1, i32 5
	%v6 = call double @_Z8copysigndd(double %s6_0, double %s6_1)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%s7_1 = extractelement <16 x double> %p1, i32 6
	%v7 = call double @_Z8copysigndd(double %s7_0, double %s7_1)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%s8_1 = extractelement <16 x double> %p1, i32 7
	%v8 = call double @_Z8copysigndd(double %s8_0, double %s8_1)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%s9_1 = extractelement <16 x double> %p1, i32 8
	%v9 = call double @_Z8copysigndd(double %s9_0, double %s9_1)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%s10_1 = extractelement <16 x double> %p1, i32 9
	%v10 = call double @_Z8copysigndd(double %s10_0, double %s10_1)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%s11_1 = extractelement <16 x double> %p1, i32 10
	%v11 = call double @_Z8copysigndd(double %s11_0, double %s11_1)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%s12_1 = extractelement <16 x double> %p1, i32 11
	%v12 = call double @_Z8copysigndd(double %s12_0, double %s12_1)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%s13_1 = extractelement <16 x double> %p1, i32 12
	%v13 = call double @_Z8copysigndd(double %s13_0, double %s13_1)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%s14_1 = extractelement <16 x double> %p1, i32 13
	%v14 = call double @_Z8copysigndd(double %s14_0, double %s14_1)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%s15_1 = extractelement <16 x double> %p1, i32 14
	%v15 = call double @_Z8copysigndd(double %s15_0, double %s15_1)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%s16_1 = extractelement <16 x double> %p1, i32 15
	%v16 = call double @_Z8copysigndd(double %s16_0, double %s16_1)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z4coshu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z4coshd(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z4coshd(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z4coshd(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z4coshd(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z4coshd(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z4coshd(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z4coshd(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z4coshd(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z4coshd(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z4coshd(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z4coshd(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z4coshd(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z4coshd(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z4coshd(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z4coshd(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z4coshd(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z5cospiu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z5cospid(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z5cospid(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z5cospid(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z5cospid(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z5cospid(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z5cospid(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z5cospid(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z5cospid(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z5cospid(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z5cospid(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z5cospid(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z5cospid(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z5cospid(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z5cospid(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z5cospid(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z5cospid(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z4erfcu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z4erfcd(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z4erfcd(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z4erfcd(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z4erfcd(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z4erfcd(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z4erfcd(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z4erfcd(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z4erfcd(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z4erfcd(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z4erfcd(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z4erfcd(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z4erfcd(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z4erfcd(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z4erfcd(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z4erfcd(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z4erfcd(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z3erfu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z3erfd(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z3erfd(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z3erfd(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z3erfd(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z3erfd(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z3erfd(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z3erfd(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z3erfd(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z3erfd(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z3erfd(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z3erfd(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z3erfd(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z3erfd(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z3erfd(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z3erfd(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z3erfd(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z4exp2u3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z4exp2d(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z4exp2d(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z4exp2d(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z4exp2d(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z4exp2d(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z4exp2d(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z4exp2d(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z4exp2d(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z4exp2d(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z4exp2d(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z4exp2d(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z4exp2d(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z4exp2d(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z4exp2d(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z4exp2d(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z4exp2d(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z5exp10u3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z5exp10d(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z5exp10d(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z5exp10d(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z5exp10d(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z5exp10d(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z5exp10d(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z5exp10d(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z5exp10d(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z5exp10d(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z5exp10d(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z5exp10d(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z5exp10d(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z5exp10d(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z5exp10d(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z5exp10d(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z5exp10d(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z5expm1u3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z5expm1d(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z5expm1d(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z5expm1d(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z5expm1d(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z5expm1d(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z5expm1d(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z5expm1d(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z5expm1d(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z5expm1d(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z5expm1d(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z5expm1d(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z5expm1d(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z5expm1d(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z5expm1d(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z5expm1d(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z5expm1d(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z4fdimu3v16du3v16d(<16 x double> %p0, <16 x double> %p1) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%s1_1 = extractelement <16 x double> %p1, i32 0
	%v1 = call double @_Z4fdimdd(double %s1_0, double %s1_1)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%s2_1 = extractelement <16 x double> %p1, i32 1
	%v2 = call double @_Z4fdimdd(double %s2_0, double %s2_1)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%s3_1 = extractelement <16 x double> %p1, i32 2
	%v3 = call double @_Z4fdimdd(double %s3_0, double %s3_1)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%s4_1 = extractelement <16 x double> %p1, i32 3
	%v4 = call double @_Z4fdimdd(double %s4_0, double %s4_1)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%s5_1 = extractelement <16 x double> %p1, i32 4
	%v5 = call double @_Z4fdimdd(double %s5_0, double %s5_1)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%s6_1 = extractelement <16 x double> %p1, i32 5
	%v6 = call double @_Z4fdimdd(double %s6_0, double %s6_1)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%s7_1 = extractelement <16 x double> %p1, i32 6
	%v7 = call double @_Z4fdimdd(double %s7_0, double %s7_1)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%s8_1 = extractelement <16 x double> %p1, i32 7
	%v8 = call double @_Z4fdimdd(double %s8_0, double %s8_1)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%s9_1 = extractelement <16 x double> %p1, i32 8
	%v9 = call double @_Z4fdimdd(double %s9_0, double %s9_1)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%s10_1 = extractelement <16 x double> %p1, i32 9
	%v10 = call double @_Z4fdimdd(double %s10_0, double %s10_1)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%s11_1 = extractelement <16 x double> %p1, i32 10
	%v11 = call double @_Z4fdimdd(double %s11_0, double %s11_1)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%s12_1 = extractelement <16 x double> %p1, i32 11
	%v12 = call double @_Z4fdimdd(double %s12_0, double %s12_1)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%s13_1 = extractelement <16 x double> %p1, i32 12
	%v13 = call double @_Z4fdimdd(double %s13_0, double %s13_1)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%s14_1 = extractelement <16 x double> %p1, i32 13
	%v14 = call double @_Z4fdimdd(double %s14_0, double %s14_1)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%s15_1 = extractelement <16 x double> %p1, i32 14
	%v15 = call double @_Z4fdimdd(double %s15_0, double %s15_1)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%s16_1 = extractelement <16 x double> %p1, i32 15
	%v16 = call double @_Z4fdimdd(double %s16_0, double %s16_1)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z4fmaxu3v16du3v16d(<16 x double> %p0, <16 x double> %p1) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%s1_1 = extractelement <16 x double> %p1, i32 0
	%v1 = call double @_Z4fmaxdd(double %s1_0, double %s1_1)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%s2_1 = extractelement <16 x double> %p1, i32 1
	%v2 = call double @_Z4fmaxdd(double %s2_0, double %s2_1)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%s3_1 = extractelement <16 x double> %p1, i32 2
	%v3 = call double @_Z4fmaxdd(double %s3_0, double %s3_1)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%s4_1 = extractelement <16 x double> %p1, i32 3
	%v4 = call double @_Z4fmaxdd(double %s4_0, double %s4_1)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%s5_1 = extractelement <16 x double> %p1, i32 4
	%v5 = call double @_Z4fmaxdd(double %s5_0, double %s5_1)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%s6_1 = extractelement <16 x double> %p1, i32 5
	%v6 = call double @_Z4fmaxdd(double %s6_0, double %s6_1)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%s7_1 = extractelement <16 x double> %p1, i32 6
	%v7 = call double @_Z4fmaxdd(double %s7_0, double %s7_1)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%s8_1 = extractelement <16 x double> %p1, i32 7
	%v8 = call double @_Z4fmaxdd(double %s8_0, double %s8_1)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%s9_1 = extractelement <16 x double> %p1, i32 8
	%v9 = call double @_Z4fmaxdd(double %s9_0, double %s9_1)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%s10_1 = extractelement <16 x double> %p1, i32 9
	%v10 = call double @_Z4fmaxdd(double %s10_0, double %s10_1)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%s11_1 = extractelement <16 x double> %p1, i32 10
	%v11 = call double @_Z4fmaxdd(double %s11_0, double %s11_1)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%s12_1 = extractelement <16 x double> %p1, i32 11
	%v12 = call double @_Z4fmaxdd(double %s12_0, double %s12_1)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%s13_1 = extractelement <16 x double> %p1, i32 12
	%v13 = call double @_Z4fmaxdd(double %s13_0, double %s13_1)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%s14_1 = extractelement <16 x double> %p1, i32 13
	%v14 = call double @_Z4fmaxdd(double %s14_0, double %s14_1)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%s15_1 = extractelement <16 x double> %p1, i32 14
	%v15 = call double @_Z4fmaxdd(double %s15_0, double %s15_1)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%s16_1 = extractelement <16 x double> %p1, i32 15
	%v16 = call double @_Z4fmaxdd(double %s16_0, double %s16_1)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z4fminu3v16du3v16d(<16 x double> %p0, <16 x double> %p1) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%s1_1 = extractelement <16 x double> %p1, i32 0
	%v1 = call double @_Z4fmindd(double %s1_0, double %s1_1)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%s2_1 = extractelement <16 x double> %p1, i32 1
	%v2 = call double @_Z4fmindd(double %s2_0, double %s2_1)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%s3_1 = extractelement <16 x double> %p1, i32 2
	%v3 = call double @_Z4fmindd(double %s3_0, double %s3_1)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%s4_1 = extractelement <16 x double> %p1, i32 3
	%v4 = call double @_Z4fmindd(double %s4_0, double %s4_1)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%s5_1 = extractelement <16 x double> %p1, i32 4
	%v5 = call double @_Z4fmindd(double %s5_0, double %s5_1)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%s6_1 = extractelement <16 x double> %p1, i32 5
	%v6 = call double @_Z4fmindd(double %s6_0, double %s6_1)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%s7_1 = extractelement <16 x double> %p1, i32 6
	%v7 = call double @_Z4fmindd(double %s7_0, double %s7_1)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%s8_1 = extractelement <16 x double> %p1, i32 7
	%v8 = call double @_Z4fmindd(double %s8_0, double %s8_1)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%s9_1 = extractelement <16 x double> %p1, i32 8
	%v9 = call double @_Z4fmindd(double %s9_0, double %s9_1)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%s10_1 = extractelement <16 x double> %p1, i32 9
	%v10 = call double @_Z4fmindd(double %s10_0, double %s10_1)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%s11_1 = extractelement <16 x double> %p1, i32 10
	%v11 = call double @_Z4fmindd(double %s11_0, double %s11_1)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%s12_1 = extractelement <16 x double> %p1, i32 11
	%v12 = call double @_Z4fmindd(double %s12_0, double %s12_1)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%s13_1 = extractelement <16 x double> %p1, i32 12
	%v13 = call double @_Z4fmindd(double %s13_0, double %s13_1)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%s14_1 = extractelement <16 x double> %p1, i32 13
	%v14 = call double @_Z4fmindd(double %s14_0, double %s14_1)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%s15_1 = extractelement <16 x double> %p1, i32 14
	%v15 = call double @_Z4fmindd(double %s15_0, double %s15_1)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%s16_1 = extractelement <16 x double> %p1, i32 15
	%v16 = call double @_Z4fmindd(double %s16_0, double %s16_1)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z4fmodu3v16du3v16d(<16 x double> %p0, <16 x double> %p1) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%s1_1 = extractelement <16 x double> %p1, i32 0
	%v1 = call double @_Z4fmoddd(double %s1_0, double %s1_1)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%s2_1 = extractelement <16 x double> %p1, i32 1
	%v2 = call double @_Z4fmoddd(double %s2_0, double %s2_1)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%s3_1 = extractelement <16 x double> %p1, i32 2
	%v3 = call double @_Z4fmoddd(double %s3_0, double %s3_1)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%s4_1 = extractelement <16 x double> %p1, i32 3
	%v4 = call double @_Z4fmoddd(double %s4_0, double %s4_1)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%s5_1 = extractelement <16 x double> %p1, i32 4
	%v5 = call double @_Z4fmoddd(double %s5_0, double %s5_1)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%s6_1 = extractelement <16 x double> %p1, i32 5
	%v6 = call double @_Z4fmoddd(double %s6_0, double %s6_1)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%s7_1 = extractelement <16 x double> %p1, i32 6
	%v7 = call double @_Z4fmoddd(double %s7_0, double %s7_1)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%s8_1 = extractelement <16 x double> %p1, i32 7
	%v8 = call double @_Z4fmoddd(double %s8_0, double %s8_1)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%s9_1 = extractelement <16 x double> %p1, i32 8
	%v9 = call double @_Z4fmoddd(double %s9_0, double %s9_1)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%s10_1 = extractelement <16 x double> %p1, i32 9
	%v10 = call double @_Z4fmoddd(double %s10_0, double %s10_1)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%s11_1 = extractelement <16 x double> %p1, i32 10
	%v11 = call double @_Z4fmoddd(double %s11_0, double %s11_1)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%s12_1 = extractelement <16 x double> %p1, i32 11
	%v12 = call double @_Z4fmoddd(double %s12_0, double %s12_1)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%s13_1 = extractelement <16 x double> %p1, i32 12
	%v13 = call double @_Z4fmoddd(double %s13_0, double %s13_1)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%s14_1 = extractelement <16 x double> %p1, i32 13
	%v14 = call double @_Z4fmoddd(double %s14_0, double %s14_1)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%s15_1 = extractelement <16 x double> %p1, i32 14
	%v15 = call double @_Z4fmoddd(double %s15_0, double %s15_1)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%s16_1 = extractelement <16 x double> %p1, i32 15
	%v16 = call double @_Z4fmoddd(double %s16_0, double %s16_1)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z5fractu3v16dPu3v16d(<16 x double> %p0, <16 x double>* %p1) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%s1_1 = getelementptr <16 x double>* %p1, i32 0, i32 0
	%v1 = call double @_Z5fractdPd(double %s1_0, double* %s1_1)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%s2_1 = getelementptr <16 x double>* %p1, i32 0, i32 1
	%v2 = call double @_Z5fractdPd(double %s2_0, double* %s2_1)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%s3_1 = getelementptr <16 x double>* %p1, i32 0, i32 2
	%v3 = call double @_Z5fractdPd(double %s3_0, double* %s3_1)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%s4_1 = getelementptr <16 x double>* %p1, i32 0, i32 3
	%v4 = call double @_Z5fractdPd(double %s4_0, double* %s4_1)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%s5_1 = getelementptr <16 x double>* %p1, i32 0, i32 4
	%v5 = call double @_Z5fractdPd(double %s5_0, double* %s5_1)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%s6_1 = getelementptr <16 x double>* %p1, i32 0, i32 5
	%v6 = call double @_Z5fractdPd(double %s6_0, double* %s6_1)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%s7_1 = getelementptr <16 x double>* %p1, i32 0, i32 6
	%v7 = call double @_Z5fractdPd(double %s7_0, double* %s7_1)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%s8_1 = getelementptr <16 x double>* %p1, i32 0, i32 7
	%v8 = call double @_Z5fractdPd(double %s8_0, double* %s8_1)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%s9_1 = getelementptr <16 x double>* %p1, i32 0, i32 8
	%v9 = call double @_Z5fractdPd(double %s9_0, double* %s9_1)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%s10_1 = getelementptr <16 x double>* %p1, i32 0, i32 9
	%v10 = call double @_Z5fractdPd(double %s10_0, double* %s10_1)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%s11_1 = getelementptr <16 x double>* %p1, i32 0, i32 10
	%v11 = call double @_Z5fractdPd(double %s11_0, double* %s11_1)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%s12_1 = getelementptr <16 x double>* %p1, i32 0, i32 11
	%v12 = call double @_Z5fractdPd(double %s12_0, double* %s12_1)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%s13_1 = getelementptr <16 x double>* %p1, i32 0, i32 12
	%v13 = call double @_Z5fractdPd(double %s13_0, double* %s13_1)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%s14_1 = getelementptr <16 x double>* %p1, i32 0, i32 13
	%v14 = call double @_Z5fractdPd(double %s14_0, double* %s14_1)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%s15_1 = getelementptr <16 x double>* %p1, i32 0, i32 14
	%v15 = call double @_Z5fractdPd(double %s15_0, double* %s15_1)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%s16_1 = getelementptr <16 x double>* %p1, i32 0, i32 15
	%v16 = call double @_Z5fractdPd(double %s16_0, double* %s16_1)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z5frexpu3v16dPu3v16i(<16 x double> %p0, <16 x i32>* %p1) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%s1_1 = getelementptr <16 x i32>* %p1, i32 0, i32 0
	%v1 = call double @_Z5frexpdPi(double %s1_0, i32* %s1_1)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%s2_1 = getelementptr <16 x i32>* %p1, i32 0, i32 1
	%v2 = call double @_Z5frexpdPi(double %s2_0, i32* %s2_1)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%s3_1 = getelementptr <16 x i32>* %p1, i32 0, i32 2
	%v3 = call double @_Z5frexpdPi(double %s3_0, i32* %s3_1)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%s4_1 = getelementptr <16 x i32>* %p1, i32 0, i32 3
	%v4 = call double @_Z5frexpdPi(double %s4_0, i32* %s4_1)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%s5_1 = getelementptr <16 x i32>* %p1, i32 0, i32 4
	%v5 = call double @_Z5frexpdPi(double %s5_0, i32* %s5_1)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%s6_1 = getelementptr <16 x i32>* %p1, i32 0, i32 5
	%v6 = call double @_Z5frexpdPi(double %s6_0, i32* %s6_1)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%s7_1 = getelementptr <16 x i32>* %p1, i32 0, i32 6
	%v7 = call double @_Z5frexpdPi(double %s7_0, i32* %s7_1)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%s8_1 = getelementptr <16 x i32>* %p1, i32 0, i32 7
	%v8 = call double @_Z5frexpdPi(double %s8_0, i32* %s8_1)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%s9_1 = getelementptr <16 x i32>* %p1, i32 0, i32 8
	%v9 = call double @_Z5frexpdPi(double %s9_0, i32* %s9_1)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%s10_1 = getelementptr <16 x i32>* %p1, i32 0, i32 9
	%v10 = call double @_Z5frexpdPi(double %s10_0, i32* %s10_1)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%s11_1 = getelementptr <16 x i32>* %p1, i32 0, i32 10
	%v11 = call double @_Z5frexpdPi(double %s11_0, i32* %s11_1)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%s12_1 = getelementptr <16 x i32>* %p1, i32 0, i32 11
	%v12 = call double @_Z5frexpdPi(double %s12_0, i32* %s12_1)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%s13_1 = getelementptr <16 x i32>* %p1, i32 0, i32 12
	%v13 = call double @_Z5frexpdPi(double %s13_0, i32* %s13_1)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%s14_1 = getelementptr <16 x i32>* %p1, i32 0, i32 13
	%v14 = call double @_Z5frexpdPi(double %s14_0, i32* %s14_1)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%s15_1 = getelementptr <16 x i32>* %p1, i32 0, i32 14
	%v15 = call double @_Z5frexpdPi(double %s15_0, i32* %s15_1)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%s16_1 = getelementptr <16 x i32>* %p1, i32 0, i32 15
	%v16 = call double @_Z5frexpdPi(double %s16_0, i32* %s16_1)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z5hypotu3v16du3v16d(<16 x double> %p0, <16 x double> %p1) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%s1_1 = extractelement <16 x double> %p1, i32 0
	%v1 = call double @_Z5hypotdd(double %s1_0, double %s1_1)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%s2_1 = extractelement <16 x double> %p1, i32 1
	%v2 = call double @_Z5hypotdd(double %s2_0, double %s2_1)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%s3_1 = extractelement <16 x double> %p1, i32 2
	%v3 = call double @_Z5hypotdd(double %s3_0, double %s3_1)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%s4_1 = extractelement <16 x double> %p1, i32 3
	%v4 = call double @_Z5hypotdd(double %s4_0, double %s4_1)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%s5_1 = extractelement <16 x double> %p1, i32 4
	%v5 = call double @_Z5hypotdd(double %s5_0, double %s5_1)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%s6_1 = extractelement <16 x double> %p1, i32 5
	%v6 = call double @_Z5hypotdd(double %s6_0, double %s6_1)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%s7_1 = extractelement <16 x double> %p1, i32 6
	%v7 = call double @_Z5hypotdd(double %s7_0, double %s7_1)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%s8_1 = extractelement <16 x double> %p1, i32 7
	%v8 = call double @_Z5hypotdd(double %s8_0, double %s8_1)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%s9_1 = extractelement <16 x double> %p1, i32 8
	%v9 = call double @_Z5hypotdd(double %s9_0, double %s9_1)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%s10_1 = extractelement <16 x double> %p1, i32 9
	%v10 = call double @_Z5hypotdd(double %s10_0, double %s10_1)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%s11_1 = extractelement <16 x double> %p1, i32 10
	%v11 = call double @_Z5hypotdd(double %s11_0, double %s11_1)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%s12_1 = extractelement <16 x double> %p1, i32 11
	%v12 = call double @_Z5hypotdd(double %s12_0, double %s12_1)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%s13_1 = extractelement <16 x double> %p1, i32 12
	%v13 = call double @_Z5hypotdd(double %s13_0, double %s13_1)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%s14_1 = extractelement <16 x double> %p1, i32 13
	%v14 = call double @_Z5hypotdd(double %s14_0, double %s14_1)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%s15_1 = extractelement <16 x double> %p1, i32 14
	%v15 = call double @_Z5hypotdd(double %s15_0, double %s15_1)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%s16_1 = extractelement <16 x double> %p1, i32 15
	%v16 = call double @_Z5hypotdd(double %s16_0, double %s16_1)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z5ldexpu3v16du3v16i(<16 x double> %p0, <16 x i32> %p1) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%s1_1 = extractelement <16 x i32> %p1, i32 0
	%v1 = call double @_Z5ldexpdi(double %s1_0, i32 %s1_1)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%s2_1 = extractelement <16 x i32> %p1, i32 1
	%v2 = call double @_Z5ldexpdi(double %s2_0, i32 %s2_1)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%s3_1 = extractelement <16 x i32> %p1, i32 2
	%v3 = call double @_Z5ldexpdi(double %s3_0, i32 %s3_1)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%s4_1 = extractelement <16 x i32> %p1, i32 3
	%v4 = call double @_Z5ldexpdi(double %s4_0, i32 %s4_1)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%s5_1 = extractelement <16 x i32> %p1, i32 4
	%v5 = call double @_Z5ldexpdi(double %s5_0, i32 %s5_1)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%s6_1 = extractelement <16 x i32> %p1, i32 5
	%v6 = call double @_Z5ldexpdi(double %s6_0, i32 %s6_1)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%s7_1 = extractelement <16 x i32> %p1, i32 6
	%v7 = call double @_Z5ldexpdi(double %s7_0, i32 %s7_1)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%s8_1 = extractelement <16 x i32> %p1, i32 7
	%v8 = call double @_Z5ldexpdi(double %s8_0, i32 %s8_1)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%s9_1 = extractelement <16 x i32> %p1, i32 8
	%v9 = call double @_Z5ldexpdi(double %s9_0, i32 %s9_1)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%s10_1 = extractelement <16 x i32> %p1, i32 9
	%v10 = call double @_Z5ldexpdi(double %s10_0, i32 %s10_1)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%s11_1 = extractelement <16 x i32> %p1, i32 10
	%v11 = call double @_Z5ldexpdi(double %s11_0, i32 %s11_1)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%s12_1 = extractelement <16 x i32> %p1, i32 11
	%v12 = call double @_Z5ldexpdi(double %s12_0, i32 %s12_1)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%s13_1 = extractelement <16 x i32> %p1, i32 12
	%v13 = call double @_Z5ldexpdi(double %s13_0, i32 %s13_1)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%s14_1 = extractelement <16 x i32> %p1, i32 13
	%v14 = call double @_Z5ldexpdi(double %s14_0, i32 %s14_1)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%s15_1 = extractelement <16 x i32> %p1, i32 14
	%v15 = call double @_Z5ldexpdi(double %s15_0, i32 %s15_1)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%s16_1 = extractelement <16 x i32> %p1, i32 15
	%v16 = call double @_Z5ldexpdi(double %s16_0, i32 %s16_1)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z6lgammau3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z6lgammad(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z6lgammad(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z6lgammad(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z6lgammad(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z6lgammad(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z6lgammad(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z6lgammad(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z6lgammad(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z6lgammad(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z6lgammad(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z6lgammad(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z6lgammad(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z6lgammad(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z6lgammad(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z6lgammad(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z6lgammad(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z8lgamma_ru3v16dPu3v16i(<16 x double> %p0, <16 x i32>* %p1) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%s1_1 = getelementptr <16 x i32>* %p1, i32 0, i32 0
	%v1 = call double @_Z8lgamma_rdPi(double %s1_0, i32* %s1_1)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%s2_1 = getelementptr <16 x i32>* %p1, i32 0, i32 1
	%v2 = call double @_Z8lgamma_rdPi(double %s2_0, i32* %s2_1)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%s3_1 = getelementptr <16 x i32>* %p1, i32 0, i32 2
	%v3 = call double @_Z8lgamma_rdPi(double %s3_0, i32* %s3_1)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%s4_1 = getelementptr <16 x i32>* %p1, i32 0, i32 3
	%v4 = call double @_Z8lgamma_rdPi(double %s4_0, i32* %s4_1)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%s5_1 = getelementptr <16 x i32>* %p1, i32 0, i32 4
	%v5 = call double @_Z8lgamma_rdPi(double %s5_0, i32* %s5_1)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%s6_1 = getelementptr <16 x i32>* %p1, i32 0, i32 5
	%v6 = call double @_Z8lgamma_rdPi(double %s6_0, i32* %s6_1)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%s7_1 = getelementptr <16 x i32>* %p1, i32 0, i32 6
	%v7 = call double @_Z8lgamma_rdPi(double %s7_0, i32* %s7_1)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%s8_1 = getelementptr <16 x i32>* %p1, i32 0, i32 7
	%v8 = call double @_Z8lgamma_rdPi(double %s8_0, i32* %s8_1)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%s9_1 = getelementptr <16 x i32>* %p1, i32 0, i32 8
	%v9 = call double @_Z8lgamma_rdPi(double %s9_0, i32* %s9_1)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%s10_1 = getelementptr <16 x i32>* %p1, i32 0, i32 9
	%v10 = call double @_Z8lgamma_rdPi(double %s10_0, i32* %s10_1)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%s11_1 = getelementptr <16 x i32>* %p1, i32 0, i32 10
	%v11 = call double @_Z8lgamma_rdPi(double %s11_0, i32* %s11_1)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%s12_1 = getelementptr <16 x i32>* %p1, i32 0, i32 11
	%v12 = call double @_Z8lgamma_rdPi(double %s12_0, i32* %s12_1)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%s13_1 = getelementptr <16 x i32>* %p1, i32 0, i32 12
	%v13 = call double @_Z8lgamma_rdPi(double %s13_0, i32* %s13_1)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%s14_1 = getelementptr <16 x i32>* %p1, i32 0, i32 13
	%v14 = call double @_Z8lgamma_rdPi(double %s14_0, i32* %s14_1)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%s15_1 = getelementptr <16 x i32>* %p1, i32 0, i32 14
	%v15 = call double @_Z8lgamma_rdPi(double %s15_0, i32* %s15_1)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%s16_1 = getelementptr <16 x i32>* %p1, i32 0, i32 15
	%v16 = call double @_Z8lgamma_rdPi(double %s16_0, i32* %s16_1)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z4log2u3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z4log2d(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z4log2d(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z4log2d(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z4log2d(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z4log2d(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z4log2d(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z4log2d(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z4log2d(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z4log2d(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z4log2d(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z4log2d(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z4log2d(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z4log2d(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z4log2d(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z4log2d(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z4log2d(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z5log10u3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z5log10d(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z5log10d(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z5log10d(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z5log10d(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z5log10d(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z5log10d(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z5log10d(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z5log10d(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z5log10d(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z5log10d(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z5log10d(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z5log10d(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z5log10d(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z5log10d(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z5log10d(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z5log10d(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z5log1pu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z5log1pd(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z5log1pd(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z5log1pd(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z5log1pd(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z5log1pd(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z5log1pd(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z5log1pd(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z5log1pd(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z5log1pd(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z5log1pd(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z5log1pd(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z5log1pd(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z5log1pd(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z5log1pd(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z5log1pd(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z5log1pd(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z4logbu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z4logbd(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z4logbd(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z4logbd(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z4logbd(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z4logbd(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z4logbd(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z4logbd(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z4logbd(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z4logbd(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z4logbd(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z4logbd(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z4logbd(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z4logbd(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z4logbd(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z4logbd(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z4logbd(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z3madu3v16du3v16du3v16d(<16 x double> %p0, <16 x double> %p1, <16 x double> %p2) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%s1_1 = extractelement <16 x double> %p1, i32 0
	%s1_2 = extractelement <16 x double> %p2, i32 0
	%v1 = call double @_Z3madddd(double %s1_0, double %s1_1, double %s1_2)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%s2_1 = extractelement <16 x double> %p1, i32 1
	%s2_2 = extractelement <16 x double> %p2, i32 1
	%v2 = call double @_Z3madddd(double %s2_0, double %s2_1, double %s2_2)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%s3_1 = extractelement <16 x double> %p1, i32 2
	%s3_2 = extractelement <16 x double> %p2, i32 2
	%v3 = call double @_Z3madddd(double %s3_0, double %s3_1, double %s3_2)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%s4_1 = extractelement <16 x double> %p1, i32 3
	%s4_2 = extractelement <16 x double> %p2, i32 3
	%v4 = call double @_Z3madddd(double %s4_0, double %s4_1, double %s4_2)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%s5_1 = extractelement <16 x double> %p1, i32 4
	%s5_2 = extractelement <16 x double> %p2, i32 4
	%v5 = call double @_Z3madddd(double %s5_0, double %s5_1, double %s5_2)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%s6_1 = extractelement <16 x double> %p1, i32 5
	%s6_2 = extractelement <16 x double> %p2, i32 5
	%v6 = call double @_Z3madddd(double %s6_0, double %s6_1, double %s6_2)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%s7_1 = extractelement <16 x double> %p1, i32 6
	%s7_2 = extractelement <16 x double> %p2, i32 6
	%v7 = call double @_Z3madddd(double %s7_0, double %s7_1, double %s7_2)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%s8_1 = extractelement <16 x double> %p1, i32 7
	%s8_2 = extractelement <16 x double> %p2, i32 7
	%v8 = call double @_Z3madddd(double %s8_0, double %s8_1, double %s8_2)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%s9_1 = extractelement <16 x double> %p1, i32 8
	%s9_2 = extractelement <16 x double> %p2, i32 8
	%v9 = call double @_Z3madddd(double %s9_0, double %s9_1, double %s9_2)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%s10_1 = extractelement <16 x double> %p1, i32 9
	%s10_2 = extractelement <16 x double> %p2, i32 9
	%v10 = call double @_Z3madddd(double %s10_0, double %s10_1, double %s10_2)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%s11_1 = extractelement <16 x double> %p1, i32 10
	%s11_2 = extractelement <16 x double> %p2, i32 10
	%v11 = call double @_Z3madddd(double %s11_0, double %s11_1, double %s11_2)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%s12_1 = extractelement <16 x double> %p1, i32 11
	%s12_2 = extractelement <16 x double> %p2, i32 11
	%v12 = call double @_Z3madddd(double %s12_0, double %s12_1, double %s12_2)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%s13_1 = extractelement <16 x double> %p1, i32 12
	%s13_2 = extractelement <16 x double> %p2, i32 12
	%v13 = call double @_Z3madddd(double %s13_0, double %s13_1, double %s13_2)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%s14_1 = extractelement <16 x double> %p1, i32 13
	%s14_2 = extractelement <16 x double> %p2, i32 13
	%v14 = call double @_Z3madddd(double %s14_0, double %s14_1, double %s14_2)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%s15_1 = extractelement <16 x double> %p1, i32 14
	%s15_2 = extractelement <16 x double> %p2, i32 14
	%v15 = call double @_Z3madddd(double %s15_0, double %s15_1, double %s15_2)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%s16_1 = extractelement <16 x double> %p1, i32 15
	%s16_2 = extractelement <16 x double> %p2, i32 15
	%v16 = call double @_Z3madddd(double %s16_0, double %s16_1, double %s16_2)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z6maxmagu3v16du3v16d(<16 x double> %p0, <16 x double> %p1) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%s1_1 = extractelement <16 x double> %p1, i32 0
	%v1 = call double @_Z6maxmagdd(double %s1_0, double %s1_1)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%s2_1 = extractelement <16 x double> %p1, i32 1
	%v2 = call double @_Z6maxmagdd(double %s2_0, double %s2_1)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%s3_1 = extractelement <16 x double> %p1, i32 2
	%v3 = call double @_Z6maxmagdd(double %s3_0, double %s3_1)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%s4_1 = extractelement <16 x double> %p1, i32 3
	%v4 = call double @_Z6maxmagdd(double %s4_0, double %s4_1)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%s5_1 = extractelement <16 x double> %p1, i32 4
	%v5 = call double @_Z6maxmagdd(double %s5_0, double %s5_1)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%s6_1 = extractelement <16 x double> %p1, i32 5
	%v6 = call double @_Z6maxmagdd(double %s6_0, double %s6_1)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%s7_1 = extractelement <16 x double> %p1, i32 6
	%v7 = call double @_Z6maxmagdd(double %s7_0, double %s7_1)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%s8_1 = extractelement <16 x double> %p1, i32 7
	%v8 = call double @_Z6maxmagdd(double %s8_0, double %s8_1)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%s9_1 = extractelement <16 x double> %p1, i32 8
	%v9 = call double @_Z6maxmagdd(double %s9_0, double %s9_1)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%s10_1 = extractelement <16 x double> %p1, i32 9
	%v10 = call double @_Z6maxmagdd(double %s10_0, double %s10_1)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%s11_1 = extractelement <16 x double> %p1, i32 10
	%v11 = call double @_Z6maxmagdd(double %s11_0, double %s11_1)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%s12_1 = extractelement <16 x double> %p1, i32 11
	%v12 = call double @_Z6maxmagdd(double %s12_0, double %s12_1)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%s13_1 = extractelement <16 x double> %p1, i32 12
	%v13 = call double @_Z6maxmagdd(double %s13_0, double %s13_1)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%s14_1 = extractelement <16 x double> %p1, i32 13
	%v14 = call double @_Z6maxmagdd(double %s14_0, double %s14_1)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%s15_1 = extractelement <16 x double> %p1, i32 14
	%v15 = call double @_Z6maxmagdd(double %s15_0, double %s15_1)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%s16_1 = extractelement <16 x double> %p1, i32 15
	%v16 = call double @_Z6maxmagdd(double %s16_0, double %s16_1)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z6minmagu3v16du3v16d(<16 x double> %p0, <16 x double> %p1) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%s1_1 = extractelement <16 x double> %p1, i32 0
	%v1 = call double @_Z6minmagdd(double %s1_0, double %s1_1)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%s2_1 = extractelement <16 x double> %p1, i32 1
	%v2 = call double @_Z6minmagdd(double %s2_0, double %s2_1)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%s3_1 = extractelement <16 x double> %p1, i32 2
	%v3 = call double @_Z6minmagdd(double %s3_0, double %s3_1)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%s4_1 = extractelement <16 x double> %p1, i32 3
	%v4 = call double @_Z6minmagdd(double %s4_0, double %s4_1)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%s5_1 = extractelement <16 x double> %p1, i32 4
	%v5 = call double @_Z6minmagdd(double %s5_0, double %s5_1)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%s6_1 = extractelement <16 x double> %p1, i32 5
	%v6 = call double @_Z6minmagdd(double %s6_0, double %s6_1)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%s7_1 = extractelement <16 x double> %p1, i32 6
	%v7 = call double @_Z6minmagdd(double %s7_0, double %s7_1)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%s8_1 = extractelement <16 x double> %p1, i32 7
	%v8 = call double @_Z6minmagdd(double %s8_0, double %s8_1)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%s9_1 = extractelement <16 x double> %p1, i32 8
	%v9 = call double @_Z6minmagdd(double %s9_0, double %s9_1)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%s10_1 = extractelement <16 x double> %p1, i32 9
	%v10 = call double @_Z6minmagdd(double %s10_0, double %s10_1)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%s11_1 = extractelement <16 x double> %p1, i32 10
	%v11 = call double @_Z6minmagdd(double %s11_0, double %s11_1)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%s12_1 = extractelement <16 x double> %p1, i32 11
	%v12 = call double @_Z6minmagdd(double %s12_0, double %s12_1)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%s13_1 = extractelement <16 x double> %p1, i32 12
	%v13 = call double @_Z6minmagdd(double %s13_0, double %s13_1)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%s14_1 = extractelement <16 x double> %p1, i32 13
	%v14 = call double @_Z6minmagdd(double %s14_0, double %s14_1)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%s15_1 = extractelement <16 x double> %p1, i32 14
	%v15 = call double @_Z6minmagdd(double %s15_0, double %s15_1)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%s16_1 = extractelement <16 x double> %p1, i32 15
	%v16 = call double @_Z6minmagdd(double %s16_0, double %s16_1)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z4modfu3v16dPu3v16d(<16 x double> %p0, <16 x double>* %p1) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%s1_1 = getelementptr <16 x double>* %p1, i32 0, i32 0
	%v1 = call double @_Z4modfdPd(double %s1_0, double* %s1_1)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%s2_1 = getelementptr <16 x double>* %p1, i32 0, i32 1
	%v2 = call double @_Z4modfdPd(double %s2_0, double* %s2_1)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%s3_1 = getelementptr <16 x double>* %p1, i32 0, i32 2
	%v3 = call double @_Z4modfdPd(double %s3_0, double* %s3_1)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%s4_1 = getelementptr <16 x double>* %p1, i32 0, i32 3
	%v4 = call double @_Z4modfdPd(double %s4_0, double* %s4_1)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%s5_1 = getelementptr <16 x double>* %p1, i32 0, i32 4
	%v5 = call double @_Z4modfdPd(double %s5_0, double* %s5_1)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%s6_1 = getelementptr <16 x double>* %p1, i32 0, i32 5
	%v6 = call double @_Z4modfdPd(double %s6_0, double* %s6_1)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%s7_1 = getelementptr <16 x double>* %p1, i32 0, i32 6
	%v7 = call double @_Z4modfdPd(double %s7_0, double* %s7_1)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%s8_1 = getelementptr <16 x double>* %p1, i32 0, i32 7
	%v8 = call double @_Z4modfdPd(double %s8_0, double* %s8_1)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%s9_1 = getelementptr <16 x double>* %p1, i32 0, i32 8
	%v9 = call double @_Z4modfdPd(double %s9_0, double* %s9_1)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%s10_1 = getelementptr <16 x double>* %p1, i32 0, i32 9
	%v10 = call double @_Z4modfdPd(double %s10_0, double* %s10_1)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%s11_1 = getelementptr <16 x double>* %p1, i32 0, i32 10
	%v11 = call double @_Z4modfdPd(double %s11_0, double* %s11_1)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%s12_1 = getelementptr <16 x double>* %p1, i32 0, i32 11
	%v12 = call double @_Z4modfdPd(double %s12_0, double* %s12_1)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%s13_1 = getelementptr <16 x double>* %p1, i32 0, i32 12
	%v13 = call double @_Z4modfdPd(double %s13_0, double* %s13_1)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%s14_1 = getelementptr <16 x double>* %p1, i32 0, i32 13
	%v14 = call double @_Z4modfdPd(double %s14_0, double* %s14_1)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%s15_1 = getelementptr <16 x double>* %p1, i32 0, i32 14
	%v15 = call double @_Z4modfdPd(double %s15_0, double* %s15_1)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%s16_1 = getelementptr <16 x double>* %p1, i32 0, i32 15
	%v16 = call double @_Z4modfdPd(double %s16_0, double* %s16_1)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z9nextafteru3v16du3v16d(<16 x double> %p0, <16 x double> %p1) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%s1_1 = extractelement <16 x double> %p1, i32 0
	%v1 = call double @_Z9nextafterdd(double %s1_0, double %s1_1)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%s2_1 = extractelement <16 x double> %p1, i32 1
	%v2 = call double @_Z9nextafterdd(double %s2_0, double %s2_1)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%s3_1 = extractelement <16 x double> %p1, i32 2
	%v3 = call double @_Z9nextafterdd(double %s3_0, double %s3_1)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%s4_1 = extractelement <16 x double> %p1, i32 3
	%v4 = call double @_Z9nextafterdd(double %s4_0, double %s4_1)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%s5_1 = extractelement <16 x double> %p1, i32 4
	%v5 = call double @_Z9nextafterdd(double %s5_0, double %s5_1)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%s6_1 = extractelement <16 x double> %p1, i32 5
	%v6 = call double @_Z9nextafterdd(double %s6_0, double %s6_1)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%s7_1 = extractelement <16 x double> %p1, i32 6
	%v7 = call double @_Z9nextafterdd(double %s7_0, double %s7_1)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%s8_1 = extractelement <16 x double> %p1, i32 7
	%v8 = call double @_Z9nextafterdd(double %s8_0, double %s8_1)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%s9_1 = extractelement <16 x double> %p1, i32 8
	%v9 = call double @_Z9nextafterdd(double %s9_0, double %s9_1)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%s10_1 = extractelement <16 x double> %p1, i32 9
	%v10 = call double @_Z9nextafterdd(double %s10_0, double %s10_1)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%s11_1 = extractelement <16 x double> %p1, i32 10
	%v11 = call double @_Z9nextafterdd(double %s11_0, double %s11_1)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%s12_1 = extractelement <16 x double> %p1, i32 11
	%v12 = call double @_Z9nextafterdd(double %s12_0, double %s12_1)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%s13_1 = extractelement <16 x double> %p1, i32 12
	%v13 = call double @_Z9nextafterdd(double %s13_0, double %s13_1)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%s14_1 = extractelement <16 x double> %p1, i32 13
	%v14 = call double @_Z9nextafterdd(double %s14_0, double %s14_1)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%s15_1 = extractelement <16 x double> %p1, i32 14
	%v15 = call double @_Z9nextafterdd(double %s15_0, double %s15_1)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%s16_1 = extractelement <16 x double> %p1, i32 15
	%v16 = call double @_Z9nextafterdd(double %s16_0, double %s16_1)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z4powru3v16du3v16d(<16 x double> %p0, <16 x double> %p1) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%s1_1 = extractelement <16 x double> %p1, i32 0
	%v1 = call double @_Z4powrdd(double %s1_0, double %s1_1)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%s2_1 = extractelement <16 x double> %p1, i32 1
	%v2 = call double @_Z4powrdd(double %s2_0, double %s2_1)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%s3_1 = extractelement <16 x double> %p1, i32 2
	%v3 = call double @_Z4powrdd(double %s3_0, double %s3_1)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%s4_1 = extractelement <16 x double> %p1, i32 3
	%v4 = call double @_Z4powrdd(double %s4_0, double %s4_1)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%s5_1 = extractelement <16 x double> %p1, i32 4
	%v5 = call double @_Z4powrdd(double %s5_0, double %s5_1)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%s6_1 = extractelement <16 x double> %p1, i32 5
	%v6 = call double @_Z4powrdd(double %s6_0, double %s6_1)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%s7_1 = extractelement <16 x double> %p1, i32 6
	%v7 = call double @_Z4powrdd(double %s7_0, double %s7_1)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%s8_1 = extractelement <16 x double> %p1, i32 7
	%v8 = call double @_Z4powrdd(double %s8_0, double %s8_1)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%s9_1 = extractelement <16 x double> %p1, i32 8
	%v9 = call double @_Z4powrdd(double %s9_0, double %s9_1)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%s10_1 = extractelement <16 x double> %p1, i32 9
	%v10 = call double @_Z4powrdd(double %s10_0, double %s10_1)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%s11_1 = extractelement <16 x double> %p1, i32 10
	%v11 = call double @_Z4powrdd(double %s11_0, double %s11_1)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%s12_1 = extractelement <16 x double> %p1, i32 11
	%v12 = call double @_Z4powrdd(double %s12_0, double %s12_1)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%s13_1 = extractelement <16 x double> %p1, i32 12
	%v13 = call double @_Z4powrdd(double %s13_0, double %s13_1)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%s14_1 = extractelement <16 x double> %p1, i32 13
	%v14 = call double @_Z4powrdd(double %s14_0, double %s14_1)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%s15_1 = extractelement <16 x double> %p1, i32 14
	%v15 = call double @_Z4powrdd(double %s15_0, double %s15_1)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%s16_1 = extractelement <16 x double> %p1, i32 15
	%v16 = call double @_Z4powrdd(double %s16_0, double %s16_1)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z9remainderu3v16du3v16d(<16 x double> %p0, <16 x double> %p1) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%s1_1 = extractelement <16 x double> %p1, i32 0
	%v1 = call double @_Z9remainderdd(double %s1_0, double %s1_1)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%s2_1 = extractelement <16 x double> %p1, i32 1
	%v2 = call double @_Z9remainderdd(double %s2_0, double %s2_1)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%s3_1 = extractelement <16 x double> %p1, i32 2
	%v3 = call double @_Z9remainderdd(double %s3_0, double %s3_1)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%s4_1 = extractelement <16 x double> %p1, i32 3
	%v4 = call double @_Z9remainderdd(double %s4_0, double %s4_1)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%s5_1 = extractelement <16 x double> %p1, i32 4
	%v5 = call double @_Z9remainderdd(double %s5_0, double %s5_1)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%s6_1 = extractelement <16 x double> %p1, i32 5
	%v6 = call double @_Z9remainderdd(double %s6_0, double %s6_1)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%s7_1 = extractelement <16 x double> %p1, i32 6
	%v7 = call double @_Z9remainderdd(double %s7_0, double %s7_1)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%s8_1 = extractelement <16 x double> %p1, i32 7
	%v8 = call double @_Z9remainderdd(double %s8_0, double %s8_1)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%s9_1 = extractelement <16 x double> %p1, i32 8
	%v9 = call double @_Z9remainderdd(double %s9_0, double %s9_1)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%s10_1 = extractelement <16 x double> %p1, i32 9
	%v10 = call double @_Z9remainderdd(double %s10_0, double %s10_1)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%s11_1 = extractelement <16 x double> %p1, i32 10
	%v11 = call double @_Z9remainderdd(double %s11_0, double %s11_1)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%s12_1 = extractelement <16 x double> %p1, i32 11
	%v12 = call double @_Z9remainderdd(double %s12_0, double %s12_1)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%s13_1 = extractelement <16 x double> %p1, i32 12
	%v13 = call double @_Z9remainderdd(double %s13_0, double %s13_1)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%s14_1 = extractelement <16 x double> %p1, i32 13
	%v14 = call double @_Z9remainderdd(double %s14_0, double %s14_1)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%s15_1 = extractelement <16 x double> %p1, i32 14
	%v15 = call double @_Z9remainderdd(double %s15_0, double %s15_1)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%s16_1 = extractelement <16 x double> %p1, i32 15
	%v16 = call double @_Z9remainderdd(double %s16_0, double %s16_1)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z6remquou3v16du3v16dPu3v16i(<16 x double> %p0, <16 x double> %p1, <16 x i32>* %p2) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%s1_1 = extractelement <16 x double> %p1, i32 0
	%s1_2 = getelementptr <16 x i32>* %p2, i32 0, i32 0
	%v1 = call double @_Z6remquoddPi(double %s1_0, double %s1_1, i32* %s1_2)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%s2_1 = extractelement <16 x double> %p1, i32 1
	%s2_2 = getelementptr <16 x i32>* %p2, i32 0, i32 1
	%v2 = call double @_Z6remquoddPi(double %s2_0, double %s2_1, i32* %s2_2)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%s3_1 = extractelement <16 x double> %p1, i32 2
	%s3_2 = getelementptr <16 x i32>* %p2, i32 0, i32 2
	%v3 = call double @_Z6remquoddPi(double %s3_0, double %s3_1, i32* %s3_2)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%s4_1 = extractelement <16 x double> %p1, i32 3
	%s4_2 = getelementptr <16 x i32>* %p2, i32 0, i32 3
	%v4 = call double @_Z6remquoddPi(double %s4_0, double %s4_1, i32* %s4_2)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%s5_1 = extractelement <16 x double> %p1, i32 4
	%s5_2 = getelementptr <16 x i32>* %p2, i32 0, i32 4
	%v5 = call double @_Z6remquoddPi(double %s5_0, double %s5_1, i32* %s5_2)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%s6_1 = extractelement <16 x double> %p1, i32 5
	%s6_2 = getelementptr <16 x i32>* %p2, i32 0, i32 5
	%v6 = call double @_Z6remquoddPi(double %s6_0, double %s6_1, i32* %s6_2)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%s7_1 = extractelement <16 x double> %p1, i32 6
	%s7_2 = getelementptr <16 x i32>* %p2, i32 0, i32 6
	%v7 = call double @_Z6remquoddPi(double %s7_0, double %s7_1, i32* %s7_2)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%s8_1 = extractelement <16 x double> %p1, i32 7
	%s8_2 = getelementptr <16 x i32>* %p2, i32 0, i32 7
	%v8 = call double @_Z6remquoddPi(double %s8_0, double %s8_1, i32* %s8_2)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%s9_1 = extractelement <16 x double> %p1, i32 8
	%s9_2 = getelementptr <16 x i32>* %p2, i32 0, i32 8
	%v9 = call double @_Z6remquoddPi(double %s9_0, double %s9_1, i32* %s9_2)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%s10_1 = extractelement <16 x double> %p1, i32 9
	%s10_2 = getelementptr <16 x i32>* %p2, i32 0, i32 9
	%v10 = call double @_Z6remquoddPi(double %s10_0, double %s10_1, i32* %s10_2)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%s11_1 = extractelement <16 x double> %p1, i32 10
	%s11_2 = getelementptr <16 x i32>* %p2, i32 0, i32 10
	%v11 = call double @_Z6remquoddPi(double %s11_0, double %s11_1, i32* %s11_2)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%s12_1 = extractelement <16 x double> %p1, i32 11
	%s12_2 = getelementptr <16 x i32>* %p2, i32 0, i32 11
	%v12 = call double @_Z6remquoddPi(double %s12_0, double %s12_1, i32* %s12_2)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%s13_1 = extractelement <16 x double> %p1, i32 12
	%s13_2 = getelementptr <16 x i32>* %p2, i32 0, i32 12
	%v13 = call double @_Z6remquoddPi(double %s13_0, double %s13_1, i32* %s13_2)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%s14_1 = extractelement <16 x double> %p1, i32 13
	%s14_2 = getelementptr <16 x i32>* %p2, i32 0, i32 13
	%v14 = call double @_Z6remquoddPi(double %s14_0, double %s14_1, i32* %s14_2)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%s15_1 = extractelement <16 x double> %p1, i32 14
	%s15_2 = getelementptr <16 x i32>* %p2, i32 0, i32 14
	%v15 = call double @_Z6remquoddPi(double %s15_0, double %s15_1, i32* %s15_2)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%s16_1 = extractelement <16 x double> %p1, i32 15
	%s16_2 = getelementptr <16 x i32>* %p2, i32 0, i32 15
	%v16 = call double @_Z6remquoddPi(double %s16_0, double %s16_1, i32* %s16_2)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z4rintu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z4rintd(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z4rintd(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z4rintd(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z4rintd(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z4rintd(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z4rintd(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z4rintd(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z4rintd(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z4rintd(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z4rintd(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z4rintd(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z4rintd(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z4rintd(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z4rintd(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z4rintd(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z4rintd(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z5rootnu3v16du3v16i(<16 x double> %p0, <16 x i32> %p1) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%s1_1 = extractelement <16 x i32> %p1, i32 0
	%v1 = call double @_Z5rootndi(double %s1_0, i32 %s1_1)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%s2_1 = extractelement <16 x i32> %p1, i32 1
	%v2 = call double @_Z5rootndi(double %s2_0, i32 %s2_1)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%s3_1 = extractelement <16 x i32> %p1, i32 2
	%v3 = call double @_Z5rootndi(double %s3_0, i32 %s3_1)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%s4_1 = extractelement <16 x i32> %p1, i32 3
	%v4 = call double @_Z5rootndi(double %s4_0, i32 %s4_1)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%s5_1 = extractelement <16 x i32> %p1, i32 4
	%v5 = call double @_Z5rootndi(double %s5_0, i32 %s5_1)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%s6_1 = extractelement <16 x i32> %p1, i32 5
	%v6 = call double @_Z5rootndi(double %s6_0, i32 %s6_1)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%s7_1 = extractelement <16 x i32> %p1, i32 6
	%v7 = call double @_Z5rootndi(double %s7_0, i32 %s7_1)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%s8_1 = extractelement <16 x i32> %p1, i32 7
	%v8 = call double @_Z5rootndi(double %s8_0, i32 %s8_1)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%s9_1 = extractelement <16 x i32> %p1, i32 8
	%v9 = call double @_Z5rootndi(double %s9_0, i32 %s9_1)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%s10_1 = extractelement <16 x i32> %p1, i32 9
	%v10 = call double @_Z5rootndi(double %s10_0, i32 %s10_1)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%s11_1 = extractelement <16 x i32> %p1, i32 10
	%v11 = call double @_Z5rootndi(double %s11_0, i32 %s11_1)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%s12_1 = extractelement <16 x i32> %p1, i32 11
	%v12 = call double @_Z5rootndi(double %s12_0, i32 %s12_1)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%s13_1 = extractelement <16 x i32> %p1, i32 12
	%v13 = call double @_Z5rootndi(double %s13_0, i32 %s13_1)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%s14_1 = extractelement <16 x i32> %p1, i32 13
	%v14 = call double @_Z5rootndi(double %s14_0, i32 %s14_1)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%s15_1 = extractelement <16 x i32> %p1, i32 14
	%v15 = call double @_Z5rootndi(double %s15_0, i32 %s15_1)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%s16_1 = extractelement <16 x i32> %p1, i32 15
	%v16 = call double @_Z5rootndi(double %s16_0, i32 %s16_1)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z5roundu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z5roundd(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z5roundd(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z5roundd(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z5roundd(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z5roundd(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z5roundd(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z5roundd(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z5roundd(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z5roundd(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z5roundd(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z5roundd(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z5roundd(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z5roundd(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z5roundd(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z5roundd(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z5roundd(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z5rsqrtu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z5rsqrtd(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z5rsqrtd(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z5rsqrtd(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z5rsqrtd(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z5rsqrtd(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z5rsqrtd(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z5rsqrtd(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z5rsqrtd(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z5rsqrtd(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z5rsqrtd(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z5rsqrtd(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z5rsqrtd(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z5rsqrtd(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z5rsqrtd(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z5rsqrtd(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z5rsqrtd(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z6sincosu3v16dPu3v16d(<16 x double> %p0, <16 x double>* %p1) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%s1_1 = getelementptr <16 x double>* %p1, i32 0, i32 0
	%v1 = call double @_Z6sincosdPd(double %s1_0, double* %s1_1)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%s2_1 = getelementptr <16 x double>* %p1, i32 0, i32 1
	%v2 = call double @_Z6sincosdPd(double %s2_0, double* %s2_1)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%s3_1 = getelementptr <16 x double>* %p1, i32 0, i32 2
	%v3 = call double @_Z6sincosdPd(double %s3_0, double* %s3_1)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%s4_1 = getelementptr <16 x double>* %p1, i32 0, i32 3
	%v4 = call double @_Z6sincosdPd(double %s4_0, double* %s4_1)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%s5_1 = getelementptr <16 x double>* %p1, i32 0, i32 4
	%v5 = call double @_Z6sincosdPd(double %s5_0, double* %s5_1)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%s6_1 = getelementptr <16 x double>* %p1, i32 0, i32 5
	%v6 = call double @_Z6sincosdPd(double %s6_0, double* %s6_1)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%s7_1 = getelementptr <16 x double>* %p1, i32 0, i32 6
	%v7 = call double @_Z6sincosdPd(double %s7_0, double* %s7_1)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%s8_1 = getelementptr <16 x double>* %p1, i32 0, i32 7
	%v8 = call double @_Z6sincosdPd(double %s8_0, double* %s8_1)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%s9_1 = getelementptr <16 x double>* %p1, i32 0, i32 8
	%v9 = call double @_Z6sincosdPd(double %s9_0, double* %s9_1)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%s10_1 = getelementptr <16 x double>* %p1, i32 0, i32 9
	%v10 = call double @_Z6sincosdPd(double %s10_0, double* %s10_1)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%s11_1 = getelementptr <16 x double>* %p1, i32 0, i32 10
	%v11 = call double @_Z6sincosdPd(double %s11_0, double* %s11_1)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%s12_1 = getelementptr <16 x double>* %p1, i32 0, i32 11
	%v12 = call double @_Z6sincosdPd(double %s12_0, double* %s12_1)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%s13_1 = getelementptr <16 x double>* %p1, i32 0, i32 12
	%v13 = call double @_Z6sincosdPd(double %s13_0, double* %s13_1)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%s14_1 = getelementptr <16 x double>* %p1, i32 0, i32 13
	%v14 = call double @_Z6sincosdPd(double %s14_0, double* %s14_1)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%s15_1 = getelementptr <16 x double>* %p1, i32 0, i32 14
	%v15 = call double @_Z6sincosdPd(double %s15_0, double* %s15_1)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%s16_1 = getelementptr <16 x double>* %p1, i32 0, i32 15
	%v16 = call double @_Z6sincosdPd(double %s16_0, double* %s16_1)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z4sinhu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z4sinhd(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z4sinhd(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z4sinhd(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z4sinhd(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z4sinhd(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z4sinhd(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z4sinhd(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z4sinhd(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z4sinhd(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z4sinhd(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z4sinhd(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z4sinhd(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z4sinhd(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z4sinhd(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z4sinhd(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z4sinhd(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z5sinpiu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z5sinpid(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z5sinpid(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z5sinpid(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z5sinpid(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z5sinpid(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z5sinpid(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z5sinpid(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z5sinpid(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z5sinpid(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z5sinpid(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z5sinpid(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z5sinpid(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z5sinpid(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z5sinpid(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z5sinpid(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z5sinpid(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z3tanu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z3tand(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z3tand(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z3tand(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z3tand(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z3tand(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z3tand(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z3tand(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z3tand(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z3tand(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z3tand(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z3tand(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z3tand(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z3tand(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z3tand(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z3tand(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z3tand(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z4tanhu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z4tanhd(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z4tanhd(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z4tanhd(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z4tanhd(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z4tanhd(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z4tanhd(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z4tanhd(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z4tanhd(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z4tanhd(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z4tanhd(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z4tanhd(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z4tanhd(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z4tanhd(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z4tanhd(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z4tanhd(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z4tanhd(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z5tanpiu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z5tanpid(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z5tanpid(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z5tanpid(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z5tanpid(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z5tanpid(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z5tanpid(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z5tanpid(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z5tanpid(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z5tanpid(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z5tanpid(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z5tanpid(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z5tanpid(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z5tanpid(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z5tanpid(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z5tanpid(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z5tanpid(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z6tgammau3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z6tgammad(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z6tgammad(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z6tgammad(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z6tgammad(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z6tgammad(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z6tgammad(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z6tgammad(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z6tgammad(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z6tgammad(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z6tgammad(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z6tgammad(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z6tgammad(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z6tgammad(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z6tgammad(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z6tgammad(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z6tgammad(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z5truncu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z5truncd(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z5truncd(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z5truncd(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z5truncd(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z5truncd(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z5truncd(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z5truncd(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z5truncd(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z5truncd(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z5truncd(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z5truncd(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z5truncd(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z5truncd(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z5truncd(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z5truncd(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z5truncd(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z8half_cosu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z8half_cosd(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z8half_cosd(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z8half_cosd(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z8half_cosd(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z8half_cosd(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z8half_cosd(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z8half_cosd(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z8half_cosd(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z8half_cosd(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z8half_cosd(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z8half_cosd(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z8half_cosd(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z8half_cosd(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z8half_cosd(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z8half_cosd(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z8half_cosd(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z11half_divideu3v16du3v16d(<16 x double> %p0, <16 x double> %p1) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%s1_1 = extractelement <16 x double> %p1, i32 0
	%v1 = call double @_Z11half_dividedd(double %s1_0, double %s1_1)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%s2_1 = extractelement <16 x double> %p1, i32 1
	%v2 = call double @_Z11half_dividedd(double %s2_0, double %s2_1)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%s3_1 = extractelement <16 x double> %p1, i32 2
	%v3 = call double @_Z11half_dividedd(double %s3_0, double %s3_1)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%s4_1 = extractelement <16 x double> %p1, i32 3
	%v4 = call double @_Z11half_dividedd(double %s4_0, double %s4_1)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%s5_1 = extractelement <16 x double> %p1, i32 4
	%v5 = call double @_Z11half_dividedd(double %s5_0, double %s5_1)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%s6_1 = extractelement <16 x double> %p1, i32 5
	%v6 = call double @_Z11half_dividedd(double %s6_0, double %s6_1)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%s7_1 = extractelement <16 x double> %p1, i32 6
	%v7 = call double @_Z11half_dividedd(double %s7_0, double %s7_1)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%s8_1 = extractelement <16 x double> %p1, i32 7
	%v8 = call double @_Z11half_dividedd(double %s8_0, double %s8_1)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%s9_1 = extractelement <16 x double> %p1, i32 8
	%v9 = call double @_Z11half_dividedd(double %s9_0, double %s9_1)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%s10_1 = extractelement <16 x double> %p1, i32 9
	%v10 = call double @_Z11half_dividedd(double %s10_0, double %s10_1)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%s11_1 = extractelement <16 x double> %p1, i32 10
	%v11 = call double @_Z11half_dividedd(double %s11_0, double %s11_1)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%s12_1 = extractelement <16 x double> %p1, i32 11
	%v12 = call double @_Z11half_dividedd(double %s12_0, double %s12_1)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%s13_1 = extractelement <16 x double> %p1, i32 12
	%v13 = call double @_Z11half_dividedd(double %s13_0, double %s13_1)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%s14_1 = extractelement <16 x double> %p1, i32 13
	%v14 = call double @_Z11half_dividedd(double %s14_0, double %s14_1)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%s15_1 = extractelement <16 x double> %p1, i32 14
	%v15 = call double @_Z11half_dividedd(double %s15_0, double %s15_1)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%s16_1 = extractelement <16 x double> %p1, i32 15
	%v16 = call double @_Z11half_dividedd(double %s16_0, double %s16_1)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z8half_expu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z8half_expd(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z8half_expd(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z8half_expd(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z8half_expd(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z8half_expd(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z8half_expd(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z8half_expd(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z8half_expd(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z8half_expd(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z8half_expd(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z8half_expd(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z8half_expd(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z8half_expd(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z8half_expd(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z8half_expd(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z8half_expd(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z9half_exp2u3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z9half_exp2d(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z9half_exp2d(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z9half_exp2d(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z9half_exp2d(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z9half_exp2d(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z9half_exp2d(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z9half_exp2d(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z9half_exp2d(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z9half_exp2d(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z9half_exp2d(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z9half_exp2d(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z9half_exp2d(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z9half_exp2d(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z9half_exp2d(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z9half_exp2d(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z9half_exp2d(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z10half_exp10u3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z10half_exp10d(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z10half_exp10d(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z10half_exp10d(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z10half_exp10d(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z10half_exp10d(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z10half_exp10d(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z10half_exp10d(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z10half_exp10d(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z10half_exp10d(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z10half_exp10d(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z10half_exp10d(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z10half_exp10d(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z10half_exp10d(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z10half_exp10d(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z10half_exp10d(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z10half_exp10d(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z8half_logu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z8half_logd(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z8half_logd(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z8half_logd(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z8half_logd(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z8half_logd(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z8half_logd(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z8half_logd(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z8half_logd(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z8half_logd(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z8half_logd(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z8half_logd(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z8half_logd(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z8half_logd(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z8half_logd(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z8half_logd(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z8half_logd(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z9half_log2u3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z9half_log2d(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z9half_log2d(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z9half_log2d(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z9half_log2d(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z9half_log2d(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z9half_log2d(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z9half_log2d(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z9half_log2d(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z9half_log2d(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z9half_log2d(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z9half_log2d(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z9half_log2d(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z9half_log2d(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z9half_log2d(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z9half_log2d(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z9half_log2d(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z10half_log10u3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z10half_log10d(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z10half_log10d(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z10half_log10d(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z10half_log10d(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z10half_log10d(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z10half_log10d(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z10half_log10d(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z10half_log10d(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z10half_log10d(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z10half_log10d(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z10half_log10d(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z10half_log10d(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z10half_log10d(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z10half_log10d(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z10half_log10d(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z10half_log10d(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z9half_powru3v16du3v16d(<16 x double> %p0, <16 x double> %p1) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%s1_1 = extractelement <16 x double> %p1, i32 0
	%v1 = call double @_Z9half_powrdd(double %s1_0, double %s1_1)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%s2_1 = extractelement <16 x double> %p1, i32 1
	%v2 = call double @_Z9half_powrdd(double %s2_0, double %s2_1)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%s3_1 = extractelement <16 x double> %p1, i32 2
	%v3 = call double @_Z9half_powrdd(double %s3_0, double %s3_1)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%s4_1 = extractelement <16 x double> %p1, i32 3
	%v4 = call double @_Z9half_powrdd(double %s4_0, double %s4_1)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%s5_1 = extractelement <16 x double> %p1, i32 4
	%v5 = call double @_Z9half_powrdd(double %s5_0, double %s5_1)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%s6_1 = extractelement <16 x double> %p1, i32 5
	%v6 = call double @_Z9half_powrdd(double %s6_0, double %s6_1)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%s7_1 = extractelement <16 x double> %p1, i32 6
	%v7 = call double @_Z9half_powrdd(double %s7_0, double %s7_1)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%s8_1 = extractelement <16 x double> %p1, i32 7
	%v8 = call double @_Z9half_powrdd(double %s8_0, double %s8_1)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%s9_1 = extractelement <16 x double> %p1, i32 8
	%v9 = call double @_Z9half_powrdd(double %s9_0, double %s9_1)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%s10_1 = extractelement <16 x double> %p1, i32 9
	%v10 = call double @_Z9half_powrdd(double %s10_0, double %s10_1)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%s11_1 = extractelement <16 x double> %p1, i32 10
	%v11 = call double @_Z9half_powrdd(double %s11_0, double %s11_1)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%s12_1 = extractelement <16 x double> %p1, i32 11
	%v12 = call double @_Z9half_powrdd(double %s12_0, double %s12_1)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%s13_1 = extractelement <16 x double> %p1, i32 12
	%v13 = call double @_Z9half_powrdd(double %s13_0, double %s13_1)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%s14_1 = extractelement <16 x double> %p1, i32 13
	%v14 = call double @_Z9half_powrdd(double %s14_0, double %s14_1)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%s15_1 = extractelement <16 x double> %p1, i32 14
	%v15 = call double @_Z9half_powrdd(double %s15_0, double %s15_1)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%s16_1 = extractelement <16 x double> %p1, i32 15
	%v16 = call double @_Z9half_powrdd(double %s16_0, double %s16_1)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z10half_recipu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z10half_recipd(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z10half_recipd(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z10half_recipd(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z10half_recipd(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z10half_recipd(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z10half_recipd(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z10half_recipd(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z10half_recipd(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z10half_recipd(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z10half_recipd(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z10half_recipd(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z10half_recipd(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z10half_recipd(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z10half_recipd(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z10half_recipd(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z10half_recipd(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z10half_rsqrtu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z10half_rsqrtd(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z10half_rsqrtd(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z10half_rsqrtd(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z10half_rsqrtd(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z10half_rsqrtd(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z10half_rsqrtd(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z10half_rsqrtd(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z10half_rsqrtd(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z10half_rsqrtd(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z10half_rsqrtd(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z10half_rsqrtd(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z10half_rsqrtd(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z10half_rsqrtd(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z10half_rsqrtd(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z10half_rsqrtd(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z10half_rsqrtd(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z8half_sinu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z8half_sind(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z8half_sind(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z8half_sind(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z8half_sind(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z8half_sind(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z8half_sind(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z8half_sind(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z8half_sind(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z8half_sind(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z8half_sind(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z8half_sind(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z8half_sind(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z8half_sind(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z8half_sind(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z8half_sind(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z8half_sind(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z9half_sqrtu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z9half_sqrtd(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z9half_sqrtd(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z9half_sqrtd(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z9half_sqrtd(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z9half_sqrtd(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z9half_sqrtd(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z9half_sqrtd(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z9half_sqrtd(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z9half_sqrtd(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z9half_sqrtd(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z9half_sqrtd(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z9half_sqrtd(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z9half_sqrtd(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z9half_sqrtd(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z9half_sqrtd(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z9half_sqrtd(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z8half_tanu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z8half_tand(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z8half_tand(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z8half_tand(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z8half_tand(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z8half_tand(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z8half_tand(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z8half_tand(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z8half_tand(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z8half_tand(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z8half_tand(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z8half_tand(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z8half_tand(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z8half_tand(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z8half_tand(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z8half_tand(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z8half_tand(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z11native_exp2u3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z11native_exp2d(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z11native_exp2d(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z11native_exp2d(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z11native_exp2d(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z11native_exp2d(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z11native_exp2d(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z11native_exp2d(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z11native_exp2d(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z11native_exp2d(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z11native_exp2d(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z11native_exp2d(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z11native_exp2d(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z11native_exp2d(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z11native_exp2d(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z11native_exp2d(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z11native_exp2d(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z12native_exp10u3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z12native_exp10d(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z12native_exp10d(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z12native_exp10d(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z12native_exp10d(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z12native_exp10d(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z12native_exp10d(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z12native_exp10d(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z12native_exp10d(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z12native_exp10d(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z12native_exp10d(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z12native_exp10d(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z12native_exp10d(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z12native_exp10d(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z12native_exp10d(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z12native_exp10d(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z12native_exp10d(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z11native_log2u3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z11native_log2d(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z11native_log2d(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z11native_log2d(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z11native_log2d(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z11native_log2d(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z11native_log2d(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z11native_log2d(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z11native_log2d(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z11native_log2d(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z11native_log2d(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z11native_log2d(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z11native_log2d(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z11native_log2d(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z11native_log2d(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z11native_log2d(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z11native_log2d(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z12native_log10u3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z12native_log10d(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z12native_log10d(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z12native_log10d(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z12native_log10d(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z12native_log10d(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z12native_log10d(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z12native_log10d(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z12native_log10d(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z12native_log10d(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z12native_log10d(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z12native_log10d(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z12native_log10d(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z12native_log10d(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z12native_log10d(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z12native_log10d(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z12native_log10d(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z12native_recipu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z12native_recipd(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z12native_recipd(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z12native_recipd(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z12native_recipd(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z12native_recipd(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z12native_recipd(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z12native_recipd(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z12native_recipd(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z12native_recipd(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z12native_recipd(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z12native_recipd(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z12native_recipd(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z12native_recipd(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z12native_recipd(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z12native_recipd(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z12native_recipd(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z12native_rsqrtu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z12native_rsqrtd(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z12native_rsqrtd(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z12native_rsqrtd(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z12native_rsqrtd(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z12native_rsqrtd(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z12native_rsqrtd(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z12native_rsqrtd(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z12native_rsqrtd(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z12native_rsqrtd(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z12native_rsqrtd(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z12native_rsqrtd(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z12native_rsqrtd(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z12native_rsqrtd(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z12native_rsqrtd(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z12native_rsqrtd(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z12native_rsqrtd(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z11native_sqrtu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z11native_sqrtd(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z11native_sqrtd(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z11native_sqrtd(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z11native_sqrtd(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z11native_sqrtd(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z11native_sqrtd(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z11native_sqrtd(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z11native_sqrtd(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z11native_sqrtd(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z11native_sqrtd(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z11native_sqrtd(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z11native_sqrtd(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z11native_sqrtd(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z11native_sqrtd(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z11native_sqrtd(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z11native_sqrtd(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z10native_sinu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z10native_sind(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z10native_sind(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z10native_sind(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z10native_sind(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z10native_sind(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z10native_sind(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z10native_sind(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z10native_sind(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z10native_sind(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z10native_sind(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z10native_sind(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z10native_sind(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z10native_sind(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z10native_sind(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z10native_sind(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z10native_sind(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z10native_cosu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z10native_cosd(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z10native_cosd(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z10native_cosd(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z10native_cosd(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z10native_cosd(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z10native_cosd(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z10native_cosd(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z10native_cosd(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z10native_cosd(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z10native_cosd(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z10native_cosd(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z10native_cosd(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z10native_cosd(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z10native_cosd(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z10native_cosd(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z10native_cosd(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z10native_expu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z10native_expd(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z10native_expd(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z10native_expd(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z10native_expd(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z10native_expd(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z10native_expd(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z10native_expd(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z10native_expd(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z10native_expd(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z10native_expd(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z10native_expd(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z10native_expd(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z10native_expd(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z10native_expd(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z10native_expd(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z10native_expd(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z10native_logu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z10native_logd(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z10native_logd(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z10native_logd(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z10native_logd(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z10native_logd(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z10native_logd(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z10native_logd(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z10native_logd(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z10native_logd(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z10native_logd(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z10native_logd(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z10native_logd(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z10native_logd(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z10native_logd(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z10native_logd(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z10native_logd(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z10native_tanu3v16d(<16 x double> %p0) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%v1 = call double @_Z10native_tand(double %s1_0)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%v2 = call double @_Z10native_tand(double %s2_0)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%v3 = call double @_Z10native_tand(double %s3_0)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%v4 = call double @_Z10native_tand(double %s4_0)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%v5 = call double @_Z10native_tand(double %s5_0)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%v6 = call double @_Z10native_tand(double %s6_0)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%v7 = call double @_Z10native_tand(double %s7_0)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%v8 = call double @_Z10native_tand(double %s8_0)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%v9 = call double @_Z10native_tand(double %s9_0)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%v10 = call double @_Z10native_tand(double %s10_0)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%v11 = call double @_Z10native_tand(double %s11_0)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%v12 = call double @_Z10native_tand(double %s12_0)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%v13 = call double @_Z10native_tand(double %s13_0)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%v14 = call double @_Z10native_tand(double %s14_0)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%v15 = call double @_Z10native_tand(double %s15_0)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%v16 = call double @_Z10native_tand(double %s16_0)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z13native_divideu3v16du3v16d(<16 x double> %p0, <16 x double> %p1) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%s1_1 = extractelement <16 x double> %p1, i32 0
	%v1 = call double @_Z13native_dividedd(double %s1_0, double %s1_1)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%s2_1 = extractelement <16 x double> %p1, i32 1
	%v2 = call double @_Z13native_dividedd(double %s2_0, double %s2_1)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%s3_1 = extractelement <16 x double> %p1, i32 2
	%v3 = call double @_Z13native_dividedd(double %s3_0, double %s3_1)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%s4_1 = extractelement <16 x double> %p1, i32 3
	%v4 = call double @_Z13native_dividedd(double %s4_0, double %s4_1)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%s5_1 = extractelement <16 x double> %p1, i32 4
	%v5 = call double @_Z13native_dividedd(double %s5_0, double %s5_1)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%s6_1 = extractelement <16 x double> %p1, i32 5
	%v6 = call double @_Z13native_dividedd(double %s6_0, double %s6_1)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%s7_1 = extractelement <16 x double> %p1, i32 6
	%v7 = call double @_Z13native_dividedd(double %s7_0, double %s7_1)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%s8_1 = extractelement <16 x double> %p1, i32 7
	%v8 = call double @_Z13native_dividedd(double %s8_0, double %s8_1)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%s9_1 = extractelement <16 x double> %p1, i32 8
	%v9 = call double @_Z13native_dividedd(double %s9_0, double %s9_1)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%s10_1 = extractelement <16 x double> %p1, i32 9
	%v10 = call double @_Z13native_dividedd(double %s10_0, double %s10_1)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%s11_1 = extractelement <16 x double> %p1, i32 10
	%v11 = call double @_Z13native_dividedd(double %s11_0, double %s11_1)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%s12_1 = extractelement <16 x double> %p1, i32 11
	%v12 = call double @_Z13native_dividedd(double %s12_0, double %s12_1)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%s13_1 = extractelement <16 x double> %p1, i32 12
	%v13 = call double @_Z13native_dividedd(double %s13_0, double %s13_1)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%s14_1 = extractelement <16 x double> %p1, i32 13
	%v14 = call double @_Z13native_dividedd(double %s14_0, double %s14_1)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%s15_1 = extractelement <16 x double> %p1, i32 14
	%v15 = call double @_Z13native_dividedd(double %s15_0, double %s15_1)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%s16_1 = extractelement <16 x double> %p1, i32 15
	%v16 = call double @_Z13native_dividedd(double %s16_0, double %s16_1)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z11native_powru3v16du3v16d(<16 x double> %p0, <16 x double> %p1) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%s1_1 = extractelement <16 x double> %p1, i32 0
	%v1 = call double @_Z11native_powrdd(double %s1_0, double %s1_1)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%s2_1 = extractelement <16 x double> %p1, i32 1
	%v2 = call double @_Z11native_powrdd(double %s2_0, double %s2_1)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%s3_1 = extractelement <16 x double> %p1, i32 2
	%v3 = call double @_Z11native_powrdd(double %s3_0, double %s3_1)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%s4_1 = extractelement <16 x double> %p1, i32 3
	%v4 = call double @_Z11native_powrdd(double %s4_0, double %s4_1)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%s5_1 = extractelement <16 x double> %p1, i32 4
	%v5 = call double @_Z11native_powrdd(double %s5_0, double %s5_1)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%s6_1 = extractelement <16 x double> %p1, i32 5
	%v6 = call double @_Z11native_powrdd(double %s6_0, double %s6_1)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%s7_1 = extractelement <16 x double> %p1, i32 6
	%v7 = call double @_Z11native_powrdd(double %s7_0, double %s7_1)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%s8_1 = extractelement <16 x double> %p1, i32 7
	%v8 = call double @_Z11native_powrdd(double %s8_0, double %s8_1)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%s9_1 = extractelement <16 x double> %p1, i32 8
	%v9 = call double @_Z11native_powrdd(double %s9_0, double %s9_1)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%s10_1 = extractelement <16 x double> %p1, i32 9
	%v10 = call double @_Z11native_powrdd(double %s10_0, double %s10_1)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%s11_1 = extractelement <16 x double> %p1, i32 10
	%v11 = call double @_Z11native_powrdd(double %s11_0, double %s11_1)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%s12_1 = extractelement <16 x double> %p1, i32 11
	%v12 = call double @_Z11native_powrdd(double %s12_0, double %s12_1)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%s13_1 = extractelement <16 x double> %p1, i32 12
	%v13 = call double @_Z11native_powrdd(double %s13_0, double %s13_1)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%s14_1 = extractelement <16 x double> %p1, i32 13
	%v14 = call double @_Z11native_powrdd(double %s14_0, double %s14_1)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%s15_1 = extractelement <16 x double> %p1, i32 14
	%v15 = call double @_Z11native_powrdd(double %s15_0, double %s15_1)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%s16_1 = extractelement <16 x double> %p1, i32 15
	%v16 = call double @_Z11native_powrdd(double %s16_0, double %s16_1)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
define <16 x double> @_Z12native_ldexpu3v16du3v16i(<16 x double> %p0, <16 x i32> %p1) nounwind {
	%s1_0 = extractelement <16 x double> %p0, i32 0
	%s1_1 = extractelement <16 x i32> %p1, i32 0
	%v1 = call double @_Z12native_ldexpdi(double %s1_0, i32 %s1_1)
	%r1 = insertelement <16 x double> undef, double %v1, i32 0
	%s2_0 = extractelement <16 x double> %p0, i32 1
	%s2_1 = extractelement <16 x i32> %p1, i32 1
	%v2 = call double @_Z12native_ldexpdi(double %s2_0, i32 %s2_1)
	%r2 = insertelement <16 x double> %r1, double %v2, i32 1
	%s3_0 = extractelement <16 x double> %p0, i32 2
	%s3_1 = extractelement <16 x i32> %p1, i32 2
	%v3 = call double @_Z12native_ldexpdi(double %s3_0, i32 %s3_1)
	%r3 = insertelement <16 x double> %r2, double %v3, i32 2
	%s4_0 = extractelement <16 x double> %p0, i32 3
	%s4_1 = extractelement <16 x i32> %p1, i32 3
	%v4 = call double @_Z12native_ldexpdi(double %s4_0, i32 %s4_1)
	%r4 = insertelement <16 x double> %r3, double %v4, i32 3
	%s5_0 = extractelement <16 x double> %p0, i32 4
	%s5_1 = extractelement <16 x i32> %p1, i32 4
	%v5 = call double @_Z12native_ldexpdi(double %s5_0, i32 %s5_1)
	%r5 = insertelement <16 x double> %r4, double %v5, i32 4
	%s6_0 = extractelement <16 x double> %p0, i32 5
	%s6_1 = extractelement <16 x i32> %p1, i32 5
	%v6 = call double @_Z12native_ldexpdi(double %s6_0, i32 %s6_1)
	%r6 = insertelement <16 x double> %r5, double %v6, i32 5
	%s7_0 = extractelement <16 x double> %p0, i32 6
	%s7_1 = extractelement <16 x i32> %p1, i32 6
	%v7 = call double @_Z12native_ldexpdi(double %s7_0, i32 %s7_1)
	%r7 = insertelement <16 x double> %r6, double %v7, i32 6
	%s8_0 = extractelement <16 x double> %p0, i32 7
	%s8_1 = extractelement <16 x i32> %p1, i32 7
	%v8 = call double @_Z12native_ldexpdi(double %s8_0, i32 %s8_1)
	%r8 = insertelement <16 x double> %r7, double %v8, i32 7
	%s9_0 = extractelement <16 x double> %p0, i32 8
	%s9_1 = extractelement <16 x i32> %p1, i32 8
	%v9 = call double @_Z12native_ldexpdi(double %s9_0, i32 %s9_1)
	%r9 = insertelement <16 x double> %r8, double %v9, i32 8
	%s10_0 = extractelement <16 x double> %p0, i32 9
	%s10_1 = extractelement <16 x i32> %p1, i32 9
	%v10 = call double @_Z12native_ldexpdi(double %s10_0, i32 %s10_1)
	%r10 = insertelement <16 x double> %r9, double %v10, i32 9
	%s11_0 = extractelement <16 x double> %p0, i32 10
	%s11_1 = extractelement <16 x i32> %p1, i32 10
	%v11 = call double @_Z12native_ldexpdi(double %s11_0, i32 %s11_1)
	%r11 = insertelement <16 x double> %r10, double %v11, i32 10
	%s12_0 = extractelement <16 x double> %p0, i32 11
	%s12_1 = extractelement <16 x i32> %p1, i32 11
	%v12 = call double @_Z12native_ldexpdi(double %s12_0, i32 %s12_1)
	%r12 = insertelement <16 x double> %r11, double %v12, i32 11
	%s13_0 = extractelement <16 x double> %p0, i32 12
	%s13_1 = extractelement <16 x i32> %p1, i32 12
	%v13 = call double @_Z12native_ldexpdi(double %s13_0, i32 %s13_1)
	%r13 = insertelement <16 x double> %r12, double %v13, i32 12
	%s14_0 = extractelement <16 x double> %p0, i32 13
	%s14_1 = extractelement <16 x i32> %p1, i32 13
	%v14 = call double @_Z12native_ldexpdi(double %s14_0, i32 %s14_1)
	%r14 = insertelement <16 x double> %r13, double %v14, i32 13
	%s15_0 = extractelement <16 x double> %p0, i32 14
	%s15_1 = extractelement <16 x i32> %p1, i32 14
	%v15 = call double @_Z12native_ldexpdi(double %s15_0, i32 %s15_1)
	%r15 = insertelement <16 x double> %r14, double %v15, i32 14
	%s16_0 = extractelement <16 x double> %p0, i32 15
	%s16_1 = extractelement <16 x i32> %p1, i32 15
	%v16 = call double @_Z12native_ldexpdi(double %s16_0, i32 %s16_1)
	%r16 = insertelement <16 x double> %r15, double %v16, i32 15
	ret <16 x double> %r16
}
