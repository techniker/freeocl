// Generated by Bisonc++ V2.4.8 on Sun, 01 May 2011 17:54:55 +0200

// $insert class.ih
#include "Parser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token__ is _UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token__ in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN__ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on _error_
// which is applied. In this _error_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
// Last element:    {set to d_token__,    action to perform}
//      }

// When the --thread-safe option is specified, all static data are defined as
// const. If --thread-safe is not provided, the state-tables are not defined
// as const, since the lookup() function below will modify them


namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum 
    {
        STACK_EXPANSION = 5     // size to expand the state-stack with when
                                // full
    };

    enum ReservedTokens
    {
        PARSE_ACCEPT     = 0,   // `ACCEPT' TRANSITION
        _UNDETERMINED_   = -2,
        _EOF_            = -1,
        _error_          = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    struct PI__     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR__     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            int d_type;
            int d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
            size_t d_errorState;    // used with Error states
        };
    };

    // $insert staticdata
    
// Productions Info Records:
PI__ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {311, 1}, // 1: primary_expression ->  IDENTIFIER
     {311, 1}, // 2: primary_expression ->  CONSTANT
     {311, 1}, // 3: primary_expression ->  STRING_LITERAL
     {311, 3}, // 4: primary_expression ->  '(' expression ')'
     {313, 1}, // 5: postfix_expression ->  primary_expression
     {313, 4}, // 6: postfix_expression ->  postfix_expression '[' expression ']'
     {313, 3}, // 7: postfix_expression ->  postfix_expression '(' ')'
     {313, 4}, // 8: postfix_expression ->  postfix_expression '(' argument_expression_list ')'
     {313, 3}, // 9: postfix_expression ->  postfix_expression '.' IDENTIFIER
     {313, 3}, // 10: postfix_expression ->  postfix_expression PTR_OP IDENTIFIER
     {313, 2}, // 11: postfix_expression ->  postfix_expression INC_OP
     {313, 2}, // 12: postfix_expression ->  postfix_expression DEC_OP
     {314, 1}, // 13: argument_expression_list ->  assignment_expression
     {314, 3}, // 14: argument_expression_list ->  argument_expression_list ',' assignment_expression
     {316, 1}, // 15: unary_expression ->  postfix_expression
     {316, 2}, // 16: unary_expression ->  INC_OP unary_expression
     {316, 2}, // 17: unary_expression ->  DEC_OP unary_expression
     {316, 2}, // 18: unary_expression ->  unary_operator cast_expression
     {316, 2}, // 19: unary_expression ->  SIZEOF unary_expression
     {316, 4}, // 20: unary_expression ->  SIZEOF '(' type_name ')'
     {317, 1}, // 21: unary_operator ->  '&'
     {317, 1}, // 22: unary_operator ->  '*'
     {317, 1}, // 23: unary_operator ->  '+'
     {317, 1}, // 24: unary_operator ->  '-'
     {317, 1}, // 25: unary_operator ->  '~'
     {317, 1}, // 26: unary_operator ->  '!'
     {318, 1}, // 27: cast_expression ->  unary_expression
     {318, 4}, // 28: cast_expression ->  '(' type_name ')' cast_expression
     {320, 1}, // 29: multiplicative_expression ->  cast_expression
     {320, 3}, // 30: multiplicative_expression ->  multiplicative_expression '*' cast_expression
     {320, 3}, // 31: multiplicative_expression ->  multiplicative_expression '/' cast_expression
     {320, 3}, // 32: multiplicative_expression ->  multiplicative_expression '%' cast_expression
     {321, 1}, // 33: additive_expression ->  multiplicative_expression
     {321, 3}, // 34: additive_expression ->  additive_expression '+' multiplicative_expression
     {321, 3}, // 35: additive_expression ->  additive_expression '-' multiplicative_expression
     {322, 1}, // 36: shift_expression ->  additive_expression
     {322, 3}, // 37: shift_expression ->  shift_expression LEFT_OP additive_expression
     {322, 3}, // 38: shift_expression ->  shift_expression RIGHT_OP additive_expression
     {323, 1}, // 39: relational_expression ->  shift_expression
     {323, 3}, // 40: relational_expression ->  relational_expression '<' shift_expression
     {323, 3}, // 41: relational_expression ->  relational_expression '>' shift_expression
     {323, 3}, // 42: relational_expression ->  relational_expression LE_OP shift_expression
     {323, 3}, // 43: relational_expression ->  relational_expression GE_OP shift_expression
     {324, 1}, // 44: equality_expression ->  relational_expression
     {324, 3}, // 45: equality_expression ->  equality_expression EQ_OP relational_expression
     {324, 3}, // 46: equality_expression ->  equality_expression NE_OP relational_expression
     {325, 1}, // 47: and_expression ->  equality_expression
     {325, 3}, // 48: and_expression ->  and_expression '&' equality_expression
     {326, 1}, // 49: exclusive_or_expression ->  and_expression
     {326, 3}, // 50: exclusive_or_expression ->  exclusive_or_expression '^' and_expression
     {327, 1}, // 51: inclusive_or_expression ->  exclusive_or_expression
     {327, 3}, // 52: inclusive_or_expression ->  inclusive_or_expression '|' exclusive_or_expression
     {328, 1}, // 53: logical_and_expression ->  inclusive_or_expression
     {328, 3}, // 54: logical_and_expression ->  logical_and_expression AND_OP inclusive_or_expression
     {329, 1}, // 55: logical_or_expression ->  logical_and_expression
     {329, 3}, // 56: logical_or_expression ->  logical_or_expression OR_OP logical_and_expression
     {330, 1}, // 57: conditional_expression ->  logical_or_expression
     {330, 5}, // 58: conditional_expression ->  logical_or_expression '?' expression ':' conditional_expression
     {315, 1}, // 59: assignment_expression ->  conditional_expression
     {315, 3}, // 60: assignment_expression ->  unary_expression assignment_operator assignment_expression
     {331, 1}, // 61: assignment_operator ->  '='
     {331, 1}, // 62: assignment_operator ->  MUL_ASSIGN
     {331, 1}, // 63: assignment_operator ->  DIV_ASSIGN
     {331, 1}, // 64: assignment_operator ->  MOD_ASSIGN
     {331, 1}, // 65: assignment_operator ->  ADD_ASSIGN
     {331, 1}, // 66: assignment_operator ->  SUB_ASSIGN
     {331, 1}, // 67: assignment_operator ->  LEFT_ASSIGN
     {331, 1}, // 68: assignment_operator ->  RIGHT_ASSIGN
     {331, 1}, // 69: assignment_operator ->  AND_ASSIGN
     {331, 1}, // 70: assignment_operator ->  XOR_ASSIGN
     {331, 1}, // 71: assignment_operator ->  OR_ASSIGN
     {312, 1}, // 72: expression ->  assignment_expression
     {312, 3}, // 73: expression ->  expression ',' assignment_expression
     {332, 1}, // 74: constant_expression ->  conditional_expression
     {333, 2}, // 75: declaration ->  declaration_specifiers ';'
     {333, 3}, // 76: declaration ->  declaration_specifiers init_declarator_list ';'
     {334, 1}, // 77: declaration_specifiers ->  storage_class_specifier
     {334, 2}, // 78: declaration_specifiers ->  storage_class_specifier declaration_specifiers
     {334, 1}, // 79: declaration_specifiers ->  type_specifier
     {334, 2}, // 80: declaration_specifiers ->  type_specifier declaration_specifiers
     {334, 1}, // 81: declaration_specifiers ->  type_qualifier
     {334, 2}, // 82: declaration_specifiers ->  type_qualifier declaration_specifiers
     {335, 1}, // 83: init_declarator_list ->  init_declarator
     {335, 3}, // 84: init_declarator_list ->  init_declarator_list ',' init_declarator
     {339, 1}, // 85: init_declarator ->  declarator
     {339, 3}, // 86: init_declarator ->  declarator '=' initializer
     {336, 1}, // 87: storage_class_specifier ->  TYPEDEF
     {337, 1}, // 88: type_specifier ->  VOID
     {337, 1}, // 89: type_specifier ->  CHAR
     {337, 1}, // 90: type_specifier ->  SHORT
     {337, 1}, // 91: type_specifier ->  INT
     {337, 1}, // 92: type_specifier ->  LONG
     {337, 1}, // 93: type_specifier ->  FLOAT
     {337, 1}, // 94: type_specifier ->  DOUBLE
     {337, 1}, // 95: type_specifier ->  SIGNED
     {337, 1}, // 96: type_specifier ->  UNSIGNED
     {337, 1}, // 97: type_specifier ->  struct_or_union_specifier
     {337, 1}, // 98: type_specifier ->  enum_specifier
     {337, 1}, // 99: type_specifier ->  TYPE_NAME
     {342, 5}, // 100: struct_or_union_specifier ->  struct_or_union IDENTIFIER '{' struct_declaration_list '}'
     {342, 4}, // 101: struct_or_union_specifier ->  struct_or_union '{' struct_declaration_list '}'
     {342, 2}, // 102: struct_or_union_specifier ->  struct_or_union IDENTIFIER
     {344, 1}, // 103: struct_or_union ->  STRUCT
     {344, 1}, // 104: struct_or_union ->  UNION
     {345, 1}, // 105: struct_declaration_list ->  struct_declaration
     {345, 2}, // 106: struct_declaration_list ->  struct_declaration_list struct_declaration
     {346, 3}, // 107: struct_declaration ->  specifier_qualifier_list struct_declarator_list ';'
     {347, 2}, // 108: specifier_qualifier_list ->  type_specifier specifier_qualifier_list
     {347, 1}, // 109: specifier_qualifier_list ->  type_specifier
     {347, 2}, // 110: specifier_qualifier_list ->  type_qualifier specifier_qualifier_list
     {347, 1}, // 111: specifier_qualifier_list ->  type_qualifier
     {348, 1}, // 112: struct_declarator_list ->  struct_declarator
     {348, 3}, // 113: struct_declarator_list ->  struct_declarator_list ',' struct_declarator
     {349, 1}, // 114: struct_declarator ->  declarator
     {349, 2}, // 115: struct_declarator ->  ':' constant_expression
     {349, 3}, // 116: struct_declarator ->  declarator ':' constant_expression
     {343, 4}, // 117: enum_specifier ->  ENUM '{' enumerator_list '}'
     {343, 5}, // 118: enum_specifier ->  ENUM IDENTIFIER '{' enumerator_list '}'
     {343, 2}, // 119: enum_specifier ->  ENUM IDENTIFIER
     {350, 1}, // 120: enumerator_list ->  enumerator
     {350, 3}, // 121: enumerator_list ->  enumerator_list ',' enumerator
     {351, 1}, // 122: enumerator ->  IDENTIFIER
     {351, 3}, // 123: enumerator ->  IDENTIFIER '=' constant_expression
     {338, 1}, // 124: type_qualifier ->  CONST
     {338, 1}, // 125: type_qualifier ->  VOLATILE
     {340, 2}, // 126: declarator ->  pointer direct_declarator
     {340, 1}, // 127: declarator ->  direct_declarator
     {353, 1}, // 128: direct_declarator ->  IDENTIFIER
     {353, 3}, // 129: direct_declarator ->  '(' declarator ')'
     {353, 4}, // 130: direct_declarator ->  direct_declarator '[' constant_expression ']'
     {353, 3}, // 131: direct_declarator ->  direct_declarator '[' ']'
     {353, 4}, // 132: direct_declarator ->  direct_declarator '(' parameter_type_list ')'
     {353, 4}, // 133: direct_declarator ->  direct_declarator '(' identifier_list ')'
     {353, 3}, // 134: direct_declarator ->  direct_declarator '(' ')'
     {352, 1}, // 135: pointer ->  '*'
     {352, 2}, // 136: pointer ->  '*' type_qualifier_list
     {352, 2}, // 137: pointer ->  '*' pointer
     {352, 3}, // 138: pointer ->  '*' type_qualifier_list pointer
     {356, 1}, // 139: type_qualifier_list ->  type_qualifier
     {356, 2}, // 140: type_qualifier_list ->  type_qualifier_list type_qualifier
     {354, 1}, // 141: parameter_type_list ->  parameter_list
     {354, 3}, // 142: parameter_type_list ->  parameter_list ',' ELLIPSIS
     {357, 1}, // 143: parameter_list ->  parameter_declaration
     {357, 3}, // 144: parameter_list ->  parameter_list ',' parameter_declaration
     {358, 2}, // 145: parameter_declaration ->  declaration_specifiers declarator
     {358, 2}, // 146: parameter_declaration ->  declaration_specifiers abstract_declarator
     {358, 1}, // 147: parameter_declaration ->  declaration_specifiers
     {355, 1}, // 148: identifier_list ->  IDENTIFIER
     {355, 3}, // 149: identifier_list ->  identifier_list ',' IDENTIFIER
     {319, 1}, // 150: type_name ->  specifier_qualifier_list
     {319, 2}, // 151: type_name ->  specifier_qualifier_list abstract_declarator
     {359, 1}, // 152: abstract_declarator ->  pointer
     {359, 1}, // 153: abstract_declarator ->  direct_abstract_declarator
     {359, 2}, // 154: abstract_declarator ->  pointer direct_abstract_declarator
     {360, 3}, // 155: direct_abstract_declarator ->  '(' abstract_declarator ')'
     {360, 2}, // 156: direct_abstract_declarator ->  '[' ']'
     {360, 3}, // 157: direct_abstract_declarator ->  '[' constant_expression ']'
     {360, 3}, // 158: direct_abstract_declarator ->  direct_abstract_declarator '[' ']'
     {360, 4}, // 159: direct_abstract_declarator ->  direct_abstract_declarator '[' constant_expression ']'
     {360, 2}, // 160: direct_abstract_declarator ->  '(' ')'
     {360, 3}, // 161: direct_abstract_declarator ->  '(' parameter_type_list ')'
     {360, 3}, // 162: direct_abstract_declarator ->  direct_abstract_declarator '(' ')'
     {360, 4}, // 163: direct_abstract_declarator ->  direct_abstract_declarator '(' parameter_type_list ')'
     {341, 1}, // 164: initializer ->  assignment_expression
     {341, 3}, // 165: initializer ->  '{' initializer_list '}'
     {341, 4}, // 166: initializer ->  '{' initializer_list ',' '}'
     {361, 1}, // 167: initializer_list ->  initializer
     {361, 3}, // 168: initializer_list ->  initializer_list ',' initializer
     {362, 1}, // 169: statement ->  labeled_statement
     {362, 1}, // 170: statement ->  compound_statement
     {362, 1}, // 171: statement ->  expression_statement
     {362, 1}, // 172: statement ->  selection_statement
     {362, 1}, // 173: statement ->  iteration_statement
     {362, 1}, // 174: statement ->  jump_statement
     {363, 3}, // 175: labeled_statement ->  IDENTIFIER ':' statement
     {363, 4}, // 176: labeled_statement ->  CASE constant_expression ':' statement
     {363, 3}, // 177: labeled_statement ->  DEFAULT ':' statement
     {364, 2}, // 178: compound_statement ->  '{' '}'
     {364, 3}, // 179: compound_statement ->  '{' statement_list '}'
     {364, 3}, // 180: compound_statement ->  '{' declaration_list '}'
     {364, 4}, // 181: compound_statement ->  '{' declaration_list statement_list '}'
     {370, 1}, // 182: declaration_list ->  declaration
     {370, 2}, // 183: declaration_list ->  declaration_list declaration
     {369, 1}, // 184: statement_list ->  statement
     {369, 2}, // 185: statement_list ->  statement_list statement
     {365, 1}, // 186: expression_statement ->  ';'
     {365, 2}, // 187: expression_statement ->  expression ';'
     {366, 5}, // 188: selection_statement ->  IF '(' expression ')' statement
     {366, 7}, // 189: selection_statement ->  IF '(' expression ')' statement ELSE statement
     {366, 5}, // 190: selection_statement ->  SWITCH '(' expression ')' statement
     {367, 5}, // 191: iteration_statement ->  WHILE '(' expression ')' statement
     {367, 7}, // 192: iteration_statement ->  DO statement WHILE '(' expression ')' ';'
     {367, 6}, // 193: iteration_statement ->  FOR '(' expression_statement expression_statement ')' statement
     {367, 7}, // 194: iteration_statement ->  FOR '(' expression_statement expression_statement expression ')' statement
     {368, 3}, // 195: jump_statement ->  GOTO IDENTIFIER ';'
     {368, 2}, // 196: jump_statement ->  CONTINUE ';'
     {368, 2}, // 197: jump_statement ->  BREAK ';'
     {368, 2}, // 198: jump_statement ->  RETURN ';'
     {368, 3}, // 199: jump_statement ->  RETURN expression ';'
     {371, 1}, // 200: translation_unit ->  external_declaration
     {371, 2}, // 201: translation_unit ->  translation_unit external_declaration
     {372, 1}, // 202: external_declaration ->  function_definition
     {372, 1}, // 203: external_declaration ->  declaration
     {373, 4}, // 204: function_definition ->  declaration_specifiers declarator declaration_list compound_statement
     {373, 3}, // 205: function_definition ->  declaration_specifiers declarator compound_statement
     {373, 3}, // 206: function_definition ->  declarator declaration_list compound_statement
     {373, 2}, // 207: function_definition ->  declarator compound_statement
     {374, 1}, // 208: translation_unit_$ ->  translation_unit
};

// State info and SR__ transitions for each state.


SR__ s_0[] =
{
    { { REQ_TOKEN}, { 34} },                             
    { {       371}, {  1} }, // translation_unit         
    { {       372}, {  2} }, // external_declaration     
    { {       373}, {  3} }, // function_definition      
    { {       333}, {  4} }, // declaration              
    { {       334}, {  5} }, // declaration_specifiers   
    { {       340}, {  6} }, // declarator               
    { {       336}, {  7} }, // storage_class_specifier  
    { {       337}, {  8} }, // type_specifier           
    { {       338}, {  9} }, // type_qualifier           
    { {       352}, { 10} }, // pointer                  
    { {       353}, { 11} }, // direct_declarator        
    { {       283}, { 12} }, // TYPEDEF                  
    { {       294}, { 13} }, // VOID                     
    { {       284}, { 14} }, // CHAR                     
    { {       285}, { 15} }, // SHORT                    
    { {       286}, { 16} }, // INT                      
    { {       287}, { 17} }, // LONG                     
    { {       290}, { 18} }, // FLOAT                    
    { {       291}, { 19} }, // DOUBLE                   
    { {       288}, { 20} }, // SIGNED                   
    { {       289}, { 21} }, // UNSIGNED                 
    { {       342}, { 22} }, // struct_or_union_specifier
    { {       343}, { 23} }, // enum_specifier           
    { {       282}, { 24} }, // TYPE_NAME                
    { {       292}, { 25} }, // CONST                    
    { {       293}, { 26} }, // VOLATILE                 
    { {        42}, { 27} }, // '*'                      
    { {       257}, { 28} }, // IDENTIFIER               
    { {        40}, { 29} }, // '('                      
    { {       344}, { 30} }, // struct_or_union          
    { {       297}, { 31} }, // ENUM                     
    { {       295}, { 32} }, // STRUCT                   
    { {       296}, { 33} }, // UNION                    
    { {         0}, {  0} },                             
};

SR__ s_1[] =
{
    { { REQ_TOKEN}, {           34} },                             
    { {       372}, {           34} }, // external_declaration     
    { {       373}, {            3} }, // function_definition      
    { {       333}, {            4} }, // declaration              
    { {       334}, {            5} }, // declaration_specifiers   
    { {       340}, {            6} }, // declarator               
    { {       336}, {            7} }, // storage_class_specifier  
    { {       337}, {            8} }, // type_specifier           
    { {       338}, {            9} }, // type_qualifier           
    { {       352}, {           10} }, // pointer                  
    { {       353}, {           11} }, // direct_declarator        
    { {       283}, {           12} }, // TYPEDEF                  
    { {       294}, {           13} }, // VOID                     
    { {       284}, {           14} }, // CHAR                     
    { {       285}, {           15} }, // SHORT                    
    { {       286}, {           16} }, // INT                      
    { {       287}, {           17} }, // LONG                     
    { {       290}, {           18} }, // FLOAT                    
    { {       291}, {           19} }, // DOUBLE                   
    { {       288}, {           20} }, // SIGNED                   
    { {       289}, {           21} }, // UNSIGNED                 
    { {       342}, {           22} }, // struct_or_union_specifier
    { {       343}, {           23} }, // enum_specifier           
    { {       282}, {           24} }, // TYPE_NAME                
    { {       292}, {           25} }, // CONST                    
    { {       293}, {           26} }, // VOLATILE                 
    { {        42}, {           27} }, // '*'                      
    { {       257}, {           28} }, // IDENTIFIER               
    { {        40}, {           29} }, // '('                      
    { {       344}, {           30} }, // struct_or_union          
    { {       297}, {           31} }, // ENUM                     
    { {       295}, {           32} }, // STRUCT                   
    { {       296}, {           33} }, // UNION                    
    { {     _EOF_}, { PARSE_ACCEPT} },                             
    { {         0}, {            0} },                             
};

SR__ s_2[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -200} }, 
};

SR__ s_3[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -202} }, 
};

SR__ s_4[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -203} }, 
};

SR__ s_5[] =
{
    { { REQ_TOKEN}, { 10} },                        
    { {       340}, { 35} }, // declarator          
    { {        59}, { 36} }, // ';'                 
    { {       335}, { 37} }, // init_declarator_list
    { {       352}, { 10} }, // pointer             
    { {       353}, { 11} }, // direct_declarator   
    { {       339}, { 38} }, // init_declarator     
    { {        42}, { 27} }, // '*'                 
    { {       257}, { 28} }, // IDENTIFIER          
    { {        40}, { 29} }, // '('                 
    { {         0}, {  0} },                        
};

SR__ s_6[] =
{
    { { REQ_TOKEN}, { 28} },                             
    { {       370}, { 39} }, // declaration_list         
    { {       364}, { 40} }, // compound_statement       
    { {       333}, { 41} }, // declaration              
    { {       123}, { 42} }, // '{'                      
    { {       334}, { 43} }, // declaration_specifiers   
    { {       336}, {  7} }, // storage_class_specifier  
    { {       337}, {  8} }, // type_specifier           
    { {       338}, {  9} }, // type_qualifier           
    { {       283}, { 12} }, // TYPEDEF                  
    { {       294}, { 13} }, // VOID                     
    { {       284}, { 14} }, // CHAR                     
    { {       285}, { 15} }, // SHORT                    
    { {       286}, { 16} }, // INT                      
    { {       287}, { 17} }, // LONG                     
    { {       290}, { 18} }, // FLOAT                    
    { {       291}, { 19} }, // DOUBLE                   
    { {       288}, { 20} }, // SIGNED                   
    { {       289}, { 21} }, // UNSIGNED                 
    { {       342}, { 22} }, // struct_or_union_specifier
    { {       343}, { 23} }, // enum_specifier           
    { {       282}, { 24} }, // TYPE_NAME                
    { {       292}, { 25} }, // CONST                    
    { {       293}, { 26} }, // VOLATILE                 
    { {       344}, { 30} }, // struct_or_union          
    { {       297}, { 31} }, // ENUM                     
    { {       295}, { 32} }, // STRUCT                   
    { {       296}, { 33} }, // UNION                    
    { {         0}, {  0} },                             
};

SR__ s_7[] =
{
    { { REQ_DEF}, {  24} },                             
    { {     334}, {  44} }, // declaration_specifiers   
    { {     336}, {   7} }, // storage_class_specifier  
    { {     337}, {   8} }, // type_specifier           
    { {     338}, {   9} }, // type_qualifier           
    { {     283}, {  12} }, // TYPEDEF                  
    { {     294}, {  13} }, // VOID                     
    { {     284}, {  14} }, // CHAR                     
    { {     285}, {  15} }, // SHORT                    
    { {     286}, {  16} }, // INT                      
    { {     287}, {  17} }, // LONG                     
    { {     290}, {  18} }, // FLOAT                    
    { {     291}, {  19} }, // DOUBLE                   
    { {     288}, {  20} }, // SIGNED                   
    { {     289}, {  21} }, // UNSIGNED                 
    { {     342}, {  22} }, // struct_or_union_specifier
    { {     343}, {  23} }, // enum_specifier           
    { {     282}, {  24} }, // TYPE_NAME                
    { {     292}, {  25} }, // CONST                    
    { {     293}, {  26} }, // VOLATILE                 
    { {     344}, {  30} }, // struct_or_union          
    { {     297}, {  31} }, // ENUM                     
    { {     295}, {  32} }, // STRUCT                   
    { {     296}, {  33} }, // UNION                    
    { {       0}, { -77} },                             
};

SR__ s_8[] =
{
    { { REQ_DEF}, {  24} },                             
    { {     334}, {  45} }, // declaration_specifiers   
    { {     336}, {   7} }, // storage_class_specifier  
    { {     337}, {   8} }, // type_specifier           
    { {     338}, {   9} }, // type_qualifier           
    { {     283}, {  12} }, // TYPEDEF                  
    { {     294}, {  13} }, // VOID                     
    { {     284}, {  14} }, // CHAR                     
    { {     285}, {  15} }, // SHORT                    
    { {     286}, {  16} }, // INT                      
    { {     287}, {  17} }, // LONG                     
    { {     290}, {  18} }, // FLOAT                    
    { {     291}, {  19} }, // DOUBLE                   
    { {     288}, {  20} }, // SIGNED                   
    { {     289}, {  21} }, // UNSIGNED                 
    { {     342}, {  22} }, // struct_or_union_specifier
    { {     343}, {  23} }, // enum_specifier           
    { {     282}, {  24} }, // TYPE_NAME                
    { {     292}, {  25} }, // CONST                    
    { {     293}, {  26} }, // VOLATILE                 
    { {     344}, {  30} }, // struct_or_union          
    { {     297}, {  31} }, // ENUM                     
    { {     295}, {  32} }, // STRUCT                   
    { {     296}, {  33} }, // UNION                    
    { {       0}, { -79} },                             
};

SR__ s_9[] =
{
    { { REQ_DEF}, {  24} },                             
    { {     334}, {  46} }, // declaration_specifiers   
    { {     336}, {   7} }, // storage_class_specifier  
    { {     337}, {   8} }, // type_specifier           
    { {     338}, {   9} }, // type_qualifier           
    { {     283}, {  12} }, // TYPEDEF                  
    { {     294}, {  13} }, // VOID                     
    { {     284}, {  14} }, // CHAR                     
    { {     285}, {  15} }, // SHORT                    
    { {     286}, {  16} }, // INT                      
    { {     287}, {  17} }, // LONG                     
    { {     290}, {  18} }, // FLOAT                    
    { {     291}, {  19} }, // DOUBLE                   
    { {     288}, {  20} }, // SIGNED                   
    { {     289}, {  21} }, // UNSIGNED                 
    { {     342}, {  22} }, // struct_or_union_specifier
    { {     343}, {  23} }, // enum_specifier           
    { {     282}, {  24} }, // TYPE_NAME                
    { {     292}, {  25} }, // CONST                    
    { {     293}, {  26} }, // VOLATILE                 
    { {     344}, {  30} }, // struct_or_union          
    { {     297}, {  31} }, // ENUM                     
    { {     295}, {  32} }, // STRUCT                   
    { {     296}, {  33} }, // UNION                    
    { {       0}, { -81} },                             
};

SR__ s_10[] =
{
    { { REQ_TOKEN}, {  4} },                     
    { {       353}, { 47} }, // direct_declarator
    { {       257}, { 28} }, // IDENTIFIER       
    { {        40}, { 29} }, // '('              
    { {         0}, {  0} },                     
};

SR__ s_11[] =
{
    { { REQ_DEF}, {    3} },       
    { {      91}, {   48} }, // '['
    { {      40}, {   49} }, // '('
    { {       0}, { -127} },       
};

SR__ s_12[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -87} }, 
};

SR__ s_13[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -88} }, 
};

SR__ s_14[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -89} }, 
};

SR__ s_15[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -90} }, 
};

SR__ s_16[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -91} }, 
};

SR__ s_17[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -92} }, 
};

SR__ s_18[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -93} }, 
};

SR__ s_19[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -94} }, 
};

SR__ s_20[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -95} }, 
};

SR__ s_21[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -96} }, 
};

SR__ s_22[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -97} }, 
};

SR__ s_23[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -98} }, 
};

SR__ s_24[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -99} }, 
};

SR__ s_25[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -124} }, 
};

SR__ s_26[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -125} }, 
};

SR__ s_27[] =
{
    { { REQ_DEF}, {    7} },                       
    { {     356}, {   50} }, // type_qualifier_list
    { {     352}, {   51} }, // pointer            
    { {     338}, {   52} }, // type_qualifier     
    { {      42}, {   27} }, // '*'                
    { {     292}, {   25} }, // CONST              
    { {     293}, {   26} }, // VOLATILE           
    { {       0}, { -135} },                       
};

SR__ s_28[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -128} }, 
};

SR__ s_29[] =
{
    { { REQ_TOKEN}, {  7} },                     
    { {       340}, { 53} }, // declarator       
    { {       352}, { 10} }, // pointer          
    { {       353}, { 11} }, // direct_declarator
    { {        42}, { 27} }, // '*'              
    { {       257}, { 28} }, // IDENTIFIER       
    { {        40}, { 29} }, // '('              
    { {         0}, {  0} },                     
};

SR__ s_30[] =
{
    { { REQ_TOKEN}, {  3} },              
    { {       257}, { 54} }, // IDENTIFIER
    { {       123}, { 55} }, // '{'       
    { {         0}, {  0} },              
};

SR__ s_31[] =
{
    { { REQ_TOKEN}, {  3} },              
    { {       123}, { 56} }, // '{'       
    { {       257}, { 57} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_32[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -103} }, 
};

SR__ s_33[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -104} }, 
};

SR__ s_34[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -201} }, 
};

SR__ s_35[] =
{
    { { REQ_DEF}, {  29} },                             
    { {     370}, {  58} }, // declaration_list         
    { {     364}, {  59} }, // compound_statement       
    { {      61}, {  60} }, // '='                      
    { {     333}, {  41} }, // declaration              
    { {     123}, {  42} }, // '{'                      
    { {     334}, {  43} }, // declaration_specifiers   
    { {     336}, {   7} }, // storage_class_specifier  
    { {     337}, {   8} }, // type_specifier           
    { {     338}, {   9} }, // type_qualifier           
    { {     283}, {  12} }, // TYPEDEF                  
    { {     294}, {  13} }, // VOID                     
    { {     284}, {  14} }, // CHAR                     
    { {     285}, {  15} }, // SHORT                    
    { {     286}, {  16} }, // INT                      
    { {     287}, {  17} }, // LONG                     
    { {     290}, {  18} }, // FLOAT                    
    { {     291}, {  19} }, // DOUBLE                   
    { {     288}, {  20} }, // SIGNED                   
    { {     289}, {  21} }, // UNSIGNED                 
    { {     342}, {  22} }, // struct_or_union_specifier
    { {     343}, {  23} }, // enum_specifier           
    { {     282}, {  24} }, // TYPE_NAME                
    { {     292}, {  25} }, // CONST                    
    { {     293}, {  26} }, // VOLATILE                 
    { {     344}, {  30} }, // struct_or_union          
    { {     297}, {  31} }, // ENUM                     
    { {     295}, {  32} }, // STRUCT                   
    { {     296}, {  33} }, // UNION                    
    { {       0}, { -85} },                             
};

SR__ s_36[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -75} }, 
};

SR__ s_37[] =
{
    { { REQ_TOKEN}, {  3} },       
    { {        59}, { 61} }, // ';'
    { {        44}, { 62} }, // ','
    { {         0}, {  0} },       
};

SR__ s_38[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -83} }, 
};

SR__ s_39[] =
{
    { { REQ_TOKEN}, { 27} },                             
    { {       364}, { 63} }, // compound_statement       
    { {       333}, { 64} }, // declaration              
    { {       123}, { 42} }, // '{'                      
    { {       334}, { 43} }, // declaration_specifiers   
    { {       336}, {  7} }, // storage_class_specifier  
    { {       337}, {  8} }, // type_specifier           
    { {       338}, {  9} }, // type_qualifier           
    { {       283}, { 12} }, // TYPEDEF                  
    { {       294}, { 13} }, // VOID                     
    { {       284}, { 14} }, // CHAR                     
    { {       285}, { 15} }, // SHORT                    
    { {       286}, { 16} }, // INT                      
    { {       287}, { 17} }, // LONG                     
    { {       290}, { 18} }, // FLOAT                    
    { {       291}, { 19} }, // DOUBLE                   
    { {       288}, { 20} }, // SIGNED                   
    { {       289}, { 21} }, // UNSIGNED                 
    { {       342}, { 22} }, // struct_or_union_specifier
    { {       343}, { 23} }, // enum_specifier           
    { {       282}, { 24} }, // TYPE_NAME                
    { {       292}, { 25} }, // CONST                    
    { {       293}, { 26} }, // VOLATILE                 
    { {       344}, { 30} }, // struct_or_union          
    { {       297}, { 31} }, // ENUM                     
    { {       295}, { 32} }, // STRUCT                   
    { {       296}, { 33} }, // UNION                    
    { {         0}, {  0} },                             
};

SR__ s_40[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -207} }, 
};

SR__ s_41[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -182} }, 
};

SR__ s_42[] =
{
    { { REQ_TOKEN}, {  79} },                             
    { {       125}, {  65} }, // '}'                      
    { {       369}, {  66} }, // statement_list           
    { {       370}, {  67} }, // declaration_list         
    { {       362}, {  68} }, // statement                
    { {       333}, {  41} }, // declaration              
    { {       363}, {  69} }, // labeled_statement        
    { {       364}, {  70} }, // compound_statement       
    { {       365}, {  71} }, // expression_statement     
    { {       366}, {  72} }, // selection_statement      
    { {       367}, {  73} }, // iteration_statement      
    { {       368}, {  74} }, // jump_statement           
    { {       334}, {  43} }, // declaration_specifiers   
    { {       257}, {  75} }, // IDENTIFIER               
    { {       299}, {  76} }, // CASE                     
    { {       300}, {  77} }, // DEFAULT                  
    { {       123}, {  42} }, // '{'                      
    { {        59}, {  78} }, // ';'                      
    { {       312}, {  79} }, // expression               
    { {       301}, {  80} }, // IF                       
    { {       302}, {  81} }, // SWITCH                   
    { {       303}, {  82} }, // WHILE                    
    { {       304}, {  83} }, // DO                       
    { {       305}, {  84} }, // FOR                      
    { {       306}, {  85} }, // GOTO                     
    { {       307}, {  86} }, // CONTINUE                 
    { {       308}, {  87} }, // BREAK                    
    { {       309}, {  88} }, // RETURN                   
    { {       336}, {   7} }, // storage_class_specifier  
    { {       337}, {   8} }, // type_specifier           
    { {       338}, {   9} }, // type_qualifier           
    { {       315}, {  89} }, // assignment_expression    
    { {       283}, {  12} }, // TYPEDEF                  
    { {       294}, {  13} }, // VOID                     
    { {       284}, {  14} }, // CHAR                     
    { {       285}, {  15} }, // SHORT                    
    { {       286}, {  16} }, // INT                      
    { {       287}, {  17} }, // LONG                     
    { {       290}, {  18} }, // FLOAT                    
    { {       291}, {  19} }, // DOUBLE                   
    { {       288}, {  20} }, // SIGNED                   
    { {       289}, {  21} }, // UNSIGNED                 
    { {       342}, {  22} }, // struct_or_union_specifier
    { {       343}, {  23} }, // enum_specifier           
    { {       282}, {  24} }, // TYPE_NAME                
    { {       292}, {  25} }, // CONST                    
    { {       293}, {  26} }, // VOLATILE                 
    { {       330}, {  90} }, // conditional_expression   
    { {       316}, {  91} }, // unary_expression         
    { {       344}, {  30} }, // struct_or_union          
    { {       297}, {  31} }, // ENUM                     
    { {       329}, {  92} }, // logical_or_expression    
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       295}, {  32} }, // STRUCT                   
    { {       296}, {  33} }, // UNION                    
    { {       328}, {  98} }, // logical_and_expression   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {        40}, { 109} }, // '('                      
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_43[] =
{
    { { REQ_TOKEN}, {  10} },                        
    { {        59}, {  36} }, // ';'                 
    { {       335}, {  37} }, // init_declarator_list
    { {       339}, {  38} }, // init_declarator     
    { {       340}, { 118} }, // declarator          
    { {       352}, {  10} }, // pointer             
    { {       353}, {  11} }, // direct_declarator   
    { {        42}, {  27} }, // '*'                 
    { {       257}, {  28} }, // IDENTIFIER          
    { {        40}, {  29} }, // '('                 
    { {         0}, {   0} },                        
};

SR__ s_44[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -78} }, 
};

SR__ s_45[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -80} }, 
};

SR__ s_46[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -82} }, 
};

SR__ s_47[] =
{
    { { REQ_DEF}, {    3} },       
    { {      91}, {   48} }, // '['
    { {      40}, {   49} }, // '('
    { {       0}, { -126} },       
};

SR__ s_48[] =
{
    { { REQ_TOKEN}, {  32} },                             
    { {       332}, { 119} }, // constant_expression      
    { {        93}, { 120} }, // ']'                      
    { {       330}, { 121} }, // conditional_expression   
    { {       329}, {  92} }, // logical_or_expression    
    { {       328}, {  98} }, // logical_and_expression   
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {       316}, { 122} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_49[] =
{
    { { REQ_TOKEN}, {  30} },                             
    { {       354}, { 124} }, // parameter_type_list      
    { {       355}, { 125} }, // identifier_list          
    { {        41}, { 126} }, // ')'                      
    { {       357}, { 127} }, // parameter_list           
    { {       257}, { 128} }, // IDENTIFIER               
    { {       358}, { 129} }, // parameter_declaration    
    { {       334}, { 130} }, // declaration_specifiers   
    { {       336}, {   7} }, // storage_class_specifier  
    { {       337}, {   8} }, // type_specifier           
    { {       338}, {   9} }, // type_qualifier           
    { {       283}, {  12} }, // TYPEDEF                  
    { {       294}, {  13} }, // VOID                     
    { {       284}, {  14} }, // CHAR                     
    { {       285}, {  15} }, // SHORT                    
    { {       286}, {  16} }, // INT                      
    { {       287}, {  17} }, // LONG                     
    { {       290}, {  18} }, // FLOAT                    
    { {       291}, {  19} }, // DOUBLE                   
    { {       288}, {  20} }, // SIGNED                   
    { {       289}, {  21} }, // UNSIGNED                 
    { {       342}, {  22} }, // struct_or_union_specifier
    { {       343}, {  23} }, // enum_specifier           
    { {       282}, {  24} }, // TYPE_NAME                
    { {       292}, {  25} }, // CONST                    
    { {       293}, {  26} }, // VOLATILE                 
    { {       344}, {  30} }, // struct_or_union          
    { {       297}, {  31} }, // ENUM                     
    { {       295}, {  32} }, // STRUCT                   
    { {       296}, {  33} }, // UNION                    
    { {         0}, {   0} },                             
};

SR__ s_50[] =
{
    { { REQ_DEF}, {    6} },                  
    { {     352}, {  131} }, // pointer       
    { {     338}, {  132} }, // type_qualifier
    { {      42}, {   27} }, // '*'           
    { {     292}, {   25} }, // CONST         
    { {     293}, {   26} }, // VOLATILE      
    { {       0}, { -136} },                  
};

SR__ s_51[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -137} }, 
};

SR__ s_52[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -139} }, 
};

SR__ s_53[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 133} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_54[] =
{
    { { REQ_DEF}, {    2} },       
    { {     123}, {  134} }, // '{'
    { {       0}, { -102} },       
};

SR__ s_55[] =
{
    { { REQ_TOKEN}, {  24} },                             
    { {       345}, { 135} }, // struct_declaration_list  
    { {       346}, { 136} }, // struct_declaration       
    { {       347}, { 137} }, // specifier_qualifier_list 
    { {       337}, { 138} }, // type_specifier           
    { {       338}, { 139} }, // type_qualifier           
    { {       294}, {  13} }, // VOID                     
    { {       284}, {  14} }, // CHAR                     
    { {       285}, {  15} }, // SHORT                    
    { {       286}, {  16} }, // INT                      
    { {       287}, {  17} }, // LONG                     
    { {       290}, {  18} }, // FLOAT                    
    { {       291}, {  19} }, // DOUBLE                   
    { {       288}, {  20} }, // SIGNED                   
    { {       289}, {  21} }, // UNSIGNED                 
    { {       342}, {  22} }, // struct_or_union_specifier
    { {       343}, {  23} }, // enum_specifier           
    { {       282}, {  24} }, // TYPE_NAME                
    { {       292}, {  25} }, // CONST                    
    { {       293}, {  26} }, // VOLATILE                 
    { {       344}, {  30} }, // struct_or_union          
    { {       297}, {  31} }, // ENUM                     
    { {       295}, {  32} }, // STRUCT                   
    { {       296}, {  33} }, // UNION                    
    { {         0}, {   0} },                             
};

SR__ s_56[] =
{
    { { REQ_TOKEN}, {   4} },                   
    { {       350}, { 140} }, // enumerator_list
    { {       351}, { 141} }, // enumerator     
    { {       257}, { 142} }, // IDENTIFIER     
    { {         0}, {   0} },                   
};

SR__ s_57[] =
{
    { { REQ_DEF}, {    2} },       
    { {     123}, {  143} }, // '{'
    { {       0}, { -119} },       
};

SR__ s_58[] =
{
    { { REQ_TOKEN}, {  27} },                             
    { {       364}, { 144} }, // compound_statement       
    { {       333}, {  64} }, // declaration              
    { {       123}, {  42} }, // '{'                      
    { {       334}, {  43} }, // declaration_specifiers   
    { {       336}, {   7} }, // storage_class_specifier  
    { {       337}, {   8} }, // type_specifier           
    { {       338}, {   9} }, // type_qualifier           
    { {       283}, {  12} }, // TYPEDEF                  
    { {       294}, {  13} }, // VOID                     
    { {       284}, {  14} }, // CHAR                     
    { {       285}, {  15} }, // SHORT                    
    { {       286}, {  16} }, // INT                      
    { {       287}, {  17} }, // LONG                     
    { {       290}, {  18} }, // FLOAT                    
    { {       291}, {  19} }, // DOUBLE                   
    { {       288}, {  20} }, // SIGNED                   
    { {       289}, {  21} }, // UNSIGNED                 
    { {       342}, {  22} }, // struct_or_union_specifier
    { {       343}, {  23} }, // enum_specifier           
    { {       282}, {  24} }, // TYPE_NAME                
    { {       292}, {  25} }, // CONST                    
    { {       293}, {  26} }, // VOLATILE                 
    { {       344}, {  30} }, // struct_or_union          
    { {       297}, {  31} }, // ENUM                     
    { {       295}, {  32} }, // STRUCT                   
    { {       296}, {  33} }, // UNION                    
    { {         0}, {   0} },                             
};

SR__ s_59[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -205} }, 
};

SR__ s_60[] =
{
    { { REQ_TOKEN}, {  33} },                             
    { {       341}, { 145} }, // initializer              
    { {       315}, { 146} }, // assignment_expression    
    { {       123}, { 147} }, // '{'                      
    { {       330}, {  90} }, // conditional_expression   
    { {       316}, {  91} }, // unary_expression         
    { {       329}, {  92} }, // logical_or_expression    
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       328}, {  98} }, // logical_and_expression   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {        40}, { 109} }, // '('                      
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_61[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -76} }, 
};

SR__ s_62[] =
{
    { { REQ_TOKEN}, {   8} },                     
    { {       339}, { 148} }, // init_declarator  
    { {       340}, { 118} }, // declarator       
    { {       352}, {  10} }, // pointer          
    { {       353}, {  11} }, // direct_declarator
    { {        42}, {  27} }, // '*'              
    { {       257}, {  28} }, // IDENTIFIER       
    { {        40}, {  29} }, // '('              
    { {         0}, {   0} },                     
};

SR__ s_63[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -206} }, 
};

SR__ s_64[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -183} }, 
};

SR__ s_65[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -178} }, 
};

SR__ s_66[] =
{
    { { REQ_TOKEN}, {  53} },                             
    { {       125}, { 149} }, // '}'                      
    { {       362}, { 150} }, // statement                
    { {       363}, {  69} }, // labeled_statement        
    { {       364}, {  70} }, // compound_statement       
    { {       365}, {  71} }, // expression_statement     
    { {       366}, {  72} }, // selection_statement      
    { {       367}, {  73} }, // iteration_statement      
    { {       368}, {  74} }, // jump_statement           
    { {       257}, {  75} }, // IDENTIFIER               
    { {       299}, {  76} }, // CASE                     
    { {       300}, {  77} }, // DEFAULT                  
    { {       123}, {  42} }, // '{'                      
    { {        59}, {  78} }, // ';'                      
    { {       312}, {  79} }, // expression               
    { {       301}, {  80} }, // IF                       
    { {       302}, {  81} }, // SWITCH                   
    { {       303}, {  82} }, // WHILE                    
    { {       304}, {  83} }, // DO                       
    { {       305}, {  84} }, // FOR                      
    { {       306}, {  85} }, // GOTO                     
    { {       307}, {  86} }, // CONTINUE                 
    { {       308}, {  87} }, // BREAK                    
    { {       309}, {  88} }, // RETURN                   
    { {       315}, {  89} }, // assignment_expression    
    { {       330}, {  90} }, // conditional_expression   
    { {       316}, {  91} }, // unary_expression         
    { {       329}, {  92} }, // logical_or_expression    
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       328}, {  98} }, // logical_and_expression   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {        40}, { 109} }, // '('                      
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_67[] =
{
    { { REQ_TOKEN}, {  78} },                             
    { {       125}, { 151} }, // '}'                      
    { {       369}, { 152} }, // statement_list           
    { {       333}, {  64} }, // declaration              
    { {       362}, {  68} }, // statement                
    { {       334}, {  43} }, // declaration_specifiers   
    { {       363}, {  69} }, // labeled_statement        
    { {       364}, {  70} }, // compound_statement       
    { {       365}, {  71} }, // expression_statement     
    { {       366}, {  72} }, // selection_statement      
    { {       367}, {  73} }, // iteration_statement      
    { {       368}, {  74} }, // jump_statement           
    { {       336}, {   7} }, // storage_class_specifier  
    { {       337}, {   8} }, // type_specifier           
    { {       338}, {   9} }, // type_qualifier           
    { {       257}, {  75} }, // IDENTIFIER               
    { {       299}, {  76} }, // CASE                     
    { {       300}, {  77} }, // DEFAULT                  
    { {       123}, {  42} }, // '{'                      
    { {        59}, {  78} }, // ';'                      
    { {       312}, {  79} }, // expression               
    { {       301}, {  80} }, // IF                       
    { {       302}, {  81} }, // SWITCH                   
    { {       303}, {  82} }, // WHILE                    
    { {       304}, {  83} }, // DO                       
    { {       305}, {  84} }, // FOR                      
    { {       306}, {  85} }, // GOTO                     
    { {       307}, {  86} }, // CONTINUE                 
    { {       308}, {  87} }, // BREAK                    
    { {       309}, {  88} }, // RETURN                   
    { {       283}, {  12} }, // TYPEDEF                  
    { {       294}, {  13} }, // VOID                     
    { {       284}, {  14} }, // CHAR                     
    { {       285}, {  15} }, // SHORT                    
    { {       286}, {  16} }, // INT                      
    { {       287}, {  17} }, // LONG                     
    { {       290}, {  18} }, // FLOAT                    
    { {       291}, {  19} }, // DOUBLE                   
    { {       288}, {  20} }, // SIGNED                   
    { {       289}, {  21} }, // UNSIGNED                 
    { {       342}, {  22} }, // struct_or_union_specifier
    { {       343}, {  23} }, // enum_specifier           
    { {       282}, {  24} }, // TYPE_NAME                
    { {       292}, {  25} }, // CONST                    
    { {       293}, {  26} }, // VOLATILE                 
    { {       315}, {  89} }, // assignment_expression    
    { {       344}, {  30} }, // struct_or_union          
    { {       297}, {  31} }, // ENUM                     
    { {       330}, {  90} }, // conditional_expression   
    { {       316}, {  91} }, // unary_expression         
    { {       295}, {  32} }, // STRUCT                   
    { {       296}, {  33} }, // UNION                    
    { {       329}, {  92} }, // logical_or_expression    
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       328}, {  98} }, // logical_and_expression   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {        40}, { 109} }, // '('                      
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_68[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -184} }, 
};

SR__ s_69[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -169} }, 
};

SR__ s_70[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -170} }, 
};

SR__ s_71[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -171} }, 
};

SR__ s_72[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -172} }, 
};

SR__ s_73[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -173} }, 
};

SR__ s_74[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -174} }, 
};

SR__ s_75[] =
{
    { { REQ_DEF}, {   2} },       
    { {      58}, { 153} }, // ':'
    { {       0}, {  -1} },       
};

SR__ s_76[] =
{
    { { REQ_TOKEN}, {  31} },                             
    { {       332}, { 154} }, // constant_expression      
    { {       330}, { 121} }, // conditional_expression   
    { {       329}, {  92} }, // logical_or_expression    
    { {       328}, {  98} }, // logical_and_expression   
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {       316}, { 122} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_77[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        58}, { 155} }, // ':'
    { {         0}, {   0} },       
};

SR__ s_78[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -186} }, 
};

SR__ s_79[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        59}, { 156} }, // ';'
    { {        44}, { 157} }, // ','
    { {         0}, {   0} },       
};

SR__ s_80[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 158} }, // '('
    { {         0}, {   0} },       
};

SR__ s_81[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 159} }, // '('
    { {         0}, {   0} },       
};

SR__ s_82[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 160} }, // '('
    { {         0}, {   0} },       
};

SR__ s_83[] =
{
    { { REQ_TOKEN}, {  52} },                             
    { {       362}, { 161} }, // statement                
    { {       363}, {  69} }, // labeled_statement        
    { {       364}, {  70} }, // compound_statement       
    { {       365}, {  71} }, // expression_statement     
    { {       366}, {  72} }, // selection_statement      
    { {       367}, {  73} }, // iteration_statement      
    { {       368}, {  74} }, // jump_statement           
    { {       257}, {  75} }, // IDENTIFIER               
    { {       299}, {  76} }, // CASE                     
    { {       300}, {  77} }, // DEFAULT                  
    { {       123}, {  42} }, // '{'                      
    { {        59}, {  78} }, // ';'                      
    { {       312}, {  79} }, // expression               
    { {       301}, {  80} }, // IF                       
    { {       302}, {  81} }, // SWITCH                   
    { {       303}, {  82} }, // WHILE                    
    { {       304}, {  83} }, // DO                       
    { {       305}, {  84} }, // FOR                      
    { {       306}, {  85} }, // GOTO                     
    { {       307}, {  86} }, // CONTINUE                 
    { {       308}, {  87} }, // BREAK                    
    { {       309}, {  88} }, // RETURN                   
    { {       315}, {  89} }, // assignment_expression    
    { {       330}, {  90} }, // conditional_expression   
    { {       316}, {  91} }, // unary_expression         
    { {       329}, {  92} }, // logical_or_expression    
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       328}, {  98} }, // logical_and_expression   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {        40}, { 109} }, // '('                      
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_84[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 162} }, // '('
    { {         0}, {   0} },       
};

SR__ s_85[] =
{
    { { REQ_TOKEN}, {   2} },              
    { {       257}, { 163} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_86[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 164} }, // ';'
    { {         0}, {   0} },       
};

SR__ s_87[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 165} }, // ';'
    { {         0}, {   0} },       
};

SR__ s_88[] =
{
    { { REQ_TOKEN}, {  33} },                             
    { {        59}, { 166} }, // ';'                      
    { {       312}, { 167} }, // expression               
    { {       315}, {  89} }, // assignment_expression    
    { {       330}, {  90} }, // conditional_expression   
    { {       316}, {  91} }, // unary_expression         
    { {       329}, {  92} }, // logical_or_expression    
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       328}, {  98} }, // logical_and_expression   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {        40}, { 109} }, // '('                      
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_89[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -72} }, 
};

SR__ s_90[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -59} }, 
};

SR__ s_91[] =
{
    { { REQ_DEF}, {  13} },                       
    { {     331}, { 168} }, // assignment_operator
    { {      61}, { 169} }, // '='                
    { {     272}, { 170} }, // MUL_ASSIGN         
    { {     273}, { 171} }, // DIV_ASSIGN         
    { {     274}, { 172} }, // MOD_ASSIGN         
    { {     275}, { 173} }, // ADD_ASSIGN         
    { {     276}, { 174} }, // SUB_ASSIGN         
    { {     277}, { 175} }, // LEFT_ASSIGN        
    { {     278}, { 176} }, // RIGHT_ASSIGN       
    { {     279}, { 177} }, // AND_ASSIGN         
    { {     280}, { 178} }, // XOR_ASSIGN         
    { {     281}, { 179} }, // OR_ASSIGN          
    { {       0}, { -27} },                       
};

SR__ s_92[] =
{
    { { REQ_DEF}, {   3} },         
    { {      63}, { 180} }, // '?'  
    { {     271}, { 181} }, // OR_OP
    { {       0}, { -57} },         
};

SR__ s_93[] =
{
    { { REQ_DEF}, {   7} },          
    { {      91}, { 182} }, // '['   
    { {      40}, { 183} }, // '('   
    { {      46}, { 184} }, // '.'   
    { {     261}, { 185} }, // PTR_OP
    { {     262}, { 186} }, // INC_OP
    { {     263}, { 187} }, // DEC_OP
    { {       0}, { -15} },          
};

SR__ s_94[] =
{
    { { REQ_TOKEN}, {  18} },                      
    { {       316}, { 188} }, // unary_expression  
    { {       313}, {  93} }, // postfix_expression
    { {       262}, {  94} }, // INC_OP            
    { {       263}, {  95} }, // DEC_OP            
    { {       317}, {  96} }, // unary_operator    
    { {       260}, {  97} }, // SIZEOF            
    { {       311}, {  99} }, // primary_expression
    { {        38}, { 100} }, // '&'               
    { {        42}, { 101} }, // '*'               
    { {        43}, { 102} }, // '+'               
    { {        45}, { 103} }, // '-'               
    { {       126}, { 104} }, // '~'               
    { {        33}, { 105} }, // '!'               
    { {       257}, { 123} }, // IDENTIFIER        
    { {       258}, { 107} }, // CONSTANT          
    { {       259}, { 108} }, // STRING_LITERAL    
    { {        40}, { 189} }, // '('               
    { {         0}, {   0} },                      
};

SR__ s_95[] =
{
    { { REQ_TOKEN}, {  18} },                      
    { {       316}, { 190} }, // unary_expression  
    { {       313}, {  93} }, // postfix_expression
    { {       262}, {  94} }, // INC_OP            
    { {       263}, {  95} }, // DEC_OP            
    { {       317}, {  96} }, // unary_operator    
    { {       260}, {  97} }, // SIZEOF            
    { {       311}, {  99} }, // primary_expression
    { {        38}, { 100} }, // '&'               
    { {        42}, { 101} }, // '*'               
    { {        43}, { 102} }, // '+'               
    { {        45}, { 103} }, // '-'               
    { {       126}, { 104} }, // '~'               
    { {        33}, { 105} }, // '!'               
    { {       257}, { 123} }, // IDENTIFIER        
    { {       258}, { 107} }, // CONSTANT          
    { {       259}, { 108} }, // STRING_LITERAL    
    { {        40}, { 189} }, // '('               
    { {         0}, {   0} },                      
};

SR__ s_96[] =
{
    { { REQ_TOKEN}, {  19} },                      
    { {       318}, { 191} }, // cast_expression   
    { {       316}, { 122} }, // unary_expression  
    { {        40}, { 109} }, // '('               
    { {       313}, {  93} }, // postfix_expression
    { {       262}, {  94} }, // INC_OP            
    { {       263}, {  95} }, // DEC_OP            
    { {       317}, {  96} }, // unary_operator    
    { {       260}, {  97} }, // SIZEOF            
    { {       311}, {  99} }, // primary_expression
    { {        38}, { 100} }, // '&'               
    { {        42}, { 101} }, // '*'               
    { {        43}, { 102} }, // '+'               
    { {        45}, { 103} }, // '-'               
    { {       126}, { 104} }, // '~'               
    { {        33}, { 105} }, // '!'               
    { {       257}, { 123} }, // IDENTIFIER        
    { {       258}, { 107} }, // CONSTANT          
    { {       259}, { 108} }, // STRING_LITERAL    
    { {         0}, {   0} },                      
};

SR__ s_97[] =
{
    { { REQ_TOKEN}, {  18} },                      
    { {       316}, { 192} }, // unary_expression  
    { {        40}, { 193} }, // '('               
    { {       313}, {  93} }, // postfix_expression
    { {       262}, {  94} }, // INC_OP            
    { {       263}, {  95} }, // DEC_OP            
    { {       317}, {  96} }, // unary_operator    
    { {       260}, {  97} }, // SIZEOF            
    { {       311}, {  99} }, // primary_expression
    { {        38}, { 100} }, // '&'               
    { {        42}, { 101} }, // '*'               
    { {        43}, { 102} }, // '+'               
    { {        45}, { 103} }, // '-'               
    { {       126}, { 104} }, // '~'               
    { {        33}, { 105} }, // '!'               
    { {       257}, { 123} }, // IDENTIFIER        
    { {       258}, { 107} }, // CONSTANT          
    { {       259}, { 108} }, // STRING_LITERAL    
    { {         0}, {   0} },                      
};

SR__ s_98[] =
{
    { { REQ_DEF}, {   2} },          
    { {     270}, { 194} }, // AND_OP
    { {       0}, { -55} },          
};

SR__ s_99[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -5} }, 
};

SR__ s_100[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -21} }, 
};

SR__ s_101[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -22} }, 
};

SR__ s_102[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -23} }, 
};

SR__ s_103[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -24} }, 
};

SR__ s_104[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -25} }, 
};

SR__ s_105[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -26} }, 
};

SR__ s_106[] =
{
    { { REQ_DEF}, {   2} },       
    { {     124}, { 195} }, // '|'
    { {       0}, { -53} },       
};

SR__ s_107[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -2} }, 
};

SR__ s_108[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -3} }, 
};

SR__ s_109[] =
{
    { { REQ_TOKEN}, {  54} },                             
    { {       312}, { 196} }, // expression               
    { {       319}, { 197} }, // type_name                
    { {       315}, {  89} }, // assignment_expression    
    { {       347}, { 198} }, // specifier_qualifier_list 
    { {       330}, {  90} }, // conditional_expression   
    { {       316}, {  91} }, // unary_expression         
    { {       337}, { 138} }, // type_specifier           
    { {       338}, { 139} }, // type_qualifier           
    { {       329}, {  92} }, // logical_or_expression    
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       294}, {  13} }, // VOID                     
    { {       284}, {  14} }, // CHAR                     
    { {       285}, {  15} }, // SHORT                    
    { {       286}, {  16} }, // INT                      
    { {       287}, {  17} }, // LONG                     
    { {       290}, {  18} }, // FLOAT                    
    { {       291}, {  19} }, // DOUBLE                   
    { {       288}, {  20} }, // SIGNED                   
    { {       289}, {  21} }, // UNSIGNED                 
    { {       342}, {  22} }, // struct_or_union_specifier
    { {       343}, {  23} }, // enum_specifier           
    { {       282}, {  24} }, // TYPE_NAME                
    { {       292}, {  25} }, // CONST                    
    { {       293}, {  26} }, // VOLATILE                 
    { {       328}, {  98} }, // logical_and_expression   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       344}, {  30} }, // struct_or_union          
    { {       297}, {  31} }, // ENUM                     
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {        40}, { 109} }, // '('                      
    { {       295}, {  32} }, // STRUCT                   
    { {       296}, {  33} }, // UNION                    
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_110[] =
{
    { { REQ_DEF}, {   2} },       
    { {      94}, { 199} }, // '^'
    { {       0}, { -51} },       
};

SR__ s_111[] =
{
    { { REQ_DEF}, {   2} },       
    { {      38}, { 200} }, // '&'
    { {       0}, { -49} },       
};

SR__ s_112[] =
{
    { { REQ_DEF}, {   3} },         
    { {     268}, { 201} }, // EQ_OP
    { {     269}, { 202} }, // NE_OP
    { {       0}, { -47} },         
};

SR__ s_113[] =
{
    { { REQ_DEF}, {   5} },         
    { {      60}, { 203} }, // '<'  
    { {      62}, { 204} }, // '>'  
    { {     266}, { 205} }, // LE_OP
    { {     267}, { 206} }, // GE_OP
    { {       0}, { -44} },         
};

SR__ s_114[] =
{
    { { REQ_DEF}, {   3} },            
    { {     264}, { 207} }, // LEFT_OP 
    { {     265}, { 208} }, // RIGHT_OP
    { {       0}, { -39} },            
};

SR__ s_115[] =
{
    { { REQ_DEF}, {   3} },       
    { {      43}, { 209} }, // '+'
    { {      45}, { 210} }, // '-'
    { {       0}, { -36} },       
};

SR__ s_116[] =
{
    { { REQ_DEF}, {   4} },       
    { {      42}, { 211} }, // '*'
    { {      47}, { 212} }, // '/'
    { {      37}, { 213} }, // '%'
    { {       0}, { -33} },       
};

SR__ s_117[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -29} }, 
};

SR__ s_118[] =
{
    { { REQ_DEF}, {   2} },       
    { {      61}, {  60} }, // '='
    { {       0}, { -85} },       
};

SR__ s_119[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        93}, { 214} }, // ']'
    { {         0}, {   0} },       
};

SR__ s_120[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -131} }, 
};

SR__ s_121[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -74} }, 
};

SR__ s_122[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -27} }, 
};

SR__ s_123[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -1} }, 
};

SR__ s_124[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 215} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_125[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 216} }, // ')'
    { {        44}, { 217} }, // ','
    { {         0}, {   0} },       
};

SR__ s_126[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -134} }, 
};

SR__ s_127[] =
{
    { { REQ_DEF}, {    2} },       
    { {      44}, {  218} }, // ','
    { {       0}, { -141} },       
};

SR__ s_128[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -148} }, 
};

SR__ s_129[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -143} }, 
};

SR__ s_130[] =
{
    { { REQ_DEF}, {   10} },                              
    { {     340}, {  219} }, // declarator                
    { {     359}, {  220} }, // abstract_declarator       
    { {     352}, {  221} }, // pointer                   
    { {     353}, {   11} }, // direct_declarator         
    { {     360}, {  222} }, // direct_abstract_declarator
    { {      42}, {   27} }, // '*'                       
    { {     257}, {   28} }, // IDENTIFIER                
    { {      40}, {  223} }, // '('                       
    { {      91}, {  224} }, // '['                       
    { {       0}, { -147} },                              
};

SR__ s_131[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -138} }, 
};

SR__ s_132[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -140} }, 
};

SR__ s_133[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -129} }, 
};

SR__ s_134[] =
{
    { { REQ_TOKEN}, {  24} },                             
    { {       345}, { 225} }, // struct_declaration_list  
    { {       346}, { 136} }, // struct_declaration       
    { {       347}, { 137} }, // specifier_qualifier_list 
    { {       337}, { 138} }, // type_specifier           
    { {       338}, { 139} }, // type_qualifier           
    { {       294}, {  13} }, // VOID                     
    { {       284}, {  14} }, // CHAR                     
    { {       285}, {  15} }, // SHORT                    
    { {       286}, {  16} }, // INT                      
    { {       287}, {  17} }, // LONG                     
    { {       290}, {  18} }, // FLOAT                    
    { {       291}, {  19} }, // DOUBLE                   
    { {       288}, {  20} }, // SIGNED                   
    { {       289}, {  21} }, // UNSIGNED                 
    { {       342}, {  22} }, // struct_or_union_specifier
    { {       343}, {  23} }, // enum_specifier           
    { {       282}, {  24} }, // TYPE_NAME                
    { {       292}, {  25} }, // CONST                    
    { {       293}, {  26} }, // VOLATILE                 
    { {       344}, {  30} }, // struct_or_union          
    { {       297}, {  31} }, // ENUM                     
    { {       295}, {  32} }, // STRUCT                   
    { {       296}, {  33} }, // UNION                    
    { {         0}, {   0} },                             
};

SR__ s_135[] =
{
    { { REQ_TOKEN}, {  24} },                             
    { {       125}, { 226} }, // '}'                      
    { {       346}, { 227} }, // struct_declaration       
    { {       347}, { 137} }, // specifier_qualifier_list 
    { {       337}, { 138} }, // type_specifier           
    { {       338}, { 139} }, // type_qualifier           
    { {       294}, {  13} }, // VOID                     
    { {       284}, {  14} }, // CHAR                     
    { {       285}, {  15} }, // SHORT                    
    { {       286}, {  16} }, // INT                      
    { {       287}, {  17} }, // LONG                     
    { {       290}, {  18} }, // FLOAT                    
    { {       291}, {  19} }, // DOUBLE                   
    { {       288}, {  20} }, // SIGNED                   
    { {       289}, {  21} }, // UNSIGNED                 
    { {       342}, {  22} }, // struct_or_union_specifier
    { {       343}, {  23} }, // enum_specifier           
    { {       282}, {  24} }, // TYPE_NAME                
    { {       292}, {  25} }, // CONST                    
    { {       293}, {  26} }, // VOLATILE                 
    { {       344}, {  30} }, // struct_or_union          
    { {       297}, {  31} }, // ENUM                     
    { {       295}, {  32} }, // STRUCT                   
    { {       296}, {  33} }, // UNION                    
    { {         0}, {   0} },                             
};

SR__ s_136[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -105} }, 
};

SR__ s_137[] =
{
    { { REQ_TOKEN}, {  10} },                          
    { {       348}, { 228} }, // struct_declarator_list
    { {       349}, { 229} }, // struct_declarator     
    { {       340}, { 230} }, // declarator            
    { {        58}, { 231} }, // ':'                   
    { {       352}, {  10} }, // pointer               
    { {       353}, {  11} }, // direct_declarator     
    { {        42}, {  27} }, // '*'                   
    { {       257}, {  28} }, // IDENTIFIER            
    { {        40}, {  29} }, // '('                   
    { {         0}, {   0} },                          
};

SR__ s_138[] =
{
    { { REQ_DEF}, {   22} },                             
    { {     347}, {  232} }, // specifier_qualifier_list 
    { {     337}, {  138} }, // type_specifier           
    { {     338}, {  139} }, // type_qualifier           
    { {     294}, {   13} }, // VOID                     
    { {     284}, {   14} }, // CHAR                     
    { {     285}, {   15} }, // SHORT                    
    { {     286}, {   16} }, // INT                      
    { {     287}, {   17} }, // LONG                     
    { {     290}, {   18} }, // FLOAT                    
    { {     291}, {   19} }, // DOUBLE                   
    { {     288}, {   20} }, // SIGNED                   
    { {     289}, {   21} }, // UNSIGNED                 
    { {     342}, {   22} }, // struct_or_union_specifier
    { {     343}, {   23} }, // enum_specifier           
    { {     282}, {   24} }, // TYPE_NAME                
    { {     292}, {   25} }, // CONST                    
    { {     293}, {   26} }, // VOLATILE                 
    { {     344}, {   30} }, // struct_or_union          
    { {     297}, {   31} }, // ENUM                     
    { {     295}, {   32} }, // STRUCT                   
    { {     296}, {   33} }, // UNION                    
    { {       0}, { -109} },                             
};

SR__ s_139[] =
{
    { { REQ_DEF}, {   22} },                             
    { {     347}, {  233} }, // specifier_qualifier_list 
    { {     337}, {  138} }, // type_specifier           
    { {     338}, {  139} }, // type_qualifier           
    { {     294}, {   13} }, // VOID                     
    { {     284}, {   14} }, // CHAR                     
    { {     285}, {   15} }, // SHORT                    
    { {     286}, {   16} }, // INT                      
    { {     287}, {   17} }, // LONG                     
    { {     290}, {   18} }, // FLOAT                    
    { {     291}, {   19} }, // DOUBLE                   
    { {     288}, {   20} }, // SIGNED                   
    { {     289}, {   21} }, // UNSIGNED                 
    { {     342}, {   22} }, // struct_or_union_specifier
    { {     343}, {   23} }, // enum_specifier           
    { {     282}, {   24} }, // TYPE_NAME                
    { {     292}, {   25} }, // CONST                    
    { {     293}, {   26} }, // VOLATILE                 
    { {     344}, {   30} }, // struct_or_union          
    { {     297}, {   31} }, // ENUM                     
    { {     295}, {   32} }, // STRUCT                   
    { {     296}, {   33} }, // UNION                    
    { {       0}, { -111} },                             
};

SR__ s_140[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {       125}, { 234} }, // '}'
    { {        44}, { 235} }, // ','
    { {         0}, {   0} },       
};

SR__ s_141[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -120} }, 
};

SR__ s_142[] =
{
    { { REQ_DEF}, {    2} },       
    { {      61}, {  236} }, // '='
    { {       0}, { -122} },       
};

SR__ s_143[] =
{
    { { REQ_TOKEN}, {   4} },                   
    { {       350}, { 237} }, // enumerator_list
    { {       351}, { 141} }, // enumerator     
    { {       257}, { 142} }, // IDENTIFIER     
    { {         0}, {   0} },                   
};

SR__ s_144[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -204} }, 
};

SR__ s_145[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -86} }, 
};

SR__ s_146[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -164} }, 
};

SR__ s_147[] =
{
    { { REQ_TOKEN}, {  34} },                             
    { {       361}, { 238} }, // initializer_list         
    { {       341}, { 239} }, // initializer              
    { {       315}, { 146} }, // assignment_expression    
    { {       123}, { 147} }, // '{'                      
    { {       330}, {  90} }, // conditional_expression   
    { {       316}, {  91} }, // unary_expression         
    { {       329}, {  92} }, // logical_or_expression    
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       328}, {  98} }, // logical_and_expression   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {        40}, { 109} }, // '('                      
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_148[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -84} }, 
};

SR__ s_149[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -179} }, 
};

SR__ s_150[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -185} }, 
};

SR__ s_151[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -180} }, 
};

SR__ s_152[] =
{
    { { REQ_TOKEN}, {  53} },                             
    { {       125}, { 240} }, // '}'                      
    { {       362}, { 150} }, // statement                
    { {       363}, {  69} }, // labeled_statement        
    { {       364}, {  70} }, // compound_statement       
    { {       365}, {  71} }, // expression_statement     
    { {       366}, {  72} }, // selection_statement      
    { {       367}, {  73} }, // iteration_statement      
    { {       368}, {  74} }, // jump_statement           
    { {       257}, {  75} }, // IDENTIFIER               
    { {       299}, {  76} }, // CASE                     
    { {       300}, {  77} }, // DEFAULT                  
    { {       123}, {  42} }, // '{'                      
    { {        59}, {  78} }, // ';'                      
    { {       312}, {  79} }, // expression               
    { {       301}, {  80} }, // IF                       
    { {       302}, {  81} }, // SWITCH                   
    { {       303}, {  82} }, // WHILE                    
    { {       304}, {  83} }, // DO                       
    { {       305}, {  84} }, // FOR                      
    { {       306}, {  85} }, // GOTO                     
    { {       307}, {  86} }, // CONTINUE                 
    { {       308}, {  87} }, // BREAK                    
    { {       309}, {  88} }, // RETURN                   
    { {       315}, {  89} }, // assignment_expression    
    { {       330}, {  90} }, // conditional_expression   
    { {       316}, {  91} }, // unary_expression         
    { {       329}, {  92} }, // logical_or_expression    
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       328}, {  98} }, // logical_and_expression   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {        40}, { 109} }, // '('                      
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_153[] =
{
    { { REQ_TOKEN}, {  52} },                             
    { {       362}, { 241} }, // statement                
    { {       363}, {  69} }, // labeled_statement        
    { {       364}, {  70} }, // compound_statement       
    { {       365}, {  71} }, // expression_statement     
    { {       366}, {  72} }, // selection_statement      
    { {       367}, {  73} }, // iteration_statement      
    { {       368}, {  74} }, // jump_statement           
    { {       257}, {  75} }, // IDENTIFIER               
    { {       299}, {  76} }, // CASE                     
    { {       300}, {  77} }, // DEFAULT                  
    { {       123}, {  42} }, // '{'                      
    { {        59}, {  78} }, // ';'                      
    { {       312}, {  79} }, // expression               
    { {       301}, {  80} }, // IF                       
    { {       302}, {  81} }, // SWITCH                   
    { {       303}, {  82} }, // WHILE                    
    { {       304}, {  83} }, // DO                       
    { {       305}, {  84} }, // FOR                      
    { {       306}, {  85} }, // GOTO                     
    { {       307}, {  86} }, // CONTINUE                 
    { {       308}, {  87} }, // BREAK                    
    { {       309}, {  88} }, // RETURN                   
    { {       315}, {  89} }, // assignment_expression    
    { {       330}, {  90} }, // conditional_expression   
    { {       316}, {  91} }, // unary_expression         
    { {       329}, {  92} }, // logical_or_expression    
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       328}, {  98} }, // logical_and_expression   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {        40}, { 109} }, // '('                      
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_154[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        58}, { 242} }, // ':'
    { {         0}, {   0} },       
};

SR__ s_155[] =
{
    { { REQ_TOKEN}, {  52} },                             
    { {       362}, { 243} }, // statement                
    { {       363}, {  69} }, // labeled_statement        
    { {       364}, {  70} }, // compound_statement       
    { {       365}, {  71} }, // expression_statement     
    { {       366}, {  72} }, // selection_statement      
    { {       367}, {  73} }, // iteration_statement      
    { {       368}, {  74} }, // jump_statement           
    { {       257}, {  75} }, // IDENTIFIER               
    { {       299}, {  76} }, // CASE                     
    { {       300}, {  77} }, // DEFAULT                  
    { {       123}, {  42} }, // '{'                      
    { {        59}, {  78} }, // ';'                      
    { {       312}, {  79} }, // expression               
    { {       301}, {  80} }, // IF                       
    { {       302}, {  81} }, // SWITCH                   
    { {       303}, {  82} }, // WHILE                    
    { {       304}, {  83} }, // DO                       
    { {       305}, {  84} }, // FOR                      
    { {       306}, {  85} }, // GOTO                     
    { {       307}, {  86} }, // CONTINUE                 
    { {       308}, {  87} }, // BREAK                    
    { {       309}, {  88} }, // RETURN                   
    { {       315}, {  89} }, // assignment_expression    
    { {       330}, {  90} }, // conditional_expression   
    { {       316}, {  91} }, // unary_expression         
    { {       329}, {  92} }, // logical_or_expression    
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       328}, {  98} }, // logical_and_expression   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {        40}, { 109} }, // '('                      
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_156[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -187} }, 
};

SR__ s_157[] =
{
    { { REQ_TOKEN}, {  31} },                             
    { {       315}, { 244} }, // assignment_expression    
    { {       330}, {  90} }, // conditional_expression   
    { {       316}, {  91} }, // unary_expression         
    { {       329}, {  92} }, // logical_or_expression    
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       328}, {  98} }, // logical_and_expression   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {        40}, { 109} }, // '('                      
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_158[] =
{
    { { REQ_TOKEN}, {  32} },                             
    { {       312}, { 245} }, // expression               
    { {       315}, {  89} }, // assignment_expression    
    { {       330}, {  90} }, // conditional_expression   
    { {       316}, {  91} }, // unary_expression         
    { {       329}, {  92} }, // logical_or_expression    
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       328}, {  98} }, // logical_and_expression   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {        40}, { 109} }, // '('                      
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_159[] =
{
    { { REQ_TOKEN}, {  32} },                             
    { {       312}, { 246} }, // expression               
    { {       315}, {  89} }, // assignment_expression    
    { {       330}, {  90} }, // conditional_expression   
    { {       316}, {  91} }, // unary_expression         
    { {       329}, {  92} }, // logical_or_expression    
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       328}, {  98} }, // logical_and_expression   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {        40}, { 109} }, // '('                      
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_160[] =
{
    { { REQ_TOKEN}, {  32} },                             
    { {       312}, { 247} }, // expression               
    { {       315}, {  89} }, // assignment_expression    
    { {       330}, {  90} }, // conditional_expression   
    { {       316}, {  91} }, // unary_expression         
    { {       329}, {  92} }, // logical_or_expression    
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       328}, {  98} }, // logical_and_expression   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {        40}, { 109} }, // '('                      
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_161[] =
{
    { { REQ_TOKEN}, {   2} },         
    { {       303}, { 248} }, // WHILE
    { {         0}, {   0} },         
};

SR__ s_162[] =
{
    { { REQ_TOKEN}, {  34} },                             
    { {       365}, { 249} }, // expression_statement     
    { {        59}, {  78} }, // ';'                      
    { {       312}, {  79} }, // expression               
    { {       315}, {  89} }, // assignment_expression    
    { {       330}, {  90} }, // conditional_expression   
    { {       316}, {  91} }, // unary_expression         
    { {       329}, {  92} }, // logical_or_expression    
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       328}, {  98} }, // logical_and_expression   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {        40}, { 109} }, // '('                      
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_163[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 250} }, // ';'
    { {         0}, {   0} },       
};

SR__ s_164[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -196} }, 
};

SR__ s_165[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -197} }, 
};

SR__ s_166[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -198} }, 
};

SR__ s_167[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        59}, { 251} }, // ';'
    { {        44}, { 157} }, // ','
    { {         0}, {   0} },       
};

SR__ s_168[] =
{
    { { REQ_TOKEN}, {  31} },                             
    { {       315}, { 252} }, // assignment_expression    
    { {       330}, {  90} }, // conditional_expression   
    { {       316}, {  91} }, // unary_expression         
    { {       329}, {  92} }, // logical_or_expression    
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       328}, {  98} }, // logical_and_expression   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {        40}, { 109} }, // '('                      
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_169[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -61} }, 
};

SR__ s_170[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -62} }, 
};

SR__ s_171[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -63} }, 
};

SR__ s_172[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -64} }, 
};

SR__ s_173[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -65} }, 
};

SR__ s_174[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -66} }, 
};

SR__ s_175[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -67} }, 
};

SR__ s_176[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -68} }, 
};

SR__ s_177[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -69} }, 
};

SR__ s_178[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -70} }, 
};

SR__ s_179[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -71} }, 
};

SR__ s_180[] =
{
    { { REQ_TOKEN}, {  32} },                             
    { {       312}, { 253} }, // expression               
    { {       315}, {  89} }, // assignment_expression    
    { {       330}, {  90} }, // conditional_expression   
    { {       316}, {  91} }, // unary_expression         
    { {       329}, {  92} }, // logical_or_expression    
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       328}, {  98} }, // logical_and_expression   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {        40}, { 109} }, // '('                      
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_181[] =
{
    { { REQ_TOKEN}, {  28} },                             
    { {       328}, { 254} }, // logical_and_expression   
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {       316}, { 122} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_182[] =
{
    { { REQ_TOKEN}, {  32} },                             
    { {       312}, { 255} }, // expression               
    { {       315}, {  89} }, // assignment_expression    
    { {       330}, {  90} }, // conditional_expression   
    { {       316}, {  91} }, // unary_expression         
    { {       329}, {  92} }, // logical_or_expression    
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       328}, {  98} }, // logical_and_expression   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {        40}, { 109} }, // '('                      
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_183[] =
{
    { { REQ_TOKEN}, {  33} },                             
    { {        41}, { 256} }, // ')'                      
    { {       314}, { 257} }, // argument_expression_list 
    { {       315}, { 258} }, // assignment_expression    
    { {       330}, {  90} }, // conditional_expression   
    { {       316}, {  91} }, // unary_expression         
    { {       329}, {  92} }, // logical_or_expression    
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       328}, {  98} }, // logical_and_expression   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {        40}, { 109} }, // '('                      
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_184[] =
{
    { { REQ_TOKEN}, {   2} },              
    { {       257}, { 259} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_185[] =
{
    { { REQ_TOKEN}, {   2} },              
    { {       257}, { 260} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_186[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -11} }, 
};

SR__ s_187[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -12} }, 
};

SR__ s_188[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR__ s_189[] =
{
    { { REQ_TOKEN}, {  32} },                             
    { {       312}, { 196} }, // expression               
    { {       315}, {  89} }, // assignment_expression    
    { {       330}, {  90} }, // conditional_expression   
    { {       316}, {  91} }, // unary_expression         
    { {       329}, {  92} }, // logical_or_expression    
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       328}, {  98} }, // logical_and_expression   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {        40}, { 109} }, // '('                      
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_190[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -17} }, 
};

SR__ s_191[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -18} }, 
};

SR__ s_192[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -19} }, 
};

SR__ s_193[] =
{
    { { REQ_TOKEN}, {  54} },                             
    { {       319}, { 261} }, // type_name                
    { {       312}, { 196} }, // expression               
    { {       347}, { 198} }, // specifier_qualifier_list 
    { {       315}, {  89} }, // assignment_expression    
    { {       337}, { 138} }, // type_specifier           
    { {       338}, { 139} }, // type_qualifier           
    { {       330}, {  90} }, // conditional_expression   
    { {       316}, {  91} }, // unary_expression         
    { {       294}, {  13} }, // VOID                     
    { {       284}, {  14} }, // CHAR                     
    { {       285}, {  15} }, // SHORT                    
    { {       286}, {  16} }, // INT                      
    { {       287}, {  17} }, // LONG                     
    { {       290}, {  18} }, // FLOAT                    
    { {       291}, {  19} }, // DOUBLE                   
    { {       288}, {  20} }, // SIGNED                   
    { {       289}, {  21} }, // UNSIGNED                 
    { {       342}, {  22} }, // struct_or_union_specifier
    { {       343}, {  23} }, // enum_specifier           
    { {       282}, {  24} }, // TYPE_NAME                
    { {       292}, {  25} }, // CONST                    
    { {       293}, {  26} }, // VOLATILE                 
    { {       329}, {  92} }, // logical_or_expression    
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       344}, {  30} }, // struct_or_union          
    { {       297}, {  31} }, // ENUM                     
    { {       328}, {  98} }, // logical_and_expression   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       295}, {  32} }, // STRUCT                   
    { {       296}, {  33} }, // UNION                    
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {        40}, { 109} }, // '('                      
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_194[] =
{
    { { REQ_TOKEN}, {  27} },                             
    { {       327}, { 262} }, // inclusive_or_expression  
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {       316}, { 122} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_195[] =
{
    { { REQ_TOKEN}, {  26} },                             
    { {       326}, { 263} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {       316}, { 122} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_196[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 264} }, // ')'
    { {        44}, { 157} }, // ','
    { {         0}, {   0} },       
};

SR__ s_197[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 265} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_198[] =
{
    { { REQ_DEF}, {    7} },                              
    { {     359}, {  266} }, // abstract_declarator       
    { {     352}, {  267} }, // pointer                   
    { {     360}, {  222} }, // direct_abstract_declarator
    { {      42}, {   27} }, // '*'                       
    { {      40}, {  268} }, // '('                       
    { {      91}, {  224} }, // '['                       
    { {       0}, { -150} },                              
};

SR__ s_199[] =
{
    { { REQ_TOKEN}, {  25} },                             
    { {       325}, { 269} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {       316}, { 122} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_200[] =
{
    { { REQ_TOKEN}, {  24} },                             
    { {       324}, { 270} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {       316}, { 122} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_201[] =
{
    { { REQ_TOKEN}, {  23} },                             
    { {       323}, { 271} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {       316}, { 122} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_202[] =
{
    { { REQ_TOKEN}, {  23} },                             
    { {       323}, { 272} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {       316}, { 122} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_203[] =
{
    { { REQ_TOKEN}, {  22} },                             
    { {       322}, { 273} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {       316}, { 122} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_204[] =
{
    { { REQ_TOKEN}, {  22} },                             
    { {       322}, { 274} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {       316}, { 122} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_205[] =
{
    { { REQ_TOKEN}, {  22} },                             
    { {       322}, { 275} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {       316}, { 122} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_206[] =
{
    { { REQ_TOKEN}, {  22} },                             
    { {       322}, { 276} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {       316}, { 122} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_207[] =
{
    { { REQ_TOKEN}, {  21} },                             
    { {       321}, { 277} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {       316}, { 122} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_208[] =
{
    { { REQ_TOKEN}, {  21} },                             
    { {       321}, { 278} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {       316}, { 122} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_209[] =
{
    { { REQ_TOKEN}, {  20} },                             
    { {       320}, { 279} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {       316}, { 122} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_210[] =
{
    { { REQ_TOKEN}, {  20} },                             
    { {       320}, { 280} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {       316}, { 122} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_211[] =
{
    { { REQ_TOKEN}, {  19} },                      
    { {       318}, { 281} }, // cast_expression   
    { {       316}, { 122} }, // unary_expression  
    { {        40}, { 109} }, // '('               
    { {       313}, {  93} }, // postfix_expression
    { {       262}, {  94} }, // INC_OP            
    { {       263}, {  95} }, // DEC_OP            
    { {       317}, {  96} }, // unary_operator    
    { {       260}, {  97} }, // SIZEOF            
    { {       311}, {  99} }, // primary_expression
    { {        38}, { 100} }, // '&'               
    { {        42}, { 101} }, // '*'               
    { {        43}, { 102} }, // '+'               
    { {        45}, { 103} }, // '-'               
    { {       126}, { 104} }, // '~'               
    { {        33}, { 105} }, // '!'               
    { {       257}, { 123} }, // IDENTIFIER        
    { {       258}, { 107} }, // CONSTANT          
    { {       259}, { 108} }, // STRING_LITERAL    
    { {         0}, {   0} },                      
};

SR__ s_212[] =
{
    { { REQ_TOKEN}, {  19} },                      
    { {       318}, { 282} }, // cast_expression   
    { {       316}, { 122} }, // unary_expression  
    { {        40}, { 109} }, // '('               
    { {       313}, {  93} }, // postfix_expression
    { {       262}, {  94} }, // INC_OP            
    { {       263}, {  95} }, // DEC_OP            
    { {       317}, {  96} }, // unary_operator    
    { {       260}, {  97} }, // SIZEOF            
    { {       311}, {  99} }, // primary_expression
    { {        38}, { 100} }, // '&'               
    { {        42}, { 101} }, // '*'               
    { {        43}, { 102} }, // '+'               
    { {        45}, { 103} }, // '-'               
    { {       126}, { 104} }, // '~'               
    { {        33}, { 105} }, // '!'               
    { {       257}, { 123} }, // IDENTIFIER        
    { {       258}, { 107} }, // CONSTANT          
    { {       259}, { 108} }, // STRING_LITERAL    
    { {         0}, {   0} },                      
};

SR__ s_213[] =
{
    { { REQ_TOKEN}, {  19} },                      
    { {       318}, { 283} }, // cast_expression   
    { {       316}, { 122} }, // unary_expression  
    { {        40}, { 109} }, // '('               
    { {       313}, {  93} }, // postfix_expression
    { {       262}, {  94} }, // INC_OP            
    { {       263}, {  95} }, // DEC_OP            
    { {       317}, {  96} }, // unary_operator    
    { {       260}, {  97} }, // SIZEOF            
    { {       311}, {  99} }, // primary_expression
    { {        38}, { 100} }, // '&'               
    { {        42}, { 101} }, // '*'               
    { {        43}, { 102} }, // '+'               
    { {        45}, { 103} }, // '-'               
    { {       126}, { 104} }, // '~'               
    { {        33}, { 105} }, // '!'               
    { {       257}, { 123} }, // IDENTIFIER        
    { {       258}, { 107} }, // CONSTANT          
    { {       259}, { 108} }, // STRING_LITERAL    
    { {         0}, {   0} },                      
};

SR__ s_214[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -130} }, 
};

SR__ s_215[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -132} }, 
};

SR__ s_216[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -133} }, 
};

SR__ s_217[] =
{
    { { REQ_TOKEN}, {   2} },              
    { {       257}, { 284} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_218[] =
{
    { { REQ_TOKEN}, {  26} },                             
    { {       298}, { 285} }, // ELLIPSIS                 
    { {       358}, { 286} }, // parameter_declaration    
    { {       334}, { 130} }, // declaration_specifiers   
    { {       336}, {   7} }, // storage_class_specifier  
    { {       337}, {   8} }, // type_specifier           
    { {       338}, {   9} }, // type_qualifier           
    { {       283}, {  12} }, // TYPEDEF                  
    { {       294}, {  13} }, // VOID                     
    { {       284}, {  14} }, // CHAR                     
    { {       285}, {  15} }, // SHORT                    
    { {       286}, {  16} }, // INT                      
    { {       287}, {  17} }, // LONG                     
    { {       290}, {  18} }, // FLOAT                    
    { {       291}, {  19} }, // DOUBLE                   
    { {       288}, {  20} }, // SIGNED                   
    { {       289}, {  21} }, // UNSIGNED                 
    { {       342}, {  22} }, // struct_or_union_specifier
    { {       343}, {  23} }, // enum_specifier           
    { {       282}, {  24} }, // TYPE_NAME                
    { {       292}, {  25} }, // CONST                    
    { {       293}, {  26} }, // VOLATILE                 
    { {       344}, {  30} }, // struct_or_union          
    { {       297}, {  31} }, // ENUM                     
    { {       295}, {  32} }, // STRUCT                   
    { {       296}, {  33} }, // UNION                    
    { {         0}, {   0} },                             
};

SR__ s_219[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -145} }, 
};

SR__ s_220[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -146} }, 
};

SR__ s_221[] =
{
    { { REQ_DEF}, {    6} },                              
    { {     353}, {   47} }, // direct_declarator         
    { {     360}, {  287} }, // direct_abstract_declarator
    { {     257}, {   28} }, // IDENTIFIER                
    { {      40}, {  223} }, // '('                       
    { {      91}, {  224} }, // '['                       
    { {       0}, { -152} },                              
};

SR__ s_222[] =
{
    { { REQ_DEF}, {    3} },       
    { {      91}, {  288} }, // '['
    { {      40}, {  289} }, // '('
    { {       0}, { -153} },       
};

SR__ s_223[] =
{
    { { REQ_TOKEN}, {  37} },                              
    { {       340}, {  53} }, // declarator                
    { {       359}, { 290} }, // abstract_declarator       
    { {        41}, { 291} }, // ')'                       
    { {       354}, { 292} }, // parameter_type_list       
    { {       352}, { 221} }, // pointer                   
    { {       353}, {  11} }, // direct_declarator         
    { {       360}, { 222} }, // direct_abstract_declarator
    { {       357}, { 127} }, // parameter_list            
    { {        42}, {  27} }, // '*'                       
    { {       257}, {  28} }, // IDENTIFIER                
    { {        40}, { 223} }, // '('                       
    { {        91}, { 224} }, // '['                       
    { {       358}, { 129} }, // parameter_declaration     
    { {       334}, { 130} }, // declaration_specifiers    
    { {       336}, {   7} }, // storage_class_specifier   
    { {       337}, {   8} }, // type_specifier            
    { {       338}, {   9} }, // type_qualifier            
    { {       283}, {  12} }, // TYPEDEF                   
    { {       294}, {  13} }, // VOID                      
    { {       284}, {  14} }, // CHAR                      
    { {       285}, {  15} }, // SHORT                     
    { {       286}, {  16} }, // INT                       
    { {       287}, {  17} }, // LONG                      
    { {       290}, {  18} }, // FLOAT                     
    { {       291}, {  19} }, // DOUBLE                    
    { {       288}, {  20} }, // SIGNED                    
    { {       289}, {  21} }, // UNSIGNED                  
    { {       342}, {  22} }, // struct_or_union_specifier 
    { {       343}, {  23} }, // enum_specifier            
    { {       282}, {  24} }, // TYPE_NAME                 
    { {       292}, {  25} }, // CONST                     
    { {       293}, {  26} }, // VOLATILE                  
    { {       344}, {  30} }, // struct_or_union           
    { {       297}, {  31} }, // ENUM                      
    { {       295}, {  32} }, // STRUCT                    
    { {       296}, {  33} }, // UNION                     
    { {         0}, {   0} },                              
};

SR__ s_224[] =
{
    { { REQ_TOKEN}, {  32} },                             
    { {        93}, { 293} }, // ']'                      
    { {       332}, { 294} }, // constant_expression      
    { {       330}, { 121} }, // conditional_expression   
    { {       329}, {  92} }, // logical_or_expression    
    { {       328}, {  98} }, // logical_and_expression   
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {       316}, { 122} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_225[] =
{
    { { REQ_TOKEN}, {  24} },                             
    { {       125}, { 295} }, // '}'                      
    { {       346}, { 227} }, // struct_declaration       
    { {       347}, { 137} }, // specifier_qualifier_list 
    { {       337}, { 138} }, // type_specifier           
    { {       338}, { 139} }, // type_qualifier           
    { {       294}, {  13} }, // VOID                     
    { {       284}, {  14} }, // CHAR                     
    { {       285}, {  15} }, // SHORT                    
    { {       286}, {  16} }, // INT                      
    { {       287}, {  17} }, // LONG                     
    { {       290}, {  18} }, // FLOAT                    
    { {       291}, {  19} }, // DOUBLE                   
    { {       288}, {  20} }, // SIGNED                   
    { {       289}, {  21} }, // UNSIGNED                 
    { {       342}, {  22} }, // struct_or_union_specifier
    { {       343}, {  23} }, // enum_specifier           
    { {       282}, {  24} }, // TYPE_NAME                
    { {       292}, {  25} }, // CONST                    
    { {       293}, {  26} }, // VOLATILE                 
    { {       344}, {  30} }, // struct_or_union          
    { {       297}, {  31} }, // ENUM                     
    { {       295}, {  32} }, // STRUCT                   
    { {       296}, {  33} }, // UNION                    
    { {         0}, {   0} },                             
};

SR__ s_226[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -101} }, 
};

SR__ s_227[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -106} }, 
};

SR__ s_228[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        59}, { 296} }, // ';'
    { {        44}, { 297} }, // ','
    { {         0}, {   0} },       
};

SR__ s_229[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -112} }, 
};

SR__ s_230[] =
{
    { { REQ_DEF}, {    2} },       
    { {      58}, {  298} }, // ':'
    { {       0}, { -114} },       
};

SR__ s_231[] =
{
    { { REQ_TOKEN}, {  31} },                             
    { {       332}, { 299} }, // constant_expression      
    { {       330}, { 121} }, // conditional_expression   
    { {       329}, {  92} }, // logical_or_expression    
    { {       328}, {  98} }, // logical_and_expression   
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {       316}, { 122} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_232[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -108} }, 
};

SR__ s_233[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -110} }, 
};

SR__ s_234[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -117} }, 
};

SR__ s_235[] =
{
    { { REQ_TOKEN}, {   3} },              
    { {       351}, { 300} }, // enumerator
    { {       257}, { 142} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_236[] =
{
    { { REQ_TOKEN}, {  31} },                             
    { {       332}, { 301} }, // constant_expression      
    { {       330}, { 121} }, // conditional_expression   
    { {       329}, {  92} }, // logical_or_expression    
    { {       328}, {  98} }, // logical_and_expression   
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {       316}, { 122} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_237[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {       125}, { 302} }, // '}'
    { {        44}, { 235} }, // ','
    { {         0}, {   0} },       
};

SR__ s_238[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {       125}, { 303} }, // '}'
    { {        44}, { 304} }, // ','
    { {         0}, {   0} },       
};

SR__ s_239[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -167} }, 
};

SR__ s_240[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -181} }, 
};

SR__ s_241[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -175} }, 
};

SR__ s_242[] =
{
    { { REQ_TOKEN}, {  52} },                             
    { {       362}, { 305} }, // statement                
    { {       363}, {  69} }, // labeled_statement        
    { {       364}, {  70} }, // compound_statement       
    { {       365}, {  71} }, // expression_statement     
    { {       366}, {  72} }, // selection_statement      
    { {       367}, {  73} }, // iteration_statement      
    { {       368}, {  74} }, // jump_statement           
    { {       257}, {  75} }, // IDENTIFIER               
    { {       299}, {  76} }, // CASE                     
    { {       300}, {  77} }, // DEFAULT                  
    { {       123}, {  42} }, // '{'                      
    { {        59}, {  78} }, // ';'                      
    { {       312}, {  79} }, // expression               
    { {       301}, {  80} }, // IF                       
    { {       302}, {  81} }, // SWITCH                   
    { {       303}, {  82} }, // WHILE                    
    { {       304}, {  83} }, // DO                       
    { {       305}, {  84} }, // FOR                      
    { {       306}, {  85} }, // GOTO                     
    { {       307}, {  86} }, // CONTINUE                 
    { {       308}, {  87} }, // BREAK                    
    { {       309}, {  88} }, // RETURN                   
    { {       315}, {  89} }, // assignment_expression    
    { {       330}, {  90} }, // conditional_expression   
    { {       316}, {  91} }, // unary_expression         
    { {       329}, {  92} }, // logical_or_expression    
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       328}, {  98} }, // logical_and_expression   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {        40}, { 109} }, // '('                      
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_243[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -177} }, 
};

SR__ s_244[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -73} }, 
};

SR__ s_245[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 306} }, // ')'
    { {        44}, { 157} }, // ','
    { {         0}, {   0} },       
};

SR__ s_246[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 307} }, // ')'
    { {        44}, { 157} }, // ','
    { {         0}, {   0} },       
};

SR__ s_247[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 308} }, // ')'
    { {        44}, { 157} }, // ','
    { {         0}, {   0} },       
};

SR__ s_248[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 309} }, // '('
    { {         0}, {   0} },       
};

SR__ s_249[] =
{
    { { REQ_TOKEN}, {  34} },                             
    { {       365}, { 310} }, // expression_statement     
    { {        59}, {  78} }, // ';'                      
    { {       312}, {  79} }, // expression               
    { {       315}, {  89} }, // assignment_expression    
    { {       330}, {  90} }, // conditional_expression   
    { {       316}, {  91} }, // unary_expression         
    { {       329}, {  92} }, // logical_or_expression    
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       328}, {  98} }, // logical_and_expression   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {        40}, { 109} }, // '('                      
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_250[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -195} }, 
};

SR__ s_251[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -199} }, 
};

SR__ s_252[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -60} }, 
};

SR__ s_253[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        58}, { 311} }, // ':'
    { {        44}, { 157} }, // ','
    { {         0}, {   0} },       
};

SR__ s_254[] =
{
    { { REQ_DEF}, {   2} },          
    { {     270}, { 194} }, // AND_OP
    { {       0}, { -56} },          
};

SR__ s_255[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        93}, { 312} }, // ']'
    { {        44}, { 157} }, // ','
    { {         0}, {   0} },       
};

SR__ s_256[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -7} }, 
};

SR__ s_257[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 313} }, // ')'
    { {        44}, { 314} }, // ','
    { {         0}, {   0} },       
};

SR__ s_258[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR__ s_259[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -9} }, 
};

SR__ s_260[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -10} }, 
};

SR__ s_261[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 315} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_262[] =
{
    { { REQ_DEF}, {   2} },       
    { {     124}, { 195} }, // '|'
    { {       0}, { -54} },       
};

SR__ s_263[] =
{
    { { REQ_DEF}, {   2} },       
    { {      94}, { 199} }, // '^'
    { {       0}, { -52} },       
};

SR__ s_264[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -4} }, 
};

SR__ s_265[] =
{
    { { REQ_TOKEN}, {  19} },                      
    { {       318}, { 316} }, // cast_expression   
    { {       316}, { 122} }, // unary_expression  
    { {        40}, { 109} }, // '('               
    { {       313}, {  93} }, // postfix_expression
    { {       262}, {  94} }, // INC_OP            
    { {       263}, {  95} }, // DEC_OP            
    { {       317}, {  96} }, // unary_operator    
    { {       260}, {  97} }, // SIZEOF            
    { {       311}, {  99} }, // primary_expression
    { {        38}, { 100} }, // '&'               
    { {        42}, { 101} }, // '*'               
    { {        43}, { 102} }, // '+'               
    { {        45}, { 103} }, // '-'               
    { {       126}, { 104} }, // '~'               
    { {        33}, { 105} }, // '!'               
    { {       257}, { 123} }, // IDENTIFIER        
    { {       258}, { 107} }, // CONSTANT          
    { {       259}, { 108} }, // STRING_LITERAL    
    { {         0}, {   0} },                      
};

SR__ s_266[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -151} }, 
};

SR__ s_267[] =
{
    { { REQ_DEF}, {    4} },                              
    { {     360}, {  287} }, // direct_abstract_declarator
    { {      40}, {  268} }, // '('                       
    { {      91}, {  224} }, // '['                       
    { {       0}, { -152} },                              
};

SR__ s_268[] =
{
    { { REQ_TOKEN}, {  34} },                              
    { {       359}, { 290} }, // abstract_declarator       
    { {        41}, { 291} }, // ')'                       
    { {       354}, { 292} }, // parameter_type_list       
    { {       352}, { 267} }, // pointer                   
    { {       360}, { 222} }, // direct_abstract_declarator
    { {       357}, { 127} }, // parameter_list            
    { {        42}, {  27} }, // '*'                       
    { {        40}, { 268} }, // '('                       
    { {        91}, { 224} }, // '['                       
    { {       358}, { 129} }, // parameter_declaration     
    { {       334}, { 130} }, // declaration_specifiers    
    { {       336}, {   7} }, // storage_class_specifier   
    { {       337}, {   8} }, // type_specifier            
    { {       338}, {   9} }, // type_qualifier            
    { {       283}, {  12} }, // TYPEDEF                   
    { {       294}, {  13} }, // VOID                      
    { {       284}, {  14} }, // CHAR                      
    { {       285}, {  15} }, // SHORT                     
    { {       286}, {  16} }, // INT                       
    { {       287}, {  17} }, // LONG                      
    { {       290}, {  18} }, // FLOAT                     
    { {       291}, {  19} }, // DOUBLE                    
    { {       288}, {  20} }, // SIGNED                    
    { {       289}, {  21} }, // UNSIGNED                  
    { {       342}, {  22} }, // struct_or_union_specifier 
    { {       343}, {  23} }, // enum_specifier            
    { {       282}, {  24} }, // TYPE_NAME                 
    { {       292}, {  25} }, // CONST                     
    { {       293}, {  26} }, // VOLATILE                  
    { {       344}, {  30} }, // struct_or_union           
    { {       297}, {  31} }, // ENUM                      
    { {       295}, {  32} }, // STRUCT                    
    { {       296}, {  33} }, // UNION                     
    { {         0}, {   0} },                              
};

SR__ s_269[] =
{
    { { REQ_DEF}, {   2} },       
    { {      38}, { 200} }, // '&'
    { {       0}, { -50} },       
};

SR__ s_270[] =
{
    { { REQ_DEF}, {   3} },         
    { {     268}, { 201} }, // EQ_OP
    { {     269}, { 202} }, // NE_OP
    { {       0}, { -48} },         
};

SR__ s_271[] =
{
    { { REQ_DEF}, {   5} },         
    { {      60}, { 203} }, // '<'  
    { {      62}, { 204} }, // '>'  
    { {     266}, { 205} }, // LE_OP
    { {     267}, { 206} }, // GE_OP
    { {       0}, { -45} },         
};

SR__ s_272[] =
{
    { { REQ_DEF}, {   5} },         
    { {      60}, { 203} }, // '<'  
    { {      62}, { 204} }, // '>'  
    { {     266}, { 205} }, // LE_OP
    { {     267}, { 206} }, // GE_OP
    { {       0}, { -46} },         
};

SR__ s_273[] =
{
    { { REQ_DEF}, {   3} },            
    { {     264}, { 207} }, // LEFT_OP 
    { {     265}, { 208} }, // RIGHT_OP
    { {       0}, { -40} },            
};

SR__ s_274[] =
{
    { { REQ_DEF}, {   3} },            
    { {     264}, { 207} }, // LEFT_OP 
    { {     265}, { 208} }, // RIGHT_OP
    { {       0}, { -41} },            
};

SR__ s_275[] =
{
    { { REQ_DEF}, {   3} },            
    { {     264}, { 207} }, // LEFT_OP 
    { {     265}, { 208} }, // RIGHT_OP
    { {       0}, { -42} },            
};

SR__ s_276[] =
{
    { { REQ_DEF}, {   3} },            
    { {     264}, { 207} }, // LEFT_OP 
    { {     265}, { 208} }, // RIGHT_OP
    { {       0}, { -43} },            
};

SR__ s_277[] =
{
    { { REQ_DEF}, {   3} },       
    { {      43}, { 209} }, // '+'
    { {      45}, { 210} }, // '-'
    { {       0}, { -37} },       
};

SR__ s_278[] =
{
    { { REQ_DEF}, {   3} },       
    { {      43}, { 209} }, // '+'
    { {      45}, { 210} }, // '-'
    { {       0}, { -38} },       
};

SR__ s_279[] =
{
    { { REQ_DEF}, {   4} },       
    { {      42}, { 211} }, // '*'
    { {      47}, { 212} }, // '/'
    { {      37}, { 213} }, // '%'
    { {       0}, { -34} },       
};

SR__ s_280[] =
{
    { { REQ_DEF}, {   4} },       
    { {      42}, { 211} }, // '*'
    { {      47}, { 212} }, // '/'
    { {      37}, { 213} }, // '%'
    { {       0}, { -35} },       
};

SR__ s_281[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -30} }, 
};

SR__ s_282[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -31} }, 
};

SR__ s_283[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -32} }, 
};

SR__ s_284[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -149} }, 
};

SR__ s_285[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -142} }, 
};

SR__ s_286[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -144} }, 
};

SR__ s_287[] =
{
    { { REQ_DEF}, {    3} },       
    { {      91}, {  288} }, // '['
    { {      40}, {  289} }, // '('
    { {       0}, { -154} },       
};

SR__ s_288[] =
{
    { { REQ_TOKEN}, {  32} },                             
    { {        93}, { 317} }, // ']'                      
    { {       332}, { 318} }, // constant_expression      
    { {       330}, { 121} }, // conditional_expression   
    { {       329}, {  92} }, // logical_or_expression    
    { {       328}, {  98} }, // logical_and_expression   
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {       316}, { 122} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_289[] =
{
    { { REQ_TOKEN}, {  28} },                             
    { {        41}, { 319} }, // ')'                      
    { {       354}, { 320} }, // parameter_type_list      
    { {       357}, { 127} }, // parameter_list           
    { {       358}, { 129} }, // parameter_declaration    
    { {       334}, { 130} }, // declaration_specifiers   
    { {       336}, {   7} }, // storage_class_specifier  
    { {       337}, {   8} }, // type_specifier           
    { {       338}, {   9} }, // type_qualifier           
    { {       283}, {  12} }, // TYPEDEF                  
    { {       294}, {  13} }, // VOID                     
    { {       284}, {  14} }, // CHAR                     
    { {       285}, {  15} }, // SHORT                    
    { {       286}, {  16} }, // INT                      
    { {       287}, {  17} }, // LONG                     
    { {       290}, {  18} }, // FLOAT                    
    { {       291}, {  19} }, // DOUBLE                   
    { {       288}, {  20} }, // SIGNED                   
    { {       289}, {  21} }, // UNSIGNED                 
    { {       342}, {  22} }, // struct_or_union_specifier
    { {       343}, {  23} }, // enum_specifier           
    { {       282}, {  24} }, // TYPE_NAME                
    { {       292}, {  25} }, // CONST                    
    { {       293}, {  26} }, // VOLATILE                 
    { {       344}, {  30} }, // struct_or_union          
    { {       297}, {  31} }, // ENUM                     
    { {       295}, {  32} }, // STRUCT                   
    { {       296}, {  33} }, // UNION                    
    { {         0}, {   0} },                             
};

SR__ s_290[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 321} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_291[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -160} }, 
};

SR__ s_292[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 322} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_293[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -156} }, 
};

SR__ s_294[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        93}, { 323} }, // ']'
    { {         0}, {   0} },       
};

SR__ s_295[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -100} }, 
};

SR__ s_296[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -107} }, 
};

SR__ s_297[] =
{
    { { REQ_TOKEN}, {   9} },                     
    { {       349}, { 324} }, // struct_declarator
    { {       340}, { 230} }, // declarator       
    { {        58}, { 231} }, // ':'              
    { {       352}, {  10} }, // pointer          
    { {       353}, {  11} }, // direct_declarator
    { {        42}, {  27} }, // '*'              
    { {       257}, {  28} }, // IDENTIFIER       
    { {        40}, {  29} }, // '('              
    { {         0}, {   0} },                     
};

SR__ s_298[] =
{
    { { REQ_TOKEN}, {  31} },                             
    { {       332}, { 325} }, // constant_expression      
    { {       330}, { 121} }, // conditional_expression   
    { {       329}, {  92} }, // logical_or_expression    
    { {       328}, {  98} }, // logical_and_expression   
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {       316}, { 122} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_299[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -115} }, 
};

SR__ s_300[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -121} }, 
};

SR__ s_301[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -123} }, 
};

SR__ s_302[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -118} }, 
};

SR__ s_303[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -165} }, 
};

SR__ s_304[] =
{
    { { REQ_TOKEN}, {  34} },                             
    { {       125}, { 326} }, // '}'                      
    { {       341}, { 327} }, // initializer              
    { {       315}, { 146} }, // assignment_expression    
    { {       123}, { 147} }, // '{'                      
    { {       330}, {  90} }, // conditional_expression   
    { {       316}, {  91} }, // unary_expression         
    { {       329}, {  92} }, // logical_or_expression    
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       328}, {  98} }, // logical_and_expression   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {        40}, { 109} }, // '('                      
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_305[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -176} }, 
};

SR__ s_306[] =
{
    { { REQ_TOKEN}, {  52} },                             
    { {       362}, { 328} }, // statement                
    { {       363}, {  69} }, // labeled_statement        
    { {       364}, {  70} }, // compound_statement       
    { {       365}, {  71} }, // expression_statement     
    { {       366}, {  72} }, // selection_statement      
    { {       367}, {  73} }, // iteration_statement      
    { {       368}, {  74} }, // jump_statement           
    { {       257}, {  75} }, // IDENTIFIER               
    { {       299}, {  76} }, // CASE                     
    { {       300}, {  77} }, // DEFAULT                  
    { {       123}, {  42} }, // '{'                      
    { {        59}, {  78} }, // ';'                      
    { {       312}, {  79} }, // expression               
    { {       301}, {  80} }, // IF                       
    { {       302}, {  81} }, // SWITCH                   
    { {       303}, {  82} }, // WHILE                    
    { {       304}, {  83} }, // DO                       
    { {       305}, {  84} }, // FOR                      
    { {       306}, {  85} }, // GOTO                     
    { {       307}, {  86} }, // CONTINUE                 
    { {       308}, {  87} }, // BREAK                    
    { {       309}, {  88} }, // RETURN                   
    { {       315}, {  89} }, // assignment_expression    
    { {       330}, {  90} }, // conditional_expression   
    { {       316}, {  91} }, // unary_expression         
    { {       329}, {  92} }, // logical_or_expression    
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       328}, {  98} }, // logical_and_expression   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {        40}, { 109} }, // '('                      
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_307[] =
{
    { { REQ_TOKEN}, {  52} },                             
    { {       362}, { 329} }, // statement                
    { {       363}, {  69} }, // labeled_statement        
    { {       364}, {  70} }, // compound_statement       
    { {       365}, {  71} }, // expression_statement     
    { {       366}, {  72} }, // selection_statement      
    { {       367}, {  73} }, // iteration_statement      
    { {       368}, {  74} }, // jump_statement           
    { {       257}, {  75} }, // IDENTIFIER               
    { {       299}, {  76} }, // CASE                     
    { {       300}, {  77} }, // DEFAULT                  
    { {       123}, {  42} }, // '{'                      
    { {        59}, {  78} }, // ';'                      
    { {       312}, {  79} }, // expression               
    { {       301}, {  80} }, // IF                       
    { {       302}, {  81} }, // SWITCH                   
    { {       303}, {  82} }, // WHILE                    
    { {       304}, {  83} }, // DO                       
    { {       305}, {  84} }, // FOR                      
    { {       306}, {  85} }, // GOTO                     
    { {       307}, {  86} }, // CONTINUE                 
    { {       308}, {  87} }, // BREAK                    
    { {       309}, {  88} }, // RETURN                   
    { {       315}, {  89} }, // assignment_expression    
    { {       330}, {  90} }, // conditional_expression   
    { {       316}, {  91} }, // unary_expression         
    { {       329}, {  92} }, // logical_or_expression    
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       328}, {  98} }, // logical_and_expression   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {        40}, { 109} }, // '('                      
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_308[] =
{
    { { REQ_TOKEN}, {  52} },                             
    { {       362}, { 330} }, // statement                
    { {       363}, {  69} }, // labeled_statement        
    { {       364}, {  70} }, // compound_statement       
    { {       365}, {  71} }, // expression_statement     
    { {       366}, {  72} }, // selection_statement      
    { {       367}, {  73} }, // iteration_statement      
    { {       368}, {  74} }, // jump_statement           
    { {       257}, {  75} }, // IDENTIFIER               
    { {       299}, {  76} }, // CASE                     
    { {       300}, {  77} }, // DEFAULT                  
    { {       123}, {  42} }, // '{'                      
    { {        59}, {  78} }, // ';'                      
    { {       312}, {  79} }, // expression               
    { {       301}, {  80} }, // IF                       
    { {       302}, {  81} }, // SWITCH                   
    { {       303}, {  82} }, // WHILE                    
    { {       304}, {  83} }, // DO                       
    { {       305}, {  84} }, // FOR                      
    { {       306}, {  85} }, // GOTO                     
    { {       307}, {  86} }, // CONTINUE                 
    { {       308}, {  87} }, // BREAK                    
    { {       309}, {  88} }, // RETURN                   
    { {       315}, {  89} }, // assignment_expression    
    { {       330}, {  90} }, // conditional_expression   
    { {       316}, {  91} }, // unary_expression         
    { {       329}, {  92} }, // logical_or_expression    
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       328}, {  98} }, // logical_and_expression   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {        40}, { 109} }, // '('                      
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_309[] =
{
    { { REQ_TOKEN}, {  32} },                             
    { {       312}, { 331} }, // expression               
    { {       315}, {  89} }, // assignment_expression    
    { {       330}, {  90} }, // conditional_expression   
    { {       316}, {  91} }, // unary_expression         
    { {       329}, {  92} }, // logical_or_expression    
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       328}, {  98} }, // logical_and_expression   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {        40}, { 109} }, // '('                      
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_310[] =
{
    { { REQ_TOKEN}, {  33} },                             
    { {        41}, { 332} }, // ')'                      
    { {       312}, { 333} }, // expression               
    { {       315}, {  89} }, // assignment_expression    
    { {       330}, {  90} }, // conditional_expression   
    { {       316}, {  91} }, // unary_expression         
    { {       329}, {  92} }, // logical_or_expression    
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       328}, {  98} }, // logical_and_expression   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {        40}, { 109} }, // '('                      
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_311[] =
{
    { { REQ_TOKEN}, {  30} },                             
    { {       330}, { 334} }, // conditional_expression   
    { {       329}, {  92} }, // logical_or_expression    
    { {       328}, {  98} }, // logical_and_expression   
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {       316}, { 122} }, // unary_expression         
    { {        40}, { 109} }, // '('                      
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {         0}, {   0} },                             
};

SR__ s_312[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -6} }, 
};

SR__ s_313[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -8} }, 
};

SR__ s_314[] =
{
    { { REQ_TOKEN}, {  31} },                             
    { {       315}, { 335} }, // assignment_expression    
    { {       330}, {  90} }, // conditional_expression   
    { {       316}, {  91} }, // unary_expression         
    { {       329}, {  92} }, // logical_or_expression    
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       328}, {  98} }, // logical_and_expression   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       257}, { 123} }, // IDENTIFIER               
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {        40}, { 109} }, // '('                      
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_315[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -20} }, 
};

SR__ s_316[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -28} }, 
};

SR__ s_317[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -158} }, 
};

SR__ s_318[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        93}, { 336} }, // ']'
    { {         0}, {   0} },       
};

SR__ s_319[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -162} }, 
};

SR__ s_320[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 337} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_321[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -155} }, 
};

SR__ s_322[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -161} }, 
};

SR__ s_323[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -157} }, 
};

SR__ s_324[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -113} }, 
};

SR__ s_325[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -116} }, 
};

SR__ s_326[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -166} }, 
};

SR__ s_327[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -168} }, 
};

SR__ s_328[] =
{
    { { REQ_DEF}, {    2} },        
    { {     310}, {  338} }, // ELSE
    { {       0}, { -188} },        
};

SR__ s_329[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -190} }, 
};

SR__ s_330[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -191} }, 
};

SR__ s_331[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 339} }, // ')'
    { {        44}, { 157} }, // ','
    { {         0}, {   0} },       
};

SR__ s_332[] =
{
    { { REQ_TOKEN}, {  52} },                             
    { {       362}, { 340} }, // statement                
    { {       363}, {  69} }, // labeled_statement        
    { {       364}, {  70} }, // compound_statement       
    { {       365}, {  71} }, // expression_statement     
    { {       366}, {  72} }, // selection_statement      
    { {       367}, {  73} }, // iteration_statement      
    { {       368}, {  74} }, // jump_statement           
    { {       257}, {  75} }, // IDENTIFIER               
    { {       299}, {  76} }, // CASE                     
    { {       300}, {  77} }, // DEFAULT                  
    { {       123}, {  42} }, // '{'                      
    { {        59}, {  78} }, // ';'                      
    { {       312}, {  79} }, // expression               
    { {       301}, {  80} }, // IF                       
    { {       302}, {  81} }, // SWITCH                   
    { {       303}, {  82} }, // WHILE                    
    { {       304}, {  83} }, // DO                       
    { {       305}, {  84} }, // FOR                      
    { {       306}, {  85} }, // GOTO                     
    { {       307}, {  86} }, // CONTINUE                 
    { {       308}, {  87} }, // BREAK                    
    { {       309}, {  88} }, // RETURN                   
    { {       315}, {  89} }, // assignment_expression    
    { {       330}, {  90} }, // conditional_expression   
    { {       316}, {  91} }, // unary_expression         
    { {       329}, {  92} }, // logical_or_expression    
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       328}, {  98} }, // logical_and_expression   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {        40}, { 109} }, // '('                      
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_333[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 341} }, // ')'
    { {        44}, { 157} }, // ','
    { {         0}, {   0} },       
};

SR__ s_334[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -58} }, 
};

SR__ s_335[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR__ s_336[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -159} }, 
};

SR__ s_337[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -163} }, 
};

SR__ s_338[] =
{
    { { REQ_TOKEN}, {  52} },                             
    { {       362}, { 342} }, // statement                
    { {       363}, {  69} }, // labeled_statement        
    { {       364}, {  70} }, // compound_statement       
    { {       365}, {  71} }, // expression_statement     
    { {       366}, {  72} }, // selection_statement      
    { {       367}, {  73} }, // iteration_statement      
    { {       368}, {  74} }, // jump_statement           
    { {       257}, {  75} }, // IDENTIFIER               
    { {       299}, {  76} }, // CASE                     
    { {       300}, {  77} }, // DEFAULT                  
    { {       123}, {  42} }, // '{'                      
    { {        59}, {  78} }, // ';'                      
    { {       312}, {  79} }, // expression               
    { {       301}, {  80} }, // IF                       
    { {       302}, {  81} }, // SWITCH                   
    { {       303}, {  82} }, // WHILE                    
    { {       304}, {  83} }, // DO                       
    { {       305}, {  84} }, // FOR                      
    { {       306}, {  85} }, // GOTO                     
    { {       307}, {  86} }, // CONTINUE                 
    { {       308}, {  87} }, // BREAK                    
    { {       309}, {  88} }, // RETURN                   
    { {       315}, {  89} }, // assignment_expression    
    { {       330}, {  90} }, // conditional_expression   
    { {       316}, {  91} }, // unary_expression         
    { {       329}, {  92} }, // logical_or_expression    
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       328}, {  98} }, // logical_and_expression   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {        40}, { 109} }, // '('                      
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_339[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 343} }, // ';'
    { {         0}, {   0} },       
};

SR__ s_340[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -193} }, 
};

SR__ s_341[] =
{
    { { REQ_TOKEN}, {  52} },                             
    { {       362}, { 344} }, // statement                
    { {       363}, {  69} }, // labeled_statement        
    { {       364}, {  70} }, // compound_statement       
    { {       365}, {  71} }, // expression_statement     
    { {       366}, {  72} }, // selection_statement      
    { {       367}, {  73} }, // iteration_statement      
    { {       368}, {  74} }, // jump_statement           
    { {       257}, {  75} }, // IDENTIFIER               
    { {       299}, {  76} }, // CASE                     
    { {       300}, {  77} }, // DEFAULT                  
    { {       123}, {  42} }, // '{'                      
    { {        59}, {  78} }, // ';'                      
    { {       312}, {  79} }, // expression               
    { {       301}, {  80} }, // IF                       
    { {       302}, {  81} }, // SWITCH                   
    { {       303}, {  82} }, // WHILE                    
    { {       304}, {  83} }, // DO                       
    { {       305}, {  84} }, // FOR                      
    { {       306}, {  85} }, // GOTO                     
    { {       307}, {  86} }, // CONTINUE                 
    { {       308}, {  87} }, // BREAK                    
    { {       309}, {  88} }, // RETURN                   
    { {       315}, {  89} }, // assignment_expression    
    { {       330}, {  90} }, // conditional_expression   
    { {       316}, {  91} }, // unary_expression         
    { {       329}, {  92} }, // logical_or_expression    
    { {       313}, {  93} }, // postfix_expression       
    { {       262}, {  94} }, // INC_OP                   
    { {       263}, {  95} }, // DEC_OP                   
    { {       317}, {  96} }, // unary_operator           
    { {       260}, {  97} }, // SIZEOF                   
    { {       328}, {  98} }, // logical_and_expression   
    { {       311}, {  99} }, // primary_expression       
    { {        38}, { 100} }, // '&'                      
    { {        42}, { 101} }, // '*'                      
    { {        43}, { 102} }, // '+'                      
    { {        45}, { 103} }, // '-'                      
    { {       126}, { 104} }, // '~'                      
    { {        33}, { 105} }, // '!'                      
    { {       327}, { 106} }, // inclusive_or_expression  
    { {       258}, { 107} }, // CONSTANT                 
    { {       259}, { 108} }, // STRING_LITERAL           
    { {        40}, { 109} }, // '('                      
    { {       326}, { 110} }, // exclusive_or_expression  
    { {       325}, { 111} }, // and_expression           
    { {       324}, { 112} }, // equality_expression      
    { {       323}, { 113} }, // relational_expression    
    { {       322}, { 114} }, // shift_expression         
    { {       321}, { 115} }, // additive_expression      
    { {       320}, { 116} }, // multiplicative_expression
    { {       318}, { 117} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_342[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -189} }, 
};

SR__ s_343[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -192} }, 
};

SR__ s_344[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -194} }, 
};


// State array:
SR__ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,  s_105,  s_106,  s_107,  s_108,  s_109,
  s_110,  s_111,  s_112,  s_113,  s_114,  s_115,  s_116,  s_117,  s_118,  s_119,
  s_120,  s_121,  s_122,  s_123,  s_124,  s_125,  s_126,  s_127,  s_128,  s_129,
  s_130,  s_131,  s_132,  s_133,  s_134,  s_135,  s_136,  s_137,  s_138,  s_139,
  s_140,  s_141,  s_142,  s_143,  s_144,  s_145,  s_146,  s_147,  s_148,  s_149,
  s_150,  s_151,  s_152,  s_153,  s_154,  s_155,  s_156,  s_157,  s_158,  s_159,
  s_160,  s_161,  s_162,  s_163,  s_164,  s_165,  s_166,  s_167,  s_168,  s_169,
  s_170,  s_171,  s_172,  s_173,  s_174,  s_175,  s_176,  s_177,  s_178,  s_179,
  s_180,  s_181,  s_182,  s_183,  s_184,  s_185,  s_186,  s_187,  s_188,  s_189,
  s_190,  s_191,  s_192,  s_193,  s_194,  s_195,  s_196,  s_197,  s_198,  s_199,
  s_200,  s_201,  s_202,  s_203,  s_204,  s_205,  s_206,  s_207,  s_208,  s_209,
  s_210,  s_211,  s_212,  s_213,  s_214,  s_215,  s_216,  s_217,  s_218,  s_219,
  s_220,  s_221,  s_222,  s_223,  s_224,  s_225,  s_226,  s_227,  s_228,  s_229,
  s_230,  s_231,  s_232,  s_233,  s_234,  s_235,  s_236,  s_237,  s_238,  s_239,
  s_240,  s_241,  s_242,  s_243,  s_244,  s_245,  s_246,  s_247,  s_248,  s_249,
  s_250,  s_251,  s_252,  s_253,  s_254,  s_255,  s_256,  s_257,  s_258,  s_259,
  s_260,  s_261,  s_262,  s_263,  s_264,  s_265,  s_266,  s_267,  s_268,  s_269,
  s_270,  s_271,  s_272,  s_273,  s_274,  s_275,  s_276,  s_277,  s_278,  s_279,
  s_280,  s_281,  s_282,  s_283,  s_284,  s_285,  s_286,  s_287,  s_288,  s_289,
  s_290,  s_291,  s_292,  s_293,  s_294,  s_295,  s_296,  s_297,  s_298,  s_299,
  s_300,  s_301,  s_302,  s_303,  s_304,  s_305,  s_306,  s_307,  s_308,  s_309,
  s_310,  s_311,  s_312,  s_313,  s_314,  s_315,  s_316,  s_317,  s_318,  s_319,
  s_320,  s_321,  s_322,  s_323,  s_324,  s_325,  s_326,  s_327,  s_328,  s_329,
  s_330,  s_331,  s_332,  s_333,  s_334,  s_335,  s_336,  s_337,  s_338,  s_339,
  s_340,  s_341,  s_342,  s_343,  s_344,
};

} // anonymous namespace ends


// $insert namespace-open
namespace FreeOCL
{

// If the parsing function call uses arguments, then provide an overloaded
// function.  The code below doesn't rely on parameters, so no arguments are
// required.  Furthermore, parse uses a function try block to allow us to do
// ACCEPT and ABORT from anywhere, even from within members called by actions,
// simply throwing the appropriate exceptions.

ParserBase::ParserBase()
:
    d_stackIdx__(-1),
    // $insert debuginit
    d_debug__(false),
    d_nErrors__(0),
    // $insert requiredtokens
    d_requiredTokens__(0),
    d_acceptedTokens__(d_requiredTokens__),
    d_token__(_UNDETERMINED_),
    d_nextToken__(_UNDETERMINED_)
{}


void ParserBase::clearin()
{
    d_token__ = d_nextToken__ = _UNDETERMINED_;
}

void ParserBase::push__(size_t state)
{
    if (static_cast<size_t>(d_stackIdx__ + 1) == d_stateStack__.size())
    {
        size_t newSize = d_stackIdx__ + STACK_EXPANSION;
        d_stateStack__.resize(newSize);
        d_valueStack__.resize(newSize);
    }
    ++d_stackIdx__;
    d_stateStack__[d_stackIdx__] = d_state__ = state;
    *(d_vsp__ = &d_valueStack__[d_stackIdx__]) = d_val__;
}

void ParserBase::popToken__()
{
    d_token__ = d_nextToken__;

    d_val__ = d_nextVal__;
    d_nextVal__ = STYPE__();

    d_nextToken__ = _UNDETERMINED_;
}
     
void ParserBase::pushToken__(int token)
{
    d_nextToken__ = d_token__;
    d_nextVal__ = d_val__;
    d_token__ = token;
}
     
void ParserBase::pop__(size_t count)
{
    if (d_stackIdx__ < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx__ -= count;
    d_state__ = d_stateStack__[d_stackIdx__];
    d_vsp__ = &d_valueStack__[d_stackIdx__];
}

inline size_t ParserBase::top__() const
{
    return d_stateStack__[d_stackIdx__];
}

void Parser::executeAction(int production)
{
    if (d_token__ != _UNDETERMINED_)
        pushToken__(d_token__);     // save an already available token

                                    // save default non-nested block $$
    if (int size = s_productionInfo[production].d_size)
        d_val__ = d_vsp__[1 - size];

    switch (production)
    {
        // $insert actioncases
        
    }
}

inline void ParserBase::reduce__(PI__ const &pi)
{
    d_token__ = pi.d_nonTerm;
    pop__(pi.d_size);

}

// If d_token__ is _UNDETERMINED_ then if d_nextToken__ is _UNDETERMINED_ another
// token is obtained from lex(). Then d_nextToken__ is assigned to d_token__.
void Parser::nextToken()
{
    if (d_token__ != _UNDETERMINED_)        // no need for a token: got one
        return;                             // already

    if (d_nextToken__ != _UNDETERMINED_)
    {
        popToken__();                       // consume pending token
    }
    else
    {
        ++d_acceptedTokens__;               // accept another token (see
                                            // errorRecover())
        d_token__ = lex();
        if (d_token__ <= 0)
            d_token__ = _EOF_;
    }
    print();
}

// if the final transition is negative, then we should reduce by the rule
// given by its positive value. Note that the `recovery' parameter is only
// used with the --debug option
int Parser::lookup(bool recovery)
{
    // $insert threading
    SR__ *sr = s_state[d_state__];        // get the appropriate state-table
    int lastIdx = sr->d_lastIdx;        // sentinel-index in the SR__ array

    SR__ *lastElementPtr = sr + lastIdx;
    SR__ *elementPtr = sr + 1;            // start the search at s_xx[1]

    lastElementPtr->d_token = d_token__;// set search-token

    while (elementPtr->d_token != d_token__)
        ++elementPtr;

    if (elementPtr == lastElementPtr)   // reached the last element
    {
        if (elementPtr->d_action < 0)   // default reduction
        {
            return elementPtr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN__;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = elementPtr->d_action;


    return action;
}

    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)
void Parser::errorRecovery()
try
{
    if (d_acceptedTokens__ >= d_requiredTokens__)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors__;                          // were accepted. Otherwise
        error("Syntax error");                  // simply skip input

    }


    // get the error state
    while (not (s_state[top__()][0].d_type & ERR_ITEM))
    {
        pop__();
    }

    // In the error state, lookup a token allowing us to proceed.
    // Continuation may be possible following multiple reductions,
    // but eventuall a shift will be used, requiring the retrieval of
    // a terminal token. If a retrieved token doesn't match, the catch below 
    // will ensure the next token is requested in the while(true) block
    // implemented below:

    int lastToken = d_token__;                  // give the unexpected token a
                                                // chance to be processed
                                                // again.

    pushToken__(_error_);                       // specify _error_ as next token
    push__(lookup(true));                       // push the error state

    d_token__ = lastToken;                      // reactivate the unexpected
                                                // token (we're now in an
                                                // ERROR state).

    bool gotToken = true;                       // the next token is a terminal

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
            {
                gotToken = d_token__ == _UNDETERMINED_;
                nextToken();                    // obtain next token
            }
            
            int action = lookup(true);

            if (action > 0)                 // push a new state
            {
                push__(action);
                popToken__();

                if (gotToken)
                {

                    d_acceptedTokens__ = 0;
                    return;
                }
            }
            else if (action < 0)
            {
                // no actions executed on recovery but save an already 
                // available token:
                if (d_token__ != _UNDETERMINED_)
                    pushToken__(d_token__);
 
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else
                ABORT();                    // abort when accepting during
                                            // error recovery
        }
        catch (...)
        {
            if (d_token__ == _EOF_)
                ABORT();                    // saw inappropriate _EOF_
                      
            popToken__();                   // failing token now skipped
        }
    }
}
catch (ErrorRecovery__)       // This is: DEFAULT_RECOVERY_MODE
{
    ABORT();
}

    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and d_token__ as well as
    // d_nextToken__ are initialized to _UNDETERMINED_. 
    //
    // Then, in an eternal loop:
    //
    //  1. If a state does not have REQ_TOKEN no token is assigned to
    //     d_token__. If the state has REQ_TOKEN, nextToken() is called to
    //      determine d_nextToken__ and d_token__ is set to
    //     d_nextToken__. nextToken() will not call lex() unless d_nextToken__ is 
    //     _UNDETERMINED_. 
    //
    //  2. lookup() is called: 
    //     d_token__ is stored in the final element's d_token field of the
    //     state's SR_ array. 
    //
    //  3. The current token is looked up in the state's SR_ array
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token__ is not found, and the state has no
    //     default reduction. Error handling was described at the top of this
    //     file.

int Parser::parse()
try 
{
    push__(0);                              // initial state
    clearin();                              // clear the tokens.

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
                nextToken();                // obtain next token


            int action = lookup(false);     // lookup d_token__ in d_state__

            if (action > 0)                 // SHIFT: push a new state
            {
                push__(action);
                popToken__();               // token processed
            }
            else if (action < 0)            // REDUCE: execute and pop.
            {
                executeAction(-action);
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else 
                ACCEPT();
        }
        catch (ErrorRecovery__)
        {
            errorRecovery();
        }
    }
}
catch (Return__ retValue)
{
    return retValue;
}

// $insert namespace-close
}
