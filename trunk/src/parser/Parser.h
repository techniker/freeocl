// Generated by Bisonc++ V2.4.8 on Sun, 01 May 2011 16:10:22 +0200

#ifndef Parser_h_included
#define Parser_h_included

// $insert baseclass
#include "Parserbase.h"
#include <map>

// $insert namespace-open
namespace FreeOCL
{

#undef Parser
	class Parser: public ParserBase
	{

	public:
		Parser(std::istream &in, std::ostream &err) : in(in), err(err), line(0)	{}

		int parse();
		inline bool errors() const {	return bErrors; }
		inline const Node &getAST() const	{	return root;	}
		const std::map<std::string, Node>	&getKernels() const	{	return kernels;	}

	private:
		void error(const std::string &msg);	// called on (syntax) errors
		int lex();							// returns the next token from the
		// lexical scanner.
		void print();						// use, e.g., d_token, d_loc

		// support functions for parse():
		void executeAction(int ruleNr);
		void errorRecovery();
		int lookup(bool recovery);
		void nextToken();

		// support functions for lex()
		int get();
		std::istream &get(char &c);
		void putback(char c);
		int peek();

	private:
		std::istream &in;			// Input stream
		std::ostream &err;			// Error output stream
		size_t line;
		std::string current_line;
		std::string current_file;
		bool bErrors;
		Node root;

		std::map<std::string, Node>	kernels;
	};

	// $insert lex

	inline void Parser::print()	  // use d_token, d_loc
	{}

	// $insert namespace-close
}

#endif
